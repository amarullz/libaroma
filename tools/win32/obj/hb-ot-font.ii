# 1 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc"
# 1 "<command-line>"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc"
# 27 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc"
# 1 "../../../libs/harfbuzz-ng/src/hb-private.hh" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb.h" 1
# 31 "../../../libs/harfbuzz-ng/src/hb.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-blob.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-blob.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 65 "../../../libs/harfbuzz-ng/src/hb-common.h"
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 1 3 4
# 9 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 1 3 4
# 378 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 385 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 386 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4
# 379 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 402 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 1 3 4
# 10 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs-hard.h" 1 3 4
# 11 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 2 3 4
# 403 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wchar.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 2 3 4
# 66 "../../../libs/harfbuzz-ng/src/hb-common.h" 2




extern "C" {


typedef int hb_bool_t;

typedef uint32_t hb_codepoint_t;
typedef int32_t hb_position_t;
typedef uint32_t hb_mask_t;

typedef union _hb_var_int_t {
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_int_t;




typedef uint32_t hb_tag_t;
# 101 "../../../libs/harfbuzz-ng/src/hb-common.h"
hb_tag_t
hb_tag_from_string (const char *str, int len);


void
hb_tag_to_string (hb_tag_t tag, char *buf);




typedef enum {
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT
} hb_direction_t;


hb_direction_t
hb_direction_from_string (const char *str, int len);

const char *
hb_direction_to_string (hb_direction_t direction);
# 137 "../../../libs/harfbuzz-ng/src/hb-common.h"
typedef const struct hb_language_impl_t *hb_language_t;


hb_language_t
hb_language_from_string (const char *str, int len);

const char *
hb_language_to_string (hb_language_t language);



hb_language_t
hb_language_get_default (void);







typedef enum
{
          HB_SCRIPT_COMMON = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('y')))),
          HB_SCRIPT_INHERITED = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_UNKNOWN = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('z'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('z')))),

          HB_SCRIPT_ARABIC = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_ARMENIAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_BENGALI = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_CYRILLIC = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_DEVANAGARI = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_GEORGIAN = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_GREEK = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_GUJARATI = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('j'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_GURMUKHI = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_HANGUL = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_HAN = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_HEBREW = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_HIRAGANA = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KANNADA = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('n'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KATAKANA = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_LAO = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_LATIN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_MALAYALAM = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_ORIYA = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAMIL = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_TELUGU = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_THAI = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_TIBETAN = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('t')))),

          HB_SCRIPT_BOPOMOFO = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_BRAILLE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CANADIAN_SYLLABICS = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('s')))),
          HB_SCRIPT_CHEROKEE = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_ETHIOPIC = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_KHMER = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_MONGOLIAN = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_MYANMAR = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_OGHAM = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_RUNIC = ((hb_tag_t)((((uint8_t)('R'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_SINHALA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_SYRIAC = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_THAANA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_YI = ((hb_tag_t)((((uint8_t)('Y'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_DESERET = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_GOTHIC = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_OLD_ITALIC = ((hb_tag_t)((((uint8_t)('I'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('l')))),

          HB_SCRIPT_BUHID = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_HANUNOO = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_TAGALOG = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_TAGBANWA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('b')))),

          HB_SCRIPT_CYPRIOT = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_LIMBU = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_LINEAR_B = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OSMANYA = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_SHAVIAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('w')))),
          HB_SCRIPT_TAI_LE = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('e')))),
          HB_SCRIPT_UGARITIC = ((hb_tag_t)((((uint8_t)('U'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))),

          HB_SCRIPT_BUGINESE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_COPTIC = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_GLAGOLITIC = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_KHAROSHTHI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_NEW_TAI_LUE = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_OLD_PERSIAN = ((hb_tag_t)((((uint8_t)('X'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_SYLOTI_NAGRI = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_TIFINAGH = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),

          HB_SCRIPT_BALINESE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CUNEIFORM = ((hb_tag_t)((((uint8_t)('X'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('x')))),
          HB_SCRIPT_NKO = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('k'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_PHAGS_PA = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_PHOENICIAN = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('x')))),

          HB_SCRIPT_CARIAN = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CHAM = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_KAYAH_LI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LEPCHA = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_LYCIAN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LYDIAN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_OL_CHIKI = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_REJANG = ((hb_tag_t)((((uint8_t)('R'))<<24)|(((uint8_t)('j'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_SAURASHTRA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_SUNDANESE = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_VAI = ((hb_tag_t)((((uint8_t)('V'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_AVESTAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('v'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_BAMUM = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('p')))),
          HB_SCRIPT_IMPERIAL_ARAMAIC = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_JAVANESE = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KAITHI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LISU = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_MEETEI_MAYEK = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_OLD_SOUTH_ARABIAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OLD_TURKIC = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_SAMARITAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_TAI_THAM = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAI_VIET = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('t')))),

          HB_SCRIPT_BATAK = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_BRAHMI = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_MANDAIC = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),

          HB_SCRIPT_CHAKMA = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_MEROITIC_CURSIVE = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_MEROITIC_HIEROGLYPHS = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_MIAO = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_SHARADA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_SORA_SOMPENG = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAKRI = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('r')))),

          HB_SCRIPT_BASSA_VAH = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('s')))),
          HB_SCRIPT_CAUCASIAN_ALBANIAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_DUPLOYAN = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_ELBASAN = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_GRANTHA = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_KHOJKI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('j')))),
          HB_SCRIPT_KHUDAWADI = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_LINEAR_A = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_MAHAJANI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('j')))),
          HB_SCRIPT_MANICHAEAN = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_MENDE_KIKAKUI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_MODI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_MRO = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_NABATAEAN = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('b'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_OLD_NORTH_ARABIAN = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OLD_PERMIC = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_PAHAWH_HMONG = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_PALMYRENE = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_PAU_CIN_HAU = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_PSALTER_PAHLAVI = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('p')))),
          HB_SCRIPT_SIDDHAM = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_TIRHUTA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_WARANG_CITI = ((hb_tag_t)((((uint8_t)('W'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),


  HB_SCRIPT_INVALID = ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0)))),
# 309 "../../../libs/harfbuzz-ng/src/hb-common.h"
  _HB_SCRIPT_MAX_VALUE = ((hb_tag_t)((((uint8_t)(0xff))<<24)|(((uint8_t)(0xff))<<16)|(((uint8_t)(0xff))<<8)|((uint8_t)(0xff)))),
  _HB_SCRIPT_MAX_VALUE_SIGNED = ((hb_tag_t)((((uint8_t)(0x7f))<<24)|(((uint8_t)(0xff))<<16)|(((uint8_t)(0xff))<<8)|((uint8_t)(0xff))))

} hb_script_t;




hb_script_t
hb_script_from_iso15924_tag (hb_tag_t tag);



hb_script_t
hb_script_from_string (const char *s, int len);

hb_tag_t
hb_script_to_iso15924_tag (hb_script_t script);

hb_direction_t
hb_script_get_horizontal_direction (hb_script_t script);




typedef struct hb_user_data_key_t {

  char unused;
} hb_user_data_key_t;

typedef void (*hb_destroy_func_t) (void *user_data);


}
# 35 "../../../libs/harfbuzz-ng/src/hb-blob.h" 2

extern "C" {
# 58 "../../../libs/harfbuzz-ng/src/hb-blob.h"
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;

typedef struct hb_blob_t hb_blob_t;

hb_blob_t *
hb_blob_create (const char *data,
  unsigned int length,
  hb_memory_mode_t mode,
  void *user_data,
  hb_destroy_func_t destroy);







hb_blob_t *
hb_blob_create_sub_blob (hb_blob_t *parent,
    unsigned int offset,
    unsigned int length);

hb_blob_t *
hb_blob_get_empty (void);

hb_blob_t *
hb_blob_reference (hb_blob_t *blob);

void
hb_blob_destroy (hb_blob_t *blob);

hb_bool_t
hb_blob_set_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_blob_get_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key);


void
hb_blob_make_immutable (hb_blob_t *blob);

hb_bool_t
hb_blob_is_immutable (hb_blob_t *blob);


unsigned int
hb_blob_get_length (hb_blob_t *blob);

const char *
hb_blob_get_data (hb_blob_t *blob, unsigned int *length);

char *
hb_blob_get_data_writable (hb_blob_t *blob, unsigned int *length);


}
# 32 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-buffer.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 39 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 2

extern "C" {





typedef enum
{
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
} hb_unicode_general_category_t;
# 87 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef enum
{
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,


  HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26,


  HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35,


  HB_UNICODE_COMBINING_CLASS_CCC36 = 36,


  HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91,


  HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107,


  HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122,


  HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
  HB_UNICODE_COMBINING_CLASS_CCC133 = 132,


  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
  HB_UNICODE_COMBINING_CLASS_BELOW = 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
  HB_UNICODE_COMBINING_CLASS_LEFT = 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,

  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,

  HB_UNICODE_COMBINING_CLASS_INVALID = 255
} hb_unicode_combining_class_t;






typedef struct hb_unicode_funcs_t hb_unicode_funcs_t;





hb_unicode_funcs_t *
hb_unicode_funcs_get_default (void);


hb_unicode_funcs_t *
hb_unicode_funcs_create (hb_unicode_funcs_t *parent);

hb_unicode_funcs_t *
hb_unicode_funcs_get_empty (void);

hb_unicode_funcs_t *
hb_unicode_funcs_reference (hb_unicode_funcs_t *ufuncs);

void
hb_unicode_funcs_destroy (hb_unicode_funcs_t *ufuncs);

hb_bool_t
hb_unicode_funcs_set_user_data (hb_unicode_funcs_t *ufuncs,
           hb_user_data_key_t *key,
           void * data,
           hb_destroy_func_t destroy,
    hb_bool_t replace);


void *
hb_unicode_funcs_get_user_data (hb_unicode_funcs_t *ufuncs,
           hb_user_data_key_t *key);


void
hb_unicode_funcs_make_immutable (hb_unicode_funcs_t *ufuncs);

hb_bool_t
hb_unicode_funcs_is_immutable (hb_unicode_funcs_t *ufuncs);

hb_unicode_funcs_t *
hb_unicode_funcs_get_parent (hb_unicode_funcs_t *ufuncs);
# 222 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef hb_unicode_combining_class_t (*hb_unicode_combining_class_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef unsigned int (*hb_unicode_eastasian_width_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_unicode_general_category_t (*hb_unicode_general_category_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_codepoint_t (*hb_unicode_mirroring_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_script_t (*hb_unicode_script_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);

typedef hb_bool_t (*hb_unicode_compose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t a,
           hb_codepoint_t b,
           hb_codepoint_t *ab,
           void *user_data);
typedef hb_bool_t (*hb_unicode_decompose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t ab,
           hb_codepoint_t *a,
           hb_codepoint_t *b,
           void *user_data);
# 267 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef unsigned int (*hb_unicode_decompose_compatibility_func_t) (hb_unicode_funcs_t *ufuncs,
            hb_codepoint_t u,
            hb_codepoint_t *decomposed,
            void *user_data);
# 288 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_combining_class_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_combining_class_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 304 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_eastasian_width_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_eastasian_width_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 320 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_general_category_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_general_category_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 336 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_mirroring_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_mirroring_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 352 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_script_func (hb_unicode_funcs_t *ufuncs,
      hb_unicode_script_func_t func,
      void *user_data, hb_destroy_func_t destroy);
# 368 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_compose_func (hb_unicode_funcs_t *ufuncs,
       hb_unicode_compose_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 384 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_decompose_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 400 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_decompose_compatibility_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_compatibility_func_t func,
         void *user_data, hb_destroy_func_t destroy);



hb_unicode_combining_class_t
hb_unicode_combining_class (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);

unsigned int
hb_unicode_eastasian_width (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);

hb_unicode_general_category_t
hb_unicode_general_category (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);

hb_codepoint_t
hb_unicode_mirroring (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);

hb_script_t
hb_unicode_script (hb_unicode_funcs_t *ufuncs,
     hb_codepoint_t unicode);

hb_bool_t
hb_unicode_compose (hb_unicode_funcs_t *ufuncs,
      hb_codepoint_t a,
      hb_codepoint_t b,
      hb_codepoint_t *ab);
hb_bool_t
hb_unicode_decompose (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t ab,
        hb_codepoint_t *a,
        hb_codepoint_t *b);

unsigned int
hb_unicode_decompose_compatibility (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t u,
        hb_codepoint_t *decomposed);

}
# 39 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-font.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-font.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-face.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-face.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-blob.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-face.h" 2

extern "C" {






typedef struct hb_face_t hb_face_t;

hb_face_t *
hb_face_create (hb_blob_t *blob,
  unsigned int index);

typedef hb_blob_t * (*hb_reference_table_func_t) (hb_face_t *face, hb_tag_t tag, void *user_data);


hb_face_t *
hb_face_create_for_tables (hb_reference_table_func_t reference_table_func,
      void *user_data,
      hb_destroy_func_t destroy);

hb_face_t *
hb_face_get_empty (void);

hb_face_t *
hb_face_reference (hb_face_t *face);

void
hb_face_destroy (hb_face_t *face);

hb_bool_t
hb_face_set_user_data (hb_face_t *face,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_face_get_user_data (hb_face_t *face,
         hb_user_data_key_t *key);

void
hb_face_make_immutable (hb_face_t *face);

hb_bool_t
hb_face_is_immutable (hb_face_t *face);


hb_blob_t *
hb_face_reference_table (hb_face_t *face,
    hb_tag_t tag);

hb_blob_t *
hb_face_reference_blob (hb_face_t *face);

void
hb_face_set_index (hb_face_t *face,
     unsigned int index);

unsigned int
hb_face_get_index (hb_face_t *face);

void
hb_face_set_upem (hb_face_t *face,
    unsigned int upem);

unsigned int
hb_face_get_upem (hb_face_t *face);

void
hb_face_set_glyph_count (hb_face_t *face,
    unsigned int glyph_count);

unsigned int
hb_face_get_glyph_count (hb_face_t *face);


}
# 36 "../../../libs/harfbuzz-ng/src/hb-font.h" 2

extern "C" {


typedef struct hb_font_t hb_font_t;






typedef struct hb_font_funcs_t hb_font_funcs_t;

hb_font_funcs_t *
hb_font_funcs_create (void);

hb_font_funcs_t *
hb_font_funcs_get_empty (void);

hb_font_funcs_t *
hb_font_funcs_reference (hb_font_funcs_t *ffuncs);

void
hb_font_funcs_destroy (hb_font_funcs_t *ffuncs);

hb_bool_t
hb_font_funcs_set_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);


void *
hb_font_funcs_get_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key);


void
hb_font_funcs_make_immutable (hb_font_funcs_t *ffuncs);

hb_bool_t
hb_font_funcs_is_immutable (hb_font_funcs_t *ffuncs);




typedef struct hb_glyph_extents_t
{
  hb_position_t x_bearing;
  hb_position_t y_bearing;
  hb_position_t width;
  hb_position_t height;
} hb_glyph_extents_t;




typedef hb_bool_t (*hb_font_get_glyph_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t unicode, hb_codepoint_t variation_selector,
            hb_codepoint_t *glyph,
            void *user_data);


typedef hb_position_t (*hb_font_get_glyph_advance_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          void *user_data);
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t;
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t;

typedef hb_bool_t (*hb_font_get_glyph_origin_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t;
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t;

typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
          void *user_data);
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t;


typedef hb_bool_t (*hb_font_get_glyph_extents_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t glyph,
             hb_glyph_extents_t *extents,
             void *user_data);
typedef hb_bool_t (*hb_font_get_glyph_contour_point_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph, unsigned int point_index,
            hb_position_t *x, hb_position_t *y,
            void *user_data);


typedef hb_bool_t (*hb_font_get_glyph_name_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          char *name, unsigned int size,
          void *user_data);
typedef hb_bool_t (*hb_font_get_glyph_from_name_func_t) (hb_font_t *font, void *font_data,
        const char *name, int len,
        hb_codepoint_t *glyph,
        void *user_data);
# 153 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 169 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 185 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 201 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_h_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 217 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_v_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 233 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 249 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 265 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_extents_func (hb_font_funcs_t *ffuncs,
          hb_font_get_glyph_extents_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 281 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_contour_point_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_contour_point_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 297 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_name_func (hb_font_funcs_t *ffuncs,
       hb_font_get_glyph_name_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 313 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_from_name_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_from_name_func_t func,
     void *user_data, hb_destroy_func_t destroy);




hb_bool_t
hb_font_get_glyph (hb_font_t *font,
     hb_codepoint_t unicode, hb_codepoint_t variation_selector,
     hb_codepoint_t *glyph);

hb_position_t
hb_font_get_glyph_h_advance (hb_font_t *font,
        hb_codepoint_t glyph);
hb_position_t
hb_font_get_glyph_v_advance (hb_font_t *font,
        hb_codepoint_t glyph);

hb_bool_t
hb_font_get_glyph_h_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);
hb_bool_t
hb_font_get_glyph_v_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);

hb_position_t
hb_font_get_glyph_h_kerning (hb_font_t *font,
        hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);
hb_position_t
hb_font_get_glyph_v_kerning (hb_font_t *font,
        hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);

hb_bool_t
hb_font_get_glyph_extents (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_glyph_extents_t *extents);

hb_bool_t
hb_font_get_glyph_contour_point (hb_font_t *font,
     hb_codepoint_t glyph, unsigned int point_index,
     hb_position_t *x, hb_position_t *y);

hb_bool_t
hb_font_get_glyph_name (hb_font_t *font,
   hb_codepoint_t glyph,
   char *name, unsigned int size);
hb_bool_t
hb_font_get_glyph_from_name (hb_font_t *font,
        const char *name, int len,
        hb_codepoint_t *glyph);




void
hb_font_get_glyph_advance_for_direction (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);
void
hb_font_get_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
void
hb_font_add_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
void
hb_font_subtract_glyph_origin_for_direction (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_position_t *x, hb_position_t *y);

void
hb_font_get_glyph_kerning_for_direction (hb_font_t *font,
      hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);

hb_bool_t
hb_font_get_glyph_extents_for_origin (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_glyph_extents_t *extents);

hb_bool_t
hb_font_get_glyph_contour_point_for_origin (hb_font_t *font,
         hb_codepoint_t glyph, unsigned int point_index,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y);


void
hb_font_glyph_to_string (hb_font_t *font,
    hb_codepoint_t glyph,
    char *s, unsigned int size);

hb_bool_t
hb_font_glyph_from_string (hb_font_t *font,
      const char *s, int len,
      hb_codepoint_t *glyph);
# 428 "../../../libs/harfbuzz-ng/src/hb-font.h"
hb_font_t *
hb_font_create (hb_face_t *face);

hb_font_t *
hb_font_create_sub_font (hb_font_t *parent);

hb_font_t *
hb_font_get_empty (void);

hb_font_t *
hb_font_reference (hb_font_t *font);

void
hb_font_destroy (hb_font_t *font);

hb_bool_t
hb_font_set_user_data (hb_font_t *font,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_font_get_user_data (hb_font_t *font,
         hb_user_data_key_t *key);

void
hb_font_make_immutable (hb_font_t *font);

hb_bool_t
hb_font_is_immutable (hb_font_t *font);

hb_font_t *
hb_font_get_parent (hb_font_t *font);

hb_face_t *
hb_font_get_face (hb_font_t *font);


void
hb_font_set_funcs (hb_font_t *font,
     hb_font_funcs_t *klass,
     void *font_data,
     hb_destroy_func_t destroy);


void
hb_font_set_funcs_data (hb_font_t *font,
          void *font_data,
          hb_destroy_func_t destroy);


void
hb_font_set_scale (hb_font_t *font,
     int x_scale,
     int y_scale);

void
hb_font_get_scale (hb_font_t *font,
     int *x_scale,
     int *y_scale);




void
hb_font_set_ppem (hb_font_t *font,
    unsigned int x_ppem,
    unsigned int y_ppem);

void
hb_font_get_ppem (hb_font_t *font,
    unsigned int *x_ppem,
    unsigned int *y_ppem);


}
# 40 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2

extern "C" {


typedef struct hb_glyph_info_t {
  hb_codepoint_t codepoint;
  hb_mask_t mask;
  uint32_t cluster;


  hb_var_int_t var1;
  hb_var_int_t var2;
} hb_glyph_info_t;

typedef struct hb_glyph_position_t {
  hb_position_t x_advance;
  hb_position_t y_advance;
  hb_position_t x_offset;
  hb_position_t y_offset;


  hb_var_int_t var;
} hb_glyph_position_t;


typedef struct hb_segment_properties_t {
  hb_direction_t direction;
  hb_script_t script;
  hb_language_t language;

  void *reserved1;
  void *reserved2;
} hb_segment_properties_t;







hb_bool_t
hb_segment_properties_equal (const hb_segment_properties_t *a,
        const hb_segment_properties_t *b);

unsigned int
hb_segment_properties_hash (const hb_segment_properties_t *p);







typedef struct hb_buffer_t hb_buffer_t;

hb_buffer_t *
hb_buffer_create (void);

hb_buffer_t *
hb_buffer_get_empty (void);

hb_buffer_t *
hb_buffer_reference (hb_buffer_t *buffer);

void
hb_buffer_destroy (hb_buffer_t *buffer);

hb_bool_t
hb_buffer_set_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);

void *
hb_buffer_get_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key);


typedef enum {
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS
} hb_buffer_content_type_t;

void
hb_buffer_set_content_type (hb_buffer_t *buffer,
       hb_buffer_content_type_t content_type);

hb_buffer_content_type_t
hb_buffer_get_content_type (hb_buffer_t *buffer);


void
hb_buffer_set_unicode_funcs (hb_buffer_t *buffer,
        hb_unicode_funcs_t *unicode_funcs);

hb_unicode_funcs_t *
hb_buffer_get_unicode_funcs (hb_buffer_t *buffer);

void
hb_buffer_set_direction (hb_buffer_t *buffer,
    hb_direction_t direction);

hb_direction_t
hb_buffer_get_direction (hb_buffer_t *buffer);

void
hb_buffer_set_script (hb_buffer_t *buffer,
        hb_script_t script);

hb_script_t
hb_buffer_get_script (hb_buffer_t *buffer);

void
hb_buffer_set_language (hb_buffer_t *buffer,
   hb_language_t language);


hb_language_t
hb_buffer_get_language (hb_buffer_t *buffer);

void
hb_buffer_set_segment_properties (hb_buffer_t *buffer,
      const hb_segment_properties_t *props);

void
hb_buffer_get_segment_properties (hb_buffer_t *buffer,
      hb_segment_properties_t *props);

void
hb_buffer_guess_segment_properties (hb_buffer_t *buffer);


typedef enum {
  HB_BUFFER_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_FLAG_BOT = 0x00000001u,
  HB_BUFFER_FLAG_EOT = 0x00000002u,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 0x00000004u
} hb_buffer_flags_t;

void
hb_buffer_set_flags (hb_buffer_t *buffer,
       hb_buffer_flags_t flags);

hb_buffer_flags_t
hb_buffer_get_flags (hb_buffer_t *buffer);







void
hb_buffer_set_replacement_codepoint (hb_buffer_t *buffer,
         hb_codepoint_t replacement);

hb_codepoint_t
hb_buffer_get_replacement_codepoint (hb_buffer_t *buffer);




void
hb_buffer_reset (hb_buffer_t *buffer);


void
hb_buffer_clear_contents (hb_buffer_t *buffer);


hb_bool_t
hb_buffer_pre_allocate (hb_buffer_t *buffer,
          unsigned int size);



hb_bool_t
hb_buffer_allocation_successful (hb_buffer_t *buffer);

void
hb_buffer_reverse (hb_buffer_t *buffer);

void
hb_buffer_reverse_clusters (hb_buffer_t *buffer);




void
hb_buffer_add (hb_buffer_t *buffer,
        hb_codepoint_t codepoint,
        unsigned int cluster);

void
hb_buffer_add_utf8 (hb_buffer_t *buffer,
      const char *text,
      int text_length,
      unsigned int item_offset,
      int item_length);

void
hb_buffer_add_utf16 (hb_buffer_t *buffer,
       const uint16_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

void
hb_buffer_add_utf32 (hb_buffer_t *buffer,
       const uint32_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);


void
hb_buffer_add_codepoints (hb_buffer_t *buffer,
     const hb_codepoint_t *text,
     int text_length,
     unsigned int item_offset,
     int item_length);



hb_bool_t
hb_buffer_set_length (hb_buffer_t *buffer,
        unsigned int length);


unsigned int
hb_buffer_get_length (hb_buffer_t *buffer);




hb_glyph_info_t *
hb_buffer_get_glyph_infos (hb_buffer_t *buffer,
                           unsigned int *length);


hb_glyph_position_t *
hb_buffer_get_glyph_positions (hb_buffer_t *buffer,
                               unsigned int *length);





void
hb_buffer_normalize_glyphs (hb_buffer_t *buffer);






typedef enum {
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 0x00000001u,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 0x00000002u,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 0x00000004u
} hb_buffer_serialize_flags_t;

typedef enum {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('E'))<<16)|(((uint8_t)('X'))<<8)|((uint8_t)('T')))),
  HB_BUFFER_SERIALIZE_FORMAT_JSON = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('N')))),
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0))))
} hb_buffer_serialize_format_t;


hb_buffer_serialize_format_t
hb_buffer_serialize_format_from_string (const char *str, int len);

const char *
hb_buffer_serialize_format_to_string (hb_buffer_serialize_format_t format);

const char **
hb_buffer_serialize_list_formats (void);


unsigned int
hb_buffer_serialize_glyphs (hb_buffer_t *buffer,
       unsigned int start,
       unsigned int end,
       char *buf,
       unsigned int buf_size,
       unsigned int *buf_consumed,
       hb_font_t *font,
       hb_buffer_serialize_format_t format,
       hb_buffer_serialize_flags_t flags);

hb_bool_t
hb_buffer_deserialize_glyphs (hb_buffer_t *buffer,
         const char *buf,
         int buf_len,
         const char **end_ptr,
         hb_font_t *font,
         hb_buffer_serialize_format_t format);


}
# 33 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-deprecated.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2

extern "C" {
# 49 "../../../libs/harfbuzz-ng/src/hb-deprecated.h"
}
# 35 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-set.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-set.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-set.h" 2

extern "C" {




typedef struct hb_set_t hb_set_t;


hb_set_t *
hb_set_create (void);

hb_set_t *
hb_set_get_empty (void);

hb_set_t *
hb_set_reference (hb_set_t *set);

void
hb_set_destroy (hb_set_t *set);

hb_bool_t
hb_set_set_user_data (hb_set_t *set,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

void *
hb_set_get_user_data (hb_set_t *set,
        hb_user_data_key_t *key);



hb_bool_t
hb_set_allocation_successful (const hb_set_t *set);

void
hb_set_clear (hb_set_t *set);

hb_bool_t
hb_set_is_empty (const hb_set_t *set);

hb_bool_t
hb_set_has (const hb_set_t *set,
     hb_codepoint_t codepoint);



void
hb_set_add (hb_set_t *set,
     hb_codepoint_t codepoint);

void
hb_set_add_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

void
hb_set_del (hb_set_t *set,
     hb_codepoint_t codepoint);

void
hb_set_del_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

hb_bool_t
hb_set_is_equal (const hb_set_t *set,
   const hb_set_t *other);

void
hb_set_set (hb_set_t *set,
     const hb_set_t *other);

void
hb_set_union (hb_set_t *set,
       const hb_set_t *other);

void
hb_set_intersect (hb_set_t *set,
    const hb_set_t *other);

void
hb_set_subtract (hb_set_t *set,
   const hb_set_t *other);

void
hb_set_symmetric_difference (hb_set_t *set,
        const hb_set_t *other);

void
hb_set_invert (hb_set_t *set);

unsigned int
hb_set_get_population (const hb_set_t *set);


hb_codepoint_t
hb_set_get_min (const hb_set_t *set);


hb_codepoint_t
hb_set_get_max (const hb_set_t *set);


hb_bool_t
hb_set_next (const hb_set_t *set,
      hb_codepoint_t *codepoint);


hb_bool_t
hb_set_next_range (const hb_set_t *set,
     hb_codepoint_t *first,
     hb_codepoint_t *last);


}
# 38 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-shape.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 39 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2

extern "C" {


typedef struct hb_feature_t {
  hb_tag_t tag;
  uint32_t value;
  unsigned int start;
  unsigned int end;
} hb_feature_t;


hb_bool_t
hb_feature_from_string (const char *str, int len,
   hb_feature_t *feature);



void
hb_feature_to_string (hb_feature_t *feature,
        char *buf, unsigned int size);


void
hb_shape (hb_font_t *font,
   hb_buffer_t *buffer,
   const hb_feature_t *features,
   unsigned int num_features);

hb_bool_t
hb_shape_full (hb_font_t *font,
        hb_buffer_t *buffer,
        const hb_feature_t *features,
        unsigned int num_features,
        const char * const *shaper_list);

const char **
hb_shape_list_shapers (void);


}
# 39 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 2

extern "C" {

typedef struct hb_shape_plan_t hb_shape_plan_t;

hb_shape_plan_t *
hb_shape_plan_create (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

hb_shape_plan_t *
hb_shape_plan_create_cached (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

hb_shape_plan_t *
hb_shape_plan_get_empty (void);

hb_shape_plan_t *
hb_shape_plan_reference (hb_shape_plan_t *shape_plan);

void
hb_shape_plan_destroy (hb_shape_plan_t *shape_plan);

hb_bool_t
hb_shape_plan_set_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

void *
hb_shape_plan_get_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key);


hb_bool_t
hb_shape_plan_execute (hb_shape_plan_t *shape_plan,
         hb_font_t *font,
         hb_buffer_t *buffer,
         const hb_feature_t *features,
         unsigned int num_features);

const char *
hb_shape_plan_get_shaper (hb_shape_plan_t *shape_plan);


}
# 40 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 41 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-version.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-version.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-version.h" 2

extern "C" {
# 50 "../../../libs/harfbuzz-ng/src/hb-version.h"
void
hb_version (unsigned int *major,
     unsigned int *minor,
     unsigned int *micro);

const char *
hb_version_string (void);

hb_bool_t
hb_version_atleast (unsigned int major,
      unsigned int minor,
      unsigned int micro);


}
# 42 "../../../libs/harfbuzz-ng/src/hb.h" 2

extern "C" {
}
# 37 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2


# 1 "../../../libs/harfbuzz-ng/src/hb-ot.h" 1
# 33 "../../../libs/harfbuzz-ng/src/hb-ot.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-font.h" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-font.h"
extern "C" {


void
hb_ot_font_set_funcs (hb_font_t *font);


}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h"
extern "C" {





void
hb_ot_tags_from_script (hb_script_t script,
   hb_tag_t *script_tag_1,
   hb_tag_t *script_tag_2);

hb_script_t
hb_ot_tag_to_script (hb_tag_t tag);

hb_tag_t
hb_ot_tag_from_language (hb_language_t language);

hb_language_t
hb_ot_tag_to_language (hb_tag_t tag);


}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h" 2

extern "C" {
# 51 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_glyph_classes (hb_face_t *face);

typedef enum {
  HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED = 0,
  HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH = 1,
  HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE = 2,
  HB_OT_LAYOUT_GLYPH_CLASS_MARK = 3,
  HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT = 4
} hb_ot_layout_glyph_class_t;

hb_ot_layout_glyph_class_t
hb_ot_layout_get_glyph_class (hb_face_t *face,
         hb_codepoint_t glyph);

void
hb_ot_layout_get_glyphs_in_class (hb_face_t *face,
      hb_ot_layout_glyph_class_t klass,
      hb_set_t *glyphs );




unsigned int
hb_ot_layout_get_attach_points (hb_face_t *face,
    hb_codepoint_t glyph,
    unsigned int start_offset,
    unsigned int *point_count ,
    unsigned int *point_array );


unsigned int
hb_ot_layout_get_ligature_carets (hb_font_t *font,
      hb_direction_t direction,
      hb_codepoint_t glyph,
      unsigned int start_offset,
      unsigned int *caret_count ,
      hb_position_t *caret_array );
# 99 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
unsigned int
hb_ot_layout_table_get_script_tags (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int start_offset,
        unsigned int *script_count ,
        hb_tag_t *script_tags );

hb_bool_t
hb_ot_layout_table_find_script (hb_face_t *face,
    hb_tag_t table_tag,
    hb_tag_t script_tag,
    unsigned int *script_index);


hb_bool_t
hb_ot_layout_table_choose_script (hb_face_t *face,
      hb_tag_t table_tag,
      const hb_tag_t *script_tags,
      unsigned int *script_index,
      hb_tag_t *chosen_script);

unsigned int
hb_ot_layout_table_get_feature_tags (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int start_offset,
         unsigned int *feature_count ,
         hb_tag_t *feature_tags );

unsigned int
hb_ot_layout_script_get_language_tags (hb_face_t *face,
           hb_tag_t table_tag,
           unsigned int script_index,
           unsigned int start_offset,
           unsigned int *language_count ,
           hb_tag_t *language_tags );

hb_bool_t
hb_ot_layout_script_find_language (hb_face_t *face,
       hb_tag_t table_tag,
       unsigned int script_index,
       hb_tag_t language_tag,
       unsigned int *language_index);

hb_bool_t
hb_ot_layout_language_get_required_feature_index (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int *feature_index);

hb_bool_t
hb_ot_layout_language_get_required_feature (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int script_index,
         unsigned int language_index,
         unsigned int *feature_index,
         hb_tag_t *feature_tag);

unsigned int
hb_ot_layout_language_get_feature_indexes (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int start_offset,
        unsigned int *feature_count ,
        unsigned int *feature_indexes );

unsigned int
hb_ot_layout_language_get_feature_tags (hb_face_t *face,
     hb_tag_t table_tag,
     unsigned int script_index,
     unsigned int language_index,
     unsigned int start_offset,
     unsigned int *feature_count ,
     hb_tag_t *feature_tags );

hb_bool_t
hb_ot_layout_language_find_feature (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        hb_tag_t feature_tag,
        unsigned int *feature_index);

unsigned int
hb_ot_layout_feature_get_lookups (hb_face_t *face,
      hb_tag_t table_tag,
      unsigned int feature_index,
      unsigned int start_offset,
      unsigned int *lookup_count ,
      unsigned int *lookup_indexes );

unsigned int
hb_ot_layout_table_get_lookup_count (hb_face_t *face,
         hb_tag_t table_tag);


void
hb_ot_layout_collect_lookups (hb_face_t *face,
         hb_tag_t table_tag,
         const hb_tag_t *scripts,
         const hb_tag_t *languages,
         const hb_tag_t *features,
         hb_set_t *lookup_indexes );

void
hb_ot_layout_lookup_collect_glyphs (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int lookup_index,
        hb_set_t *glyphs_before,
        hb_set_t *glyphs_input,
        hb_set_t *glyphs_after,
        hb_set_t *glyphs_output );
# 244 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_substitution (hb_face_t *face);

hb_bool_t
hb_ot_layout_lookup_would_substitute (hb_face_t *face,
          unsigned int lookup_index,
          const hb_codepoint_t *glyphs,
          unsigned int glyphs_length,
          hb_bool_t zero_context);

void
hb_ot_layout_lookup_substitute_closure (hb_face_t *face,
            unsigned int lookup_index,
            hb_set_t *glyphs
                                     );
# 277 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_positioning (hb_face_t *face);
# 291 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_get_size_params (hb_face_t *face,
         unsigned int *design_size,
         unsigned int *subfamily_id,
         unsigned int *subfamily_name_id,
         unsigned int *range_start,
         unsigned int *range_end );


}
# 35 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-shape.h"
extern "C" {


void
hb_ot_shape_glyphs_closure (hb_font_t *font,
       hb_buffer_t *buffer,
       const hb_feature_t *features,
       unsigned int num_features,
       hb_set_t *glyphs);

void
hb_ot_shape_plan_collect_lookups (hb_shape_plan_t *shape_plan,
      hb_tag_t table_tag,
      hb_set_t *lookup_indexes );

}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2

extern "C" {

}
# 40 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 1 3 4
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 212 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4

extern "C" {






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitflags.h" 1 3 4
# 42 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 1 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\endian.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\typesizes.h" 1 3 4
# 122 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap-16.h" 1 3 4
# 35 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 65 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 95 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 235 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 305 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;

typedef __caddr_t caddr_t;







typedef __key_t key_t;
# 135 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 57 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __clock_t clock_t;



# 73 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __time_t time_t;



# 91 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __timer_t timer_t;
# 136 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 150 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 203 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 222 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\select.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 1 3 4
# 22 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 120 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef long int __fd_mask;
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern "C" {
# 106 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
}
# 223 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 58 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
}
# 226 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 265 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;

    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 274 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


}
# 315 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 620 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 812 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 899 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdlib-float.h" 1 3 4
# 956 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 968 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
}
# 44 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 147 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 45 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern "C" {




# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 166 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 234 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 261 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}
# 46 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 47 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 1 3 4
# 29 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 1 3 4
# 15 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 16 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 1 3 4
# 82 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 49 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 40 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  __off64_t _offset;
# 302 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 464 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 526 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
}
# 75 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 108 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdio_lim.h" 1 3 4
# 165 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 205 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 649 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (const char *__s);






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 1 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 873 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 943 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
}
# 53 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\linux\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno-base.h" 1 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno.h" 2 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm\\errno.h" 2 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\linux\\errno.h" 2 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 2 3 4
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 68 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
typedef int error_t;
# 54 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 55 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 181 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename Type>
static inline Type MIN (const Type &a, const Type &b) { return a < b ? a : b; }


template <typename Type>
static inline Type MAX (const Type &a, const Type &b) { return a > b ? a : b; }

static inline unsigned int DIV_CEIL (const unsigned int a, unsigned int b)
{ return (a + (b - 1)) / b; }



template <typename Type, unsigned int n>
static inline unsigned int ARRAY_LENGTH (const Type (&)[n]) { return n; }
# 213 "../../../libs/harfbuzz-ng/src/hb-private.hh"
__attribute__((unused)) typedef int _static_assert_on_line_213_failed[(((sizeof (int8_t) == 1)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_214_failed[(((sizeof (uint8_t) == 1)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_215_failed[(((sizeof (int16_t) == 2)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_216_failed[(((sizeof (uint16_t) == 2)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_217_failed[(((sizeof (int32_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_218_failed[(((sizeof (uint32_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_219_failed[(((sizeof (int64_t) == 8)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_220_failed[(((sizeof (uint64_t) == 8)))?1:-1];

__attribute__((unused)) typedef int _static_assert_on_line_222_failed[(((sizeof (hb_codepoint_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_223_failed[(((sizeof (hb_position_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_224_failed[(((sizeof (hb_mask_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_225_failed[(((sizeof (hb_var_int_t) == 4)))?1:-1];
# 258 "../../../libs/harfbuzz-ng/src/hb-private.hh"
struct _hb_void_t {};
typedef const _hb_void_t &hb_void_t;



static inline __attribute__((const)) unsigned int
_hb_popcount32 (uint32_t mask)
{

  return __builtin_popcount (mask);







}


static inline __attribute__((const)) unsigned int
_hb_bit_storage (unsigned int number)
{



  unsigned int n_bits = 0;
  while (number) {
    n_bits++;
    number >>= 1;
  }
  return n_bits;

}


static inline __attribute__((const)) unsigned int
_hb_ctz (unsigned int number)
{



  unsigned int n_bits = 0;
  if ((!number)) return 0;
  while (!(number & 1)) {
    n_bits++;
    number >>= 1;
  }
  return n_bits;

}

static inline bool
_hb_unsigned_int_mul_overflows (unsigned int count, unsigned int size)
{
  return (size > 0) && (count >= ((unsigned int) -1) / size);
}



typedef int (*hb_compare_func_t) (const void *, const void *);
# 327 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename Type, unsigned int StaticSize=16>
struct hb_prealloced_array_t
{
  unsigned int len;
  unsigned int allocated;
  Type *array;
  Type static_array[StaticSize];

  void init (void) { memset (this, 0, sizeof (*this)); }

  inline Type& operator [] (unsigned int i) { return array[i]; }
  inline const Type& operator [] (unsigned int i) const { return array[i]; }

  inline Type *push (void)
  {
    if (!array) {
      array = static_array;
      allocated = ARRAY_LENGTH (static_array);
    }
    if ((len < allocated))
      return &array[len++];


    unsigned int new_allocated = allocated + (allocated >> 1) + 8;
    Type *new_array = __null;

    if (array == static_array) {
      new_array = (Type *) calloc (new_allocated, sizeof (Type));
      if (new_array)
        memcpy (new_array, array, len * sizeof (Type));
    } else {
      bool overflows = (new_allocated < allocated) || _hb_unsigned_int_mul_overflows (new_allocated, sizeof (Type));
      if ((!overflows)) {
 new_array = (Type *) realloc (array, new_allocated * sizeof (Type));
      }
    }

    if ((!new_array))
      return __null;

    array = new_array;
    allocated = new_allocated;
    return &array[len++];
  }

  inline void pop (void)
  {
    len--;
  }

  inline void remove (unsigned int i)
  {
     if ((i >= len))
       return;
     memmove (static_cast<void *> (&array[i]),
       static_cast<void *> (&array[i + 1]),
       (len - i - 1) * sizeof (Type));
     len--;
  }

  inline void shrink (unsigned int l)
  {
     if (l < len)
       len = l;
  }

  template <typename T>
  inline Type *find (T v) {
    for (unsigned int i = 0; i < len; i++)
      if (array[i] == v)
 return &array[i];
    return __null;
  }
  template <typename T>
  inline const Type *find (T v) const {
    for (unsigned int i = 0; i < len; i++)
      if (array[i] == v)
 return &array[i];
    return __null;
  }

  inline void qsort (void)
  {
    ::qsort (array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  inline void qsort (unsigned int start, unsigned int end)
  {
    ::qsort (array + start, end - start, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  template <typename T>
  inline Type *bsearch (T *key)
  {
    return (Type *) ::bsearch (key, array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }
  template <typename T>
  inline const Type *bsearch (T *key) const
  {
    return (const Type *) ::bsearch (key, array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  inline void finish (void)
  {
    if (array != static_array)
      free (array);
    array = __null;
    allocated = len = 0;
  }
};

template <typename Type>
struct hb_auto_array_t : hb_prealloced_array_t <Type>
{
  hb_auto_array_t (void) { hb_prealloced_array_t<Type>::init (); }
  ~hb_auto_array_t (void) { hb_prealloced_array_t<Type>::finish (); }
};



template <typename item_t, typename lock_t>
struct hb_lockable_set_t
{
  hb_prealloced_array_t <item_t, 2> items;

  inline void init (void) { items.init (); }

  template <typename T>
  inline item_t *replace_or_insert (T v, lock_t &l, bool replace)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item) {
      if (replace) {
 item_t old = *item;
 *item = v;
 l.unlock ();
 old.finish ();
      }
      else {
        item = __null;
 l.unlock ();
      }
    } else {
      item = items.push ();
      if ((item))
 *item = v;
      l.unlock ();
    }
    return item;
  }

  template <typename T>
  inline void remove (T v, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item) {
      item_t old = *item;
      *item = items[items.len - 1];
      items.pop ();
      l.unlock ();
      old.finish ();
    } else {
      l.unlock ();
    }
  }

  template <typename T>
  inline bool find (T v, item_t *i, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item)
      *i = *item;
    l.unlock ();
    return !!item;
  }

  template <typename T>
  inline item_t *find_or_insert (T v, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (!item) {
      item = items.push ();
      if ((item))
        *item = v;
    }
    l.unlock ();
    return item;
  }

  inline void finish (lock_t &l)
  {
    if (!items.len) {

      items.finish ();
      return;
    }
    l.lock ();
    while (items.len) {
      item_t old = items[items.len - 1];
 items.pop ();
 l.unlock ();
 old.finish ();
 l.lock ();
    }
    items.finish ();
    l.unlock ();
  }

};




static inline bool ISALPHA (unsigned char c)
{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }
static inline bool ISALNUM (unsigned char c)
{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'); }
static inline bool ISSPACE (unsigned char c)
{ return c == ' ' || c =='\f'|| c =='\n'|| c =='\r'|| c =='\t'|| c =='\v'; }
static inline unsigned char TOUPPER (unsigned char c)
{ return (c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c; }
static inline unsigned char TOLOWER (unsigned char c)
{ return (c >= 'A' && c <= 'Z') ? c - 'A' + 'a' : c; }
# 576 "../../../libs/harfbuzz-ng/src/hb-private.hh"
static inline bool
_hb_debug (unsigned int level,
    unsigned int max_level)
{
  return level < max_level;
}




template <int max_level> static inline void
_hb_debug_msg_va (const char *what,
    const void *obj,
    const char *func,
    bool indented,
    unsigned int level,
    int level_dir,
    const char *message,
    va_list ap) __attribute__((__format__ (__printf__, 7, 0)));
template <int max_level> static inline void
_hb_debug_msg_va (const char *what,
    const void *obj,
    const char *func,
    bool indented,
    unsigned int level,
    int level_dir,
    const char *message,
    va_list ap)
{
  if (!_hb_debug (level, max_level))
    return;

  fprintf (stderr, "%-10s", what ? what : "");

  if (obj)
    fprintf (stderr, "(%0*lx) ", (unsigned int) (2 * sizeof (void *)), (unsigned long) obj);
  else
    fprintf (stderr, " %*s  ", (unsigned int) (2 * sizeof (void *)), "");

  if (indented) {







    static const char bars[] = "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202";
    fprintf (stderr, "%2u %s" "\342\224\234" "%s",
      level,
      bars + sizeof (bars) - 1 - MIN ((unsigned int) sizeof (bars), (unsigned int) (sizeof ("\342\224\202") - 1) * level),
      level_dir ? (level_dir > 0 ? "\342\225\256" : "\342\225\257") : "\342\225\264");
  } else
    fprintf (stderr, "   " "\342\224\234" "\342\225\264");

  if (func)
  {
    unsigned int func_len = strlen (func);


    if (0 == strncmp (func, "typename ", 9))
      func += 9;

    const char *space = strchr (func, ' ');
    if (space)
      func = space + 1;

    const char *paren = strchr (func, '(');
    if (paren)
      func_len = paren - func;

    fprintf (stderr, "%.*s: ", func_len, func);
  }

  if (message)
    vfprintf (stderr, message, ap);

  fprintf (stderr, "\n");
}
template <> inline void
_hb_debug_msg_va<0> (const char *what __attribute__((unused)),
       const void *obj __attribute__((unused)),
       const char *func __attribute__((unused)),
       bool indented __attribute__((unused)),
       unsigned int level __attribute__((unused)),
       int level_dir __attribute__((unused)),
       const char *message __attribute__((unused)),
       va_list ap __attribute__((unused))) {}

template <int max_level> static inline void
_hb_debug_msg (const char *what,
        const void *obj,
        const char *func,
        bool indented,
        unsigned int level,
        int level_dir,
        const char *message,
        ...) __attribute__((__format__ (__printf__, 7, 8)));
template <int max_level> static inline void
_hb_debug_msg (const char *what,
        const void *obj,
        const char *func,
        bool indented,
        unsigned int level,
        int level_dir,
        const char *message,
        ...)
{
  va_list ap;
  __builtin_va_start(ap,message);
  _hb_debug_msg_va<max_level> (what, obj, func, indented, level, level_dir, message, ap);
  __builtin_va_end(ap);
}
template <> inline void
_hb_debug_msg<0> (const char *what __attribute__((unused)),
    const void *obj __attribute__((unused)),
    const char *func __attribute__((unused)),
    bool indented __attribute__((unused)),
    unsigned int level __attribute__((unused)),
    int level_dir __attribute__((unused)),
    const char *message __attribute__((unused)),
    ...) __attribute__((__format__ (__printf__, 7, 8)));
template <> inline void
_hb_debug_msg<0> (const char *what __attribute__((unused)),
    const void *obj __attribute__((unused)),
    const char *func __attribute__((unused)),
    bool indented __attribute__((unused)),
    unsigned int level __attribute__((unused)),
    int level_dir __attribute__((unused)),
    const char *message __attribute__((unused)),
    ...) {}
# 717 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename T>
struct hb_printer_t {
  const char *print (const T&) { return "something"; }
};

template <>
struct hb_printer_t<bool> {
  const char *print (bool v) { return v ? "true" : "false"; }
};

template <>
struct hb_printer_t<hb_void_t> {
  const char *print (hb_void_t) { return ""; }
};






template <typename T>
static inline void _hb_warn_no_return (bool returned)
{
  if ((!returned)) {
    fprintf (stderr, "OUCH, returned with no call to TRACE_RETURN.  This is a bug, please report.\n");
  }
}
template <>
           inline void _hb_warn_no_return<hb_void_t> (bool returned __attribute__((unused)))
{}

template <int max_level, typename ret_t>
struct hb_auto_trace_t {
  explicit inline hb_auto_trace_t (unsigned int *plevel_,
       const char *what_,
       const void *obj_,
       const char *func,
       const char *message,
       ...) : plevel (plevel_), what (what_), obj (obj_), returned (false)
  {
    if (plevel) ++*plevel;

    va_list ap;
    __builtin_va_start(ap,message);
    _hb_debug_msg_va<max_level> (what, obj, func, true, plevel ? *plevel : 0, +1, message, ap);
    __builtin_va_end(ap);
  }
  inline ~hb_auto_trace_t (void)
  {
    _hb_warn_no_return<ret_t> (returned);
    if (!returned) {
      _hb_debug_msg<max_level> (what, obj, __null, true, plevel ? *plevel : 1, -1, " ");
    }
    if (plevel) --*plevel;
  }

  inline ret_t ret (ret_t v, unsigned int line = 0)
  {
    if ((returned)) {
      fprintf (stderr, "OUCH, double calls to TRACE_RETURN.  This is a bug, please report.\n");
      return v;
    }

    _hb_debug_msg<max_level> (what, obj, __null, true, plevel ? *plevel : 1, -1,
         "return %s (line %d)",
         hb_printer_t<ret_t>().print (v), line);
    if (plevel) --*plevel;
    plevel = __null;
    returned = true;
    return v;
  }

  private:
  unsigned int *plevel;
  const char *what;
  const void *obj;
  bool returned;
};
template <typename ret_t>
struct hb_auto_trace_t<0, ret_t> {
  explicit inline hb_auto_trace_t (unsigned int *plevel_ __attribute__((unused)),
       const char *what __attribute__((unused)),
       const void *obj __attribute__((unused)),
       const char *func __attribute__((unused)),
       const char *message __attribute__((unused)),
       ...) {}

  inline ret_t ret (ret_t v, unsigned int line __attribute__((unused)) = 0) { return v; }
};





template <typename T> class hb_assert_unsigned_t;
template <> class hb_assert_unsigned_t<unsigned char> {};
template <> class hb_assert_unsigned_t<unsigned short> {};
template <> class hb_assert_unsigned_t<unsigned int> {};
template <> class hb_assert_unsigned_t<unsigned long> {};

template <typename T> static inline bool
hb_in_range (T u, T lo, T hi)
{





  __attribute__((unused)) typedef int _static_assert_on_line_825_failed[(((sizeof (hb_assert_unsigned_t<T>) >= 0)))?1:-1];



  return (T)(u - lo) <= (T)(hi - lo);
}

template <typename T> static inline bool
hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2)
{
  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2);
}

template <typename T> static inline bool
hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2, T lo3, T hi3)
{
  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2) || hb_in_range (u, lo3, hi3);
}
# 853 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename T, typename T2> static inline void
hb_bubble_sort (T *array, unsigned int len, int(*compar)(const T *, const T *), T2 *array2)
{
  if ((!len))
    return;

  unsigned int k = len - 1;
  do {
    unsigned int new_k = 0;

    for (unsigned int j = 0; j < k; j++)
      if (compar (&array[j], &array[j+1]) > 0)
      {
        {
   T t;
   t = array[j];
   array[j] = array[j + 1];
   array[j + 1] = t;
 }
        if (array2)
        {
   T2 t;
   t = array2[j];
   array2[j] = array2[j + 1];
   array2[j + 1] = t;
 }

 new_k = j;
      }
    k = new_k;
  } while (k);
}

template <typename T> static inline void
hb_bubble_sort (T *array, unsigned int len, int(*compar)(const T *, const T *))
{
  hb_bubble_sort (array, len, compar, (int *) __null);
}

static inline hb_bool_t
hb_codepoint_parse (const char *s, unsigned int len, int base, hb_codepoint_t *out)
{

  char buf[64];
  len = MIN (ARRAY_LENGTH (buf) - 1, len);
  strncpy (buf, s, len);
  buf[len] = '\0';

  char *end;
  (*__errno_location ()) = 0;
  unsigned long v = strtoul (buf, &end, base);
  if ((*__errno_location ())) return false;
  if (*end) return false;
  *out = v;
  return true;
}




struct hb_options_t
{
  unsigned int initialized : 1;
  unsigned int uniscribe_bug_compatible : 1;
};

union hb_options_union_t {
  unsigned int i;
  hb_options_t opts;
};
__attribute__((unused)) typedef int _static_assert_on_line_923_failed[(((sizeof (int) == sizeof (hb_options_union_t))))?1:-1];

__attribute__((__visibility__("hidden"))) void
_hb_options_init (void);

extern __attribute__((__visibility__("hidden"))) hb_options_union_t _hb_options;

static inline hb_options_t
hb_options (void)
{
  if ((!_hb_options.i))
    _hb_options_init ();

  return _hb_options.opts;
}
# 28 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc" 2



# 1 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-font-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-object-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-atomic-private.hh" 1
# 125 "../../../libs/harfbuzz-ng/src/hb-atomic-private.hh"
typedef int hb_atomic_int_t;
# 38 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh" 1
# 105 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh"
typedef int hb_mutex_impl_t;
# 116 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh"
struct hb_mutex_t
{


  hb_mutex_impl_t m;

  inline void init (void) { do {} while (0); }
  inline void lock (void) { do {} while (0); }
  inline void unlock (void) { do {} while (0); }
  inline void finish (void) { do {} while (0); }
};
# 39 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 2
# 52 "../../../libs/harfbuzz-ng/src/hb-object-private.hh"
struct hb_reference_count_t
{
  hb_atomic_int_t ref_count;

  inline void init (int v) { ref_count = v; }
  inline int inc (void) { return (((const_cast<hb_atomic_int_t &> (ref_count)) += (1)) - (1)); }
  inline int dec (void) { return (((const_cast<hb_atomic_int_t &> (ref_count)) += (-1)) - (-1)); }
  inline void finish (void) { ref_count = ((hb_atomic_int_t) -1); }

  inline bool is_invalid (void) const { return ref_count == ((hb_atomic_int_t) -1); }

};





struct hb_user_data_array_t
{
  struct hb_user_data_item_t {
    hb_user_data_key_t *key;
    void *data;
    hb_destroy_func_t destroy;

    inline bool operator == (hb_user_data_key_t *other_key) const { return key == other_key; }
    inline bool operator == (hb_user_data_item_t &other) const { return key == other.key; }

    void finish (void) { if (destroy) destroy (data); }
  };

  hb_mutex_t lock;
  hb_lockable_set_t<hb_user_data_item_t, hb_mutex_t> items;

  inline void init (void) { lock.init (); items.init (); }

  __attribute__((__visibility__("hidden"))) bool set (hb_user_data_key_t *key,
   void * data,
   hb_destroy_func_t destroy,
   hb_bool_t replace);

  __attribute__((__visibility__("hidden"))) void *get (hb_user_data_key_t *key);

  inline void finish (void) { items.finish (lock); lock.finish (); }
};




struct hb_object_header_t
{
  hb_reference_count_t ref_count;
  hb_user_data_array_t user_data;



  private:
  __attribute__((unused)) inline void _static_assertion_on_line_108 (void) const { do { typedef __typeof__(*this) _type_108; union _type__type_108_on_line_108_is_not_POD { _type_108 instance; }; } while (0); };
};




template <typename Type>
static inline void hb_object_trace (const Type *obj, const char *function)
{
  _hb_debug_msg<(0 +0)> ("OBJECT", ((void *) obj), __null, false, 0, 0, "%s refcount=%d", function, obj ? obj->header.ref_count.ref_count : 0)


                                                ;
}

template <typename Type>
static inline Type *hb_object_create (void)
{
  Type *obj = (Type *) calloc (1, sizeof (Type));

  if ((!obj))
    return obj;

  hb_object_init (obj);
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  return obj;
}
template <typename Type>
static inline void hb_object_init (Type *obj)
{
  obj->header.ref_count.init (1);
  obj->header.user_data.init ();
}
template <typename Type>
static inline bool hb_object_is_inert (const Type *obj)
{
  return (obj->header.ref_count.is_invalid ());
}
template <typename Type>
static inline Type *hb_object_reference (Type *obj)
{
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  if ((!obj || hb_object_is_inert (obj)))
    return obj;
  obj->header.ref_count.inc ();
  return obj;
}
template <typename Type>
static inline bool hb_object_destroy (Type *obj)
{
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  if ((!obj || hb_object_is_inert (obj)))
    return false;
  if (obj->header.ref_count.dec () != 1)
    return false;

  obj->header.ref_count.finish ();
  obj->header.user_data.finish ();
  return true;
}
template <typename Type>
static inline bool hb_object_set_user_data (Type *obj,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace)
{
  if ((!obj || hb_object_is_inert (obj)))
    return false;
  return obj->header.user_data.set (key, data, destroy, replace);
}

template <typename Type>
static inline void *hb_object_get_user_data (Type *obj,
          hb_user_data_key_t *key)
{
  if ((!obj || hb_object_is_inert (obj)))
    return __null;
  return obj->header.user_data.get (key);
}
# 35 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-face-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh"
typedef hb_bool_t hb_shape_func_t (hb_shape_plan_t *shape_plan,
       hb_font_t *font,
       hb_buffer_t *buffer,
       const hb_feature_t *features,
       unsigned int num_features);



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
extern "C" __attribute__((__visibility__("hidden"))) hb_shape_func_t _hb_ot_shape;
# 41 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 2


struct hb_shaper_pair_t {
  char name[16];
  hb_shape_func_t *func;
};

__attribute__((__visibility__("hidden"))) const hb_shaper_pair_t *
_hb_shapers_get (void);



struct hb_shaper_data_t {

# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
void *ot;
# 56 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 2

};
# 36 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh"
struct hb_shape_plan_t
{
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_38 (void) const { do { typedef __typeof__(*this) _type_38; union _type__type_38_on_line_38_is_not_POD { _type_38 instance; }; } while (0); };

  hb_bool_t default_shaper_list;
  hb_face_t *face_unsafe;
  hb_segment_properties_t props;

  hb_shape_func_t *shaper_func;
  const char *shaper_name;

  hb_feature_t *user_features;
  unsigned int num_user_features;

  struct hb_shaper_data_t shaper_data;
};





# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_shape_plan_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_shape_plan_data_t * _hb_ot_shaper_shape_plan_data_create (hb_shape_plan_t *shape_plan , const hb_feature_t *user_features , unsigned int num_user_features); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_shape_plan_data_destroy (struct hb_ot_shaper_shape_plan_data_t *data);
# 58 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh" 2
# 37 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2






struct hb_face_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_45 (void) const { do { typedef __typeof__(*this) _type_45; union _type__type_45_on_line_45_is_not_POD { _type_45 instance; }; } while (0); };

  hb_bool_t immutable;

  hb_reference_table_func_t reference_table_func;
  void *user_data;
  hb_destroy_func_t destroy;

  unsigned int index;
  mutable unsigned int upem;
  mutable unsigned int num_glyphs;

  struct hb_shaper_data_t shaper_data;

  struct plan_node_t {
    hb_shape_plan_t *shape_plan;
    plan_node_t *next;
  } *shape_plans;


  inline hb_blob_t *reference_table (hb_tag_t tag) const
  {
    hb_blob_t *blob;

    if ((!reference_table_func))
      return hb_blob_get_empty ();

    blob = reference_table_func ( const_cast<hb_face_t *> (this), tag, user_data);
    if ((!blob))
      return hb_blob_get_empty ();

    return blob;
  }

  inline __attribute__((pure)) unsigned int get_upem (void) const
  {
    if ((!upem))
      load_upem ();
    return upem;
  }

  inline unsigned int get_num_glyphs (void) const
  {
    if ((num_glyphs == (unsigned int) -1))
      load_num_glyphs ();
    return num_glyphs;
  }

  private:
  __attribute__((__visibility__("hidden"))) void load_upem (void) const;
  __attribute__((__visibility__("hidden"))) void load_num_glyphs (void) const;
};

extern __attribute__((__visibility__("hidden"))) const hb_face_t _hb_face_nil;



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_face_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_face_data_t * _hb_ot_shaper_face_data_create (hb_face_t *face ); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_face_data_destroy (struct hb_ot_shaper_face_data_t *data);
# 103 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2
# 36 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 58 "../../../libs/harfbuzz-ng/src/hb-font-private.hh"
struct hb_font_funcs_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_60 (void) const { do { typedef __typeof__(*this) _type_60; union _type__type_60_on_line_60_is_not_POD { _type_60 instance; }; } while (0); };

  hb_bool_t immutable;



  struct {

    hb_font_get_glyph_func_t glyph; hb_font_get_glyph_h_advance_func_t glyph_h_advance; hb_font_get_glyph_v_advance_func_t glyph_v_advance; hb_font_get_glyph_h_origin_func_t glyph_h_origin; hb_font_get_glyph_v_origin_func_t glyph_v_origin; hb_font_get_glyph_h_kerning_func_t glyph_h_kerning; hb_font_get_glyph_v_kerning_func_t glyph_v_kerning; hb_font_get_glyph_extents_func_t glyph_extents; hb_font_get_glyph_contour_point_func_t glyph_contour_point; hb_font_get_glyph_name_func_t glyph_name; hb_font_get_glyph_from_name_func_t glyph_from_name;

  } get;

  struct {

    void *glyph; void *glyph_h_advance; void *glyph_v_advance; void *glyph_h_origin; void *glyph_v_origin; void *glyph_h_kerning; void *glyph_v_kerning; void *glyph_extents; void *glyph_contour_point; void *glyph_name; void *glyph_from_name;

  } user_data;

  struct {

    hb_destroy_func_t glyph; hb_destroy_func_t glyph_h_advance; hb_destroy_func_t glyph_v_advance; hb_destroy_func_t glyph_h_origin; hb_destroy_func_t glyph_v_origin; hb_destroy_func_t glyph_h_kerning; hb_destroy_func_t glyph_v_kerning; hb_destroy_func_t glyph_extents; hb_destroy_func_t glyph_contour_point; hb_destroy_func_t glyph_name; hb_destroy_func_t glyph_from_name;

  } destroy;
};







struct hb_font_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_93 (void) const { do { typedef __typeof__(*this) _type_93; union _type__type_93_on_line_93_is_not_POD { _type_93 instance; }; } while (0); };

  hb_bool_t immutable;

  hb_font_t *parent;
  hb_face_t *face;

  int x_scale;
  int y_scale;

  unsigned int x_ppem;
  unsigned int y_ppem;

  hb_font_funcs_t *klass;
  void *user_data;
  hb_destroy_func_t destroy;

  struct hb_shaper_data_t shaper_data;



  inline hb_position_t em_scale_x (int16_t v) { return em_scale (v, this->x_scale); }
  inline hb_position_t em_scale_y (int16_t v) { return em_scale (v, this->y_scale); }


  inline hb_position_t parent_scale_x_distance (hb_position_t v) {
    if ((parent && parent->x_scale != x_scale))
      return (hb_position_t) (v * (int64_t) this->x_scale / this->parent->x_scale);
    return v;
  }
  inline hb_position_t parent_scale_y_distance (hb_position_t v) {
    if ((parent && parent->y_scale != y_scale))
      return (hb_position_t) (v * (int64_t) this->y_scale / this->parent->y_scale);
    return v;
  }
  inline hb_position_t parent_scale_x_position (hb_position_t v) {
    return parent_scale_x_distance (v);
  }
  inline hb_position_t parent_scale_y_position (hb_position_t v) {
    return parent_scale_y_distance (v);
  }

  inline void parent_scale_distance (hb_position_t *x, hb_position_t *y) {
    *x = parent_scale_x_distance (*x);
    *y = parent_scale_y_distance (*y);
  }
  inline void parent_scale_position (hb_position_t *x, hb_position_t *y) {
    *x = parent_scale_x_position (*x);
    *y = parent_scale_y_position (*y);
  }




  inline hb_bool_t has_glyph (hb_codepoint_t unicode)
  {
    hb_codepoint_t glyph;
    return get_glyph (unicode, 0, &glyph);
  }

  inline hb_bool_t get_glyph (hb_codepoint_t unicode, hb_codepoint_t variation_selector,
         hb_codepoint_t *glyph)
  {
    *glyph = 0;
    return klass->get.glyph (this, user_data,
        unicode, variation_selector, glyph,
        klass->user_data.glyph);
  }

  inline hb_position_t get_glyph_h_advance (hb_codepoint_t glyph)
  {
    return klass->get.glyph_h_advance (this, user_data,
           glyph,
           klass->user_data.glyph_h_advance);
  }

  inline hb_position_t get_glyph_v_advance (hb_codepoint_t glyph)
  {
    return klass->get.glyph_v_advance (this, user_data,
           glyph,
           klass->user_data.glyph_v_advance);
  }

  inline hb_bool_t get_glyph_h_origin (hb_codepoint_t glyph,
           hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_h_origin (this, user_data,
          glyph, x, y,
          klass->user_data.glyph_h_origin);
  }

  inline hb_bool_t get_glyph_v_origin (hb_codepoint_t glyph,
           hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_v_origin (this, user_data,
          glyph, x, y,
          klass->user_data.glyph_v_origin);
  }

  inline hb_position_t get_glyph_h_kerning (hb_codepoint_t left_glyph, hb_codepoint_t right_glyph)
  {
    return klass->get.glyph_h_kerning (this, user_data,
           left_glyph, right_glyph,
           klass->user_data.glyph_h_kerning);
  }

  inline hb_position_t get_glyph_v_kerning (hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph)
  {
    return klass->get.glyph_v_kerning (this, user_data,
           top_glyph, bottom_glyph,
           klass->user_data.glyph_v_kerning);
  }

  inline hb_bool_t get_glyph_extents (hb_codepoint_t glyph,
          hb_glyph_extents_t *extents)
  {
    memset (extents, 0, sizeof (*extents));
    return klass->get.glyph_extents (this, user_data,
         glyph,
         extents,
         klass->user_data.glyph_extents);
  }

  inline hb_bool_t get_glyph_contour_point (hb_codepoint_t glyph, unsigned int point_index,
         hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_contour_point (this, user_data,
        glyph, point_index,
        x, y,
        klass->user_data.glyph_contour_point);
  }

  inline hb_bool_t get_glyph_name (hb_codepoint_t glyph,
       char *name, unsigned int size)
  {
    if (size) *name = '\0';
    return klass->get.glyph_name (this, user_data,
      glyph,
      name, size,
      klass->user_data.glyph_name);
  }

  inline hb_bool_t get_glyph_from_name (const char *name, int len,
     hb_codepoint_t *glyph)
  {
    *glyph = 0;
    if (len == -1) len = strlen (name);
    return klass->get.glyph_from_name (this, user_data,
           name, len,
           glyph,
           klass->user_data.glyph_from_name);
  }




  inline void get_glyph_advance_for_direction (hb_codepoint_t glyph,
            hb_direction_t direction,
            hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4))) {
      *x = get_glyph_h_advance (glyph);
      *y = 0;
    } else {
      *x = 0;
      *y = get_glyph_v_advance (glyph);
    }
  }


  inline void guess_v_origin_minus_h_origin (hb_codepoint_t glyph,
          hb_position_t *x, hb_position_t *y)
  {
    *x = get_glyph_h_advance (glyph) / 2;


    *y = y_scale;
  }

  inline void get_glyph_origin_for_direction (hb_codepoint_t glyph,
           hb_direction_t direction,
           hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4)))
    {
      if (!get_glyph_h_origin (glyph, x, y) &&
    get_glyph_v_origin (glyph, x, y))
      {
 hb_position_t dx, dy;
 guess_v_origin_minus_h_origin (glyph, &dx, &dy);
 *x -= dx; *y -= dy;
      }
    }
    else
    {
      if (!get_glyph_v_origin (glyph, x, y) &&
    get_glyph_h_origin (glyph, x, y))
      {
 hb_position_t dx, dy;
 guess_v_origin_minus_h_origin (glyph, &dx, &dy);
 *x += dx; *y += dy;
      }
    }
  }

  inline void add_glyph_origin_for_direction (hb_codepoint_t glyph,
           hb_direction_t direction,
           hb_position_t *x, hb_position_t *y)
  {
    hb_position_t origin_x, origin_y;

    get_glyph_origin_for_direction (glyph, direction, &origin_x, &origin_y);

    *x += origin_x;
    *y += origin_y;
  }

  inline void subtract_glyph_origin_for_direction (hb_codepoint_t glyph,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y)
  {
    hb_position_t origin_x, origin_y;

    get_glyph_origin_for_direction (glyph, direction, &origin_x, &origin_y);

    *x -= origin_x;
    *y -= origin_y;
  }

  inline void get_glyph_kerning_for_direction (hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
            hb_direction_t direction,
            hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4))) {
      *x = get_glyph_h_kerning (first_glyph, second_glyph);
      *y = 0;
    } else {
      *x = 0;
      *y = get_glyph_v_kerning (first_glyph, second_glyph);
    }
  }

  inline hb_bool_t get_glyph_extents_for_origin (hb_codepoint_t glyph,
       hb_direction_t direction,
       hb_glyph_extents_t *extents)
  {
    hb_bool_t ret = get_glyph_extents (glyph, extents);

    if (ret)
      subtract_glyph_origin_for_direction (glyph, direction, &extents->x_bearing, &extents->y_bearing);

    return ret;
  }

  inline hb_bool_t get_glyph_contour_point_for_origin (hb_codepoint_t glyph, unsigned int point_index,
             hb_direction_t direction,
             hb_position_t *x, hb_position_t *y)
  {
    hb_bool_t ret = get_glyph_contour_point (glyph, point_index, x, y);

    if (ret)
      subtract_glyph_origin_for_direction (glyph, direction, x, y);

    return ret;
  }


  inline void
  glyph_to_string (hb_codepoint_t glyph,
     char *s, unsigned int size)
  {
    if (get_glyph_name (glyph, s, size)) return;

    if (size && snprintf (s, size, "gid%u", glyph) < 0)
      *s = '\0';
  }


  inline hb_bool_t
  glyph_from_string (const char *s, int len,
       hb_codepoint_t *glyph)
  {
    if (get_glyph_from_name (s, len, glyph)) return true;

    if (len == -1) len = strlen (s);


    if (hb_codepoint_parse (s, len, 10, glyph))
      return true;

    if (len > 3)
    {

      if (0 == strncmp (s, "gid", 3) &&
   hb_codepoint_parse (s + 3, len - 3, 10, glyph))
 return true;


      hb_codepoint_t unichar;
      if (0 == strncmp (s, "uni", 3) &&
   hb_codepoint_parse (s + 3, len - 3, 16, &unichar) &&
   get_glyph (unichar, 0, glyph))
 return true;
    }

    return false;
  }

  private:
  inline hb_position_t em_scale (int16_t v, int scale) { return (hb_position_t) (v * (int64_t) scale / face->get_upem ()); }
};



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_font_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_font_data_t * _hb_ot_shaper_font_data_create (hb_font_t *font ); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_font_data_destroy (struct hb_ot_shaper_font_data_t *data);
# 411 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc" 2

# 1 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh" 1
# 30 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
namespace OT {
# 44 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
template<typename Type, typename TObject>
static inline const Type& CastR(const TObject &X)
{ return reinterpret_cast<const Type&> (X); }
template<typename Type, typename TObject>
static inline Type& CastR(TObject &X)
{ return reinterpret_cast<Type&> (X); }


template<typename Type, typename TObject>
static inline const Type* CastP(const TObject *X)
{ return reinterpret_cast<const Type*> (X); }
template<typename Type, typename TObject>
static inline Type* CastP(TObject *X)
{ return reinterpret_cast<Type*> (X); }



template<typename Type>
static inline const Type& StructAtOffset(const void *P, unsigned int offset)
{ return * reinterpret_cast<const Type*> ((const char *) P + offset); }
template<typename Type>
static inline Type& StructAtOffset(void *P, unsigned int offset)
{ return * reinterpret_cast<Type*> ((char *) P + offset); }



template<typename Type, typename TObject>
static inline const Type& StructAfter(const TObject &X)
{ return StructAtOffset<Type>(&X, X.get_size()); }
template<typename Type, typename TObject>
static inline Type& StructAfter(TObject &X)
{ return StructAtOffset<Type>(&X, X.get_size()); }
# 135 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
static const void *_NullPool[(256+8) / sizeof (void *)];


template <typename Type>
static inline const Type& Null (void) {
  __attribute__((unused)) typedef int _static_assert_on_line_140_failed[(((sizeof (Type) <= sizeof (_NullPool))))?1:-1];
  return *CastP<Type> (_NullPool);
}
# 177 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
struct hb_sanitize_context_t
{
  inline const char *get_name (void) { return "SANITIZE"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef bool return_t;
  template <typename T>
  inline return_t dispatch (const T &obj) { return obj.sanitize (this); }
  static return_t default_return_value (void) { return true; }
  bool stop_sublookup_iteration (const return_t r __attribute__((unused))) const { return false; }

  inline void init (hb_blob_t *b)
  {
    this->blob = hb_blob_reference (b);
    this->writable = false;
  }

  inline void start_processing (void)
  {
    this->start = hb_blob_get_data (this->blob, __null);
    this->end = this->start + hb_blob_get_length (this->blob);
    ((this->start <= this->end) ? static_cast<void> (0) : __assert_fail ("this->start <= this->end", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 197, __PRETTY_FUNCTION__));
    this->edit_count = 0;
    this->debug_depth = 0;

    _hb_debug_msg<(0 +0)> ("SANITIZE", (start), __null, true, (0), (+1), "start [%p..%p] (%lu bytes)", this->start, this->end, (unsigned long) (this->end - this->start))


                                                 ;
  }

  inline void end_processing (void)
  {
    _hb_debug_msg<(0 +0)> ("SANITIZE", (this->start), __null, true, (0), (-1), "end [%p..%p] %u edit requests", this->start, this->end, this->edit_count)

                                                ;

    hb_blob_destroy (this->blob);
    this->blob = __null;
    this->start = this->end = __null;
  }

  inline bool check_range (const void *base, unsigned int len) const
  {
    const char *p = (const char *) base;
    bool ok = this->start <= p && p <= this->end && (unsigned int) (this->end - p) >= len;

    _hb_debug_msg<(0 +0)> ("SANITIZE", (p), __null, true, (this->debug_depth+1), (0), "check_range [%p..%p] (%d bytes) in [%p..%p] -> %s", p, p + len, len, this->start, this->end, ok ? "OK" : "OUT-OF-RANGE")



                                  ;

    return (ok);
  }

  inline bool check_array (const void *base, unsigned int record_size, unsigned int len) const
  {
    const char *p = (const char *) base;
    bool overflows = _hb_unsigned_int_mul_overflows (len, record_size);
    unsigned int array_size = record_size * len;
    bool ok = !overflows && this->check_range (base, array_size);

    _hb_debug_msg<(0 +0)> ("SANITIZE", (p), __null, true, (this->debug_depth+1), (0), "check_array [%p..%p] (%d*%d=%d bytes) in [%p..%p] -> %s", p, p + (record_size * len), record_size, len, (unsigned int) array_size, this->start, this->end, overflows ? "OVERFLOWS" : ok ? "OK" : "OUT-OF-RANGE")



                                                            ;

    return (ok);
  }

  template <typename Type>
  inline bool check_struct (const Type *obj) const
  {
    return (this->check_range (obj, obj->min_size));
  }

  inline bool may_edit (const void *base __attribute__((unused)), unsigned int len __attribute__((unused)))
  {
    if (this->edit_count >= 100)
      return false;

    const char *p = (const char *) base;
    this->edit_count++;

    _hb_debug_msg<(0 +0)> ("SANITIZE", (p), __null, true, (this->debug_depth+1), (0), "may_edit(%u) [%p..%p] (%d bytes) in [%p..%p] -> %s", this->edit_count, p, p + len, len, this->start, this->end, this->writable ? "GRANTED" : "DENIED")




                                             ;

    return this->writable;
  }

  template <typename Type, typename ValueType>
  inline bool try_set (Type *obj, const ValueType &v) {
    if (this->may_edit (obj, obj->static_size)) {
      obj->set (v);
      return true;
    }
    return false;
  }

  mutable unsigned int debug_depth;
  const char *start, *end;
  bool writable;
  unsigned int edit_count;
  hb_blob_t *blob;
};




template <typename Type>
struct Sanitizer
{
  static hb_blob_t *sanitize (hb_blob_t *blob) {
    hb_sanitize_context_t c[1] = {{0, __null, __null, false, 0, __null}};
    bool sane;



    c->init (blob);

  retry:
    _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "start");

    c->start_processing ();

    if ((!c->start)) {
      c->end_processing ();
      return blob;
    }

    Type *t = CastP<Type> (const_cast<char *> (c->start));

    sane = t->sanitize (c);
    if (sane) {
      if (c->edit_count) {
 _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "passed first round with %d edits; going for second round", c->edit_count);


        c->edit_count = 0;
 sane = t->sanitize (c);
 if (c->edit_count) {
   _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "requested %d edits in second round; FAILLING", c->edit_count);
   sane = false;
 }
      }
    } else {
      unsigned int edit_count = c->edit_count;
      if (edit_count && !c->writable) {
        c->start = hb_blob_get_data_writable (blob, __null);
 c->end = c->start + hb_blob_get_length (blob);

 if (c->start) {
   c->writable = true;

   _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "retry");
   goto retry;
 }
      }
    }

    c->end_processing ();

    _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, sane ? "PASSED" : "FAILED");
    if (sane)
      return blob;
    else {
      hb_blob_destroy (blob);
      return hb_blob_get_empty ();
    }
  }

  static const Type* lock_instance (hb_blob_t *blob) {
    hb_blob_make_immutable (blob);
    const char *base = hb_blob_get_data (blob, __null);
    return (!base) ? &Null<Type>() : CastP<Type> (base);
  }
};
# 377 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
struct hb_serialize_context_t
{
  inline hb_serialize_context_t (void *start, unsigned int size)
  {
    this->start = (char *) start;
    this->end = this->start + size;

    this->ran_out_of_room = false;
    this->head = this->start;
    this->debug_depth = 0;
  }

  template <typename Type>
  inline Type *start_serialize (void)
  {
    _hb_debug_msg<(0 +0)> ("SERIALIZE", (this->start), __null, true, (0), (+1), "start [%p..%p] (%lu bytes)", this->start, this->end, (unsigned long) (this->end - this->start))


                                                 ;

    return start_embed<Type> ();
  }

  inline void end_serialize (void)
  {
    _hb_debug_msg<(0 +0)> ("SERIALIZE", (this->start), __null, true, (0), (-1), "end [%p..%p] serialized %d bytes; %s", this->start, this->end, (int) (this->head - this->start), this->ran_out_of_room ? "RAN OUT OF ROOM" : "did not ran out of room")



                                                                             ;

  }

  template <typename Type>
  inline Type *copy (void)
  {
    ((!this->ran_out_of_room) ? static_cast<void> (0) : __assert_fail ("!this->ran_out_of_room", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 413, __PRETTY_FUNCTION__));
    unsigned int len = this->head - this->start;
    void *p = malloc (len);
    if (p)
      memcpy (p, this->start, len);
    return reinterpret_cast<Type *> (p);
  }

  template <typename Type>
  inline Type *allocate_size (unsigned int size)
  {
    if ((this->ran_out_of_room || this->end - this->head < ptrdiff_t (size))) {
      this->ran_out_of_room = true;
      return __null;
    }
    memset (this->head, 0, size);
    char *ret = this->head;
    this->head += size;
    return reinterpret_cast<Type *> (ret);
  }

  template <typename Type>
  inline Type *allocate_min (void)
  {
    return this->allocate_size<Type> (Type::min_size);
  }

  template <typename Type>
  inline Type *start_embed (void)
  {
    Type *ret = reinterpret_cast<Type *> (this->head);
    return ret;
  }

  template <typename Type>
  inline Type *embed (const Type &obj)
  {
    unsigned int size = obj.get_size ();
    Type *ret = this->allocate_size<Type> (size);
    if ((!ret)) return __null;
    memcpy (ret, obj, size);
    return ret;
  }

  template <typename Type>
  inline Type *extend_min (Type &obj)
  {
    unsigned int size = obj.min_size;
    ((this->start <= (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head) ? static_cast<void> (0) : __assert_fail ("this->start <= (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 461, __PRETTY_FUNCTION__));
    if ((!this->allocate_size<Type> (((char *) &obj) + size - this->head))) return __null;
    return reinterpret_cast<Type *> (&obj);
  }

  template <typename Type>
  inline Type *extend (Type &obj)
  {
    unsigned int size = obj.get_size ();
    ((this->start < (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head) ? static_cast<void> (0) : __assert_fail ("this->start < (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 470, __PRETTY_FUNCTION__));
    if ((!this->allocate_size<Type> (((char *) &obj) + size - this->head))) return __null;
    return reinterpret_cast<Type *> (&obj);
  }

  inline void truncate (void *head)
  {
    ((this->start < head && head <= this->head) ? static_cast<void> (0) : __assert_fail ("this->start < head && head <= this->head", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 477, __PRETTY_FUNCTION__));
    this->head = (char *) head;
  }

  unsigned int debug_depth;
  char *start, *end, *head;
  bool ran_out_of_room;
};

template <typename Type>
struct Supplier
{
  inline Supplier (const Type *array, unsigned int len_)
  {
    head = array;
    len = len_;
  }
  inline const Type operator [] (unsigned int i) const
  {
    if ((i >= len)) return Type ();
    return head[i];
  }

  inline void advance (unsigned int count)
  {
    if ((count > len))
      count = len;
    len -= count;
    head += count;
  }

  private:
  inline Supplier (const Supplier<Type> &);
  inline Supplier<Type>& operator= (const Supplier<Type> &);

  unsigned int len;
  const Type *head;
};
# 533 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
template <typename Type, int Bytes> struct BEInt;

template <typename Type>
struct BEInt<Type, 2>
{
  public:
  inline void set (Type V)
  {
    v[0] = (V >> 8) & 0xFF;
    v[1] = (V ) & 0xFF;
  }
  inline operator Type (void) const
  {
    return (v[0] << 8)
         + (v[1] );
  }
  inline bool operator == (const BEInt<Type, 2>& o) const
  {
    return v[0] == o.v[0]
        && v[1] == o.v[1];
  }
  inline bool operator != (const BEInt<Type, 2>& o) const { return !(*this == o); }
  private: uint8_t v[2];
};
template <typename Type>
struct BEInt<Type, 3>
{
  public:
  inline void set (Type V)
  {
    v[0] = (V >> 16) & 0xFF;
    v[1] = (V >> 8) & 0xFF;
    v[2] = (V ) & 0xFF;
  }
  inline operator Type (void) const
  {
    return (v[0] << 16)
         + (v[1] << 8)
         + (v[2] );
  }
  inline bool operator == (const BEInt<Type, 3>& o) const
  {
    return v[0] == o.v[0]
        && v[1] == o.v[1]
        && v[2] == o.v[2];
  }
  inline bool operator != (const BEInt<Type, 3>& o) const { return !(*this == o); }
  private: uint8_t v[3];
};
template <typename Type>
struct BEInt<Type, 4>
{
  public:
  inline void set (Type V)
  {
    v[0] = (V >> 24) & 0xFF;
    v[1] = (V >> 16) & 0xFF;
    v[2] = (V >> 8) & 0xFF;
    v[3] = (V ) & 0xFF;
  }
  inline operator Type (void) const
  {
    return (v[0] << 24)
         + (v[1] << 16)
         + (v[2] << 8)
         + (v[3] );
  }
  inline bool operator == (const BEInt<Type, 4>& o) const
  {
    return v[0] == o.v[0]
        && v[1] == o.v[1]
        && v[2] == o.v[2]
        && v[3] == o.v[3];
  }
  inline bool operator != (const BEInt<Type, 4>& o) const { return !(*this == o); }
  private: uint8_t v[4];
};


template <typename Type, unsigned int Size>
struct IntType
{
  inline void set (Type i) { v.set (i); }
  inline operator Type(void) const { return v; }
  inline bool operator == (const IntType<Type,Size> &o) const { return v == o.v; }
  inline bool operator != (const IntType<Type,Size> &o) const { return v != o.v; }
  static inline int cmp (const IntType<Type,Size> *a, const IntType<Type,Size> *b) { return b->cmp (*a); }
  inline int cmp (IntType<Type,Size> va) const { Type a = va; Type b = v; return a < b ? -1 : a == b ? 0 : +1; }
  inline int cmp (Type a) const { Type b = v; return a < b ? -1 : a == b ? 0 : +1; }
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret ((c->check_struct (this)), 624);
  }
  protected:
  BEInt<Type, Size> v;
  public:
  inline void _instance_assertion_on_line_629 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_629_failed[(((sizeof (*this) == (Size))))?1:-1]; do { typedef __typeof__(*this) _type_629; union _type__type_629_on_line_629_is_not_POD { _type_629 instance; }; } while (0); }; static const unsigned int static_size = (Size); static const unsigned int min_size = (Size);
};

typedef uint8_t BYTE;
typedef IntType<uint16_t, 2> USHORT;
typedef IntType<int16_t, 2> SHORT;
typedef IntType<uint32_t, 4> ULONG;
typedef IntType<int32_t, 4> LONG;
typedef IntType<uint32_t, 3> UINT24;


typedef SHORT FWORD;


typedef USHORT UFWORD;



struct LONGDATETIME
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret ((c->check_struct (this)), 651);
  }
  protected:
  LONG major;
  ULONG minor;
  public:
  inline void _instance_assertion_on_line_657 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_657_failed[(((sizeof (*this) == (8))))?1:-1]; do { typedef __typeof__(*this) _type_657; union _type__type_657_on_line_657_is_not_POD { _type_657 instance; }; } while (0); }; static const unsigned int static_size = (8); static const unsigned int min_size = (8);
};



struct Tag : ULONG
{

  inline operator const char* (void) const { return reinterpret_cast<const char *> (&this->v); }
  inline operator char* (void) { return reinterpret_cast<char *> (&this->v); }
  public:
  inline void _instance_assertion_on_line_668 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_668_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_668; union _type__type_668_on_line_668_is_not_POD { _type_668 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};
static const char _NullTag[sizeof (Tag) + 1] = "    "; template <> inline const Tag& Null<Tag> (void) { return *CastP<Tag> (_NullTag); } __attribute__((unused)) typedef int _static_assert_on_line_670_failed[(((Tag::min_size + 1 <= sizeof (_NullTag))))?1:-1];


typedef USHORT GlyphID;


struct Index : USHORT {
  static const unsigned int NOT_FOUND_INDEX = 0xFFFFu;
};
static const char _NullIndex[sizeof (Index) + 1] = "\xff\xff"; template <> inline const Index& Null<Index> (void) { return *CastP<Index> (_NullIndex); } __attribute__((unused)) typedef int _static_assert_on_line_679_failed[(((Index::min_size + 1 <= sizeof (_NullIndex))))?1:-1];


template <typename Type=USHORT>
struct Offset : Type
{
  inline bool is_null (void) const { return 0 == *this; }
  public:
  inline void _instance_assertion_on_line_687 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_687_failed[(((sizeof (*this) == (sizeof(Type)))))?1:-1]; do { typedef __typeof__(*this) _type_687; union _type__type_687_on_line_687_is_not_POD { _type_687 instance; }; } while (0); }; static const unsigned int static_size = (sizeof(Type)); static const unsigned int min_size = (sizeof(Type));
};



struct CheckSum : ULONG
{

  static inline uint32_t CalcTableChecksum (const ULONG *Table, uint32_t Length)
  {
    uint32_t Sum = 0L;
    const ULONG *EndPtr = Table+((Length+3) & ~3) / ULONG::static_size;

    while (Table < EndPtr)
      Sum += *Table++;
    return Sum;
  }


  inline void set_for_data (const void *data, unsigned int length)
  { set (CalcTableChecksum ((const ULONG *) data, length)); }

  public:
  inline void _instance_assertion_on_line_710 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_710_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_710; union _type__type_710_on_line_710_is_not_POD { _type_710 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};






struct FixedVersion
{
  inline uint32_t to_int (void) const { return (major << 16) + minor; }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 724);
  }

  USHORT major;
  USHORT minor;
  public:
  inline void _instance_assertion_on_line_730 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_730_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_730; union _type__type_730_on_line_730_is_not_POD { _type_730 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};
# 740 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
template <typename Type, typename OffsetType=USHORT>
struct OffsetTo : Offset<OffsetType>
{
  inline const Type& operator () (const void *base) const
  {
    unsigned int offset = *this;
    if ((!offset)) return Null<Type>();
    return StructAtOffset<Type> (base, offset);
  }

  inline Type& serialize (hb_serialize_context_t *c, void *base)
  {
    Type *t = c->start_embed<Type> ();
    this->set ((char *) t - (char *) base);
    return *t;
  }

  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!c->check_struct (this))) return trace.ret (false, 759);
    unsigned int offset = *this;
    if ((!offset)) return trace.ret (true, 761);
    Type &obj = StructAtOffset<Type> (base, offset);
    return trace.ret ((obj.sanitize (c)) || neuter (c), 763);
  }
  template <typename T>
  inline bool sanitize (hb_sanitize_context_t *c, void *base, T user_data) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!c->check_struct (this))) return trace.ret (false, 768);
    unsigned int offset = *this;
    if ((!offset)) return trace.ret (true, 770);
    Type &obj = StructAtOffset<Type> (base, offset);
    return trace.ret ((obj.sanitize (c, user_data)) || neuter (c), 772);
  }


  inline bool neuter (hb_sanitize_context_t *c) {
    return c->try_set (this, 0);
  }
  inline void _instance_assertion_on_line_779 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_779_failed[(((sizeof (*this) == (sizeof(OffsetType)))))?1:-1]; do { typedef __typeof__(*this) _type_779; union _type__type_779_on_line_779_is_not_POD { _type_779 instance; }; } while (0); }; static const unsigned int static_size = (sizeof(OffsetType)); static const unsigned int min_size = (sizeof(OffsetType));
};
template <typename Base, typename OffsetType, typename Type>
static inline const Type& operator + (const Base &base, const OffsetTo<Type, OffsetType> &offset) { return offset (base); }
template <typename Base, typename OffsetType, typename Type>
static inline Type& operator + (Base &base, OffsetTo<Type, OffsetType> &offset) { return offset (base); }







template <typename Type, typename LenType=USHORT>
struct ArrayOf
{
  const Type *sub_array (unsigned int start_offset, unsigned int *pcount ) const
  {
    unsigned int count = len;
    if ((start_offset > count))
      count = 0;
    else
      count -= start_offset;
    count = MIN (count, *pcount);
    *pcount = count;
    return array + start_offset;
  }

  inline const Type& operator [] (unsigned int i) const
  {
    if ((i >= len)) return Null<Type>();
    return array[i];
  }
  inline Type& operator [] (unsigned int i)
  {
    return array[i];
  }
  inline unsigned int get_size (void) const
  { return len.static_size + len * Type::static_size; }

  inline bool serialize (hb_serialize_context_t *c,
    unsigned int items_len)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 823);
    len.set (items_len);
    if ((!c->extend (*this))) return trace.ret (false, 825);
    return trace.ret (true, 826);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<Type> &items,
    unsigned int items_len)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!serialize (c, items_len))) return trace.ret (false, 834);
    for (unsigned int i = 0; i < items_len; i++)
      array[i] = items[i];
    items.advance (items_len);
    return trace.ret (true, 838);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 843);
# 852 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
    (void) (false && array[0].sanitize (c));

    return trace.ret (true, 854);
  }
  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 858);
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
      if ((!array[i].sanitize (c, base)))
        return trace.ret (false, 862);
    return trace.ret (true, 863);
  }
  template <typename T>
  inline bool sanitize (hb_sanitize_context_t *c, void *base, T user_data) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 868);
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
      if ((!array[i].sanitize (c, base, user_data)))
        return trace.ret (false, 872);
    return trace.ret (true, 873);
  }

  template <typename SearchType>
  inline int lsearch (const SearchType &x) const
  {
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
      if (!this->array[i].cmp (x))
        return i;
    return -1;
  }

  private:
  inline bool sanitize_shallow (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && c->check_array (this, Type::static_size, len), 889);
  }

  public:
  LenType len;
  Type array[1];
  public:
  inline void _instance_assertion_on_line_896 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_896_failed[(((sizeof (*this) == (sizeof (LenType)) + sizeof (array[0]))))?1:-1]; do { typedef __typeof__(*this) _type_896; union _type__type_896_on_line_896_is_not_POD { _type_896 instance; }; } while (0); }; inline void _compiles_assertion_on_line_896 (void) const { (void) array[0].static_size; } static const unsigned int min_size = (sizeof (LenType));
};


template <typename Type>
struct OffsetArrayOf : ArrayOf<OffsetTo<Type> > {};


template <typename Type>
struct OffsetListOf : OffsetArrayOf<Type>
{
  inline const Type& operator [] (unsigned int i) const
  {
    if ((i >= this->len)) return Null<Type>();
    return this+this->array[i];
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (OffsetArrayOf<Type>::sanitize (c, this), 915);
  }
  template <typename T>
  inline bool sanitize (hb_sanitize_context_t *c, T user_data) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (OffsetArrayOf<Type>::sanitize (c, this, user_data), 920);
  }
};



template <typename Type, typename LenType=USHORT>
struct HeadlessArrayOf
{
  inline const Type& operator [] (unsigned int i) const
  {
    if ((i >= len || !i)) return Null<Type>();
    return array[i-1];
  }
  inline unsigned int get_size (void) const
  { return len.static_size + (len ? len - 1 : 0) * Type::static_size; }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<Type> &items,
    unsigned int items_len)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 942);
    len.set (items_len);
    if ((!items_len)) return trace.ret (true, 944);
    if ((!c->extend (*this))) return trace.ret (false, 945);
    for (unsigned int i = 0; i < items_len - 1; i++)
      array[i] = items[i];
    items.advance (items_len - 1);
    return trace.ret (true, 949);
  }

  inline bool sanitize_shallow (hb_sanitize_context_t *c) {
    return c->check_struct (this)
 && c->check_array (this, Type::static_size, len);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 959);
# 968 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
    (void) (false && array[0].sanitize (c));

    return trace.ret (true, 970);
  }

  LenType len;
  Type array[1];
  public:
  inline void _instance_assertion_on_line_976 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_976_failed[(((sizeof (*this) == (sizeof (LenType)) + sizeof (array[0]))))?1:-1]; do { typedef __typeof__(*this) _type_976; union _type__type_976_on_line_976_is_not_POD { _type_976 instance; }; } while (0); }; inline void _compiles_assertion_on_line_976 (void) const { (void) array[0].static_size; } static const unsigned int min_size = (sizeof (LenType));
};



template <typename Type, typename LenType=USHORT>
struct SortedArrayOf : ArrayOf<Type, LenType>
{
  template <typename SearchType>
  inline int bsearch (const SearchType &x) const
  {

    int min = 0, max = (int) this->len - 1;
    while (min <= max)
    {
      int mid = (min + max) / 2;
      int c = this->array[mid].cmp (x);
      if (c < 0)
        max = mid - 1;
      else if (c > 0)
        min = mid + 1;
      else
        return mid;
    }
    return -1;
  }
};


}
# 31 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh" 2


namespace OT {
# 43 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
struct CmapSubtableFormat0
{
  inline bool get_glyph (hb_codepoint_t codepoint, hb_codepoint_t *glyph) const
  {
    hb_codepoint_t gid = codepoint < 256 ? glyphIdArray[codepoint] : 0;
    if (!gid)
      return false;
    *glyph = gid;
    return true;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 56);
  }

  protected:
  USHORT format;
  USHORT lengthZ;
  USHORT languageZ;
  BYTE glyphIdArray[256];

  public:
  inline void _instance_assertion_on_line_66 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_66_failed[(((sizeof (*this) == (6 + 256))))?1:-1]; do { typedef __typeof__(*this) _type_66; union _type__type_66_on_line_66_is_not_POD { _type_66 instance; }; } while (0); }; static const unsigned int static_size = (6 + 256); static const unsigned int min_size = (6 + 256);
};

struct CmapSubtableFormat4
{
  inline bool get_glyph (hb_codepoint_t codepoint, hb_codepoint_t *glyph) const
  {
    unsigned int segCount;
    const USHORT *endCount;
    const USHORT *startCount;
    const USHORT *idDelta;
    const USHORT *idRangeOffset;
    const USHORT *glyphIdArray;
    unsigned int glyphIdArrayLength;

    segCount = this->segCountX2 / 2;
    endCount = this->values;
    startCount = endCount + segCount + 1;
    idDelta = startCount + segCount;
    idRangeOffset = idDelta + segCount;
    glyphIdArray = idRangeOffset + segCount;
    glyphIdArrayLength = (this->length - 16 - 8 * segCount) / 2;


    int min = 0, max = (int) segCount - 1;
    unsigned int i;
    while (min <= max)
    {
      int mid = (min + max) / 2;
      if (codepoint < startCount[mid])
        max = mid - 1;
      else if (codepoint > endCount[mid])
        min = mid + 1;
      else
      {
 i = mid;
 goto found;
      }
    }
    return false;

  found:
    hb_codepoint_t gid;
    unsigned int rangeOffset = idRangeOffset[i];
    if (rangeOffset == 0)
      gid = codepoint + idDelta[i];
    else
    {

      unsigned int index = rangeOffset / 2 + (codepoint - startCount[i]) + i - segCount;
      if ((index >= glyphIdArrayLength))
 return false;
      gid = glyphIdArray[index];
      if ((!gid))
 return false;
      gid += idDelta[i];
    }

    *glyph = gid & 0xFFFFu;
    return true;
  }

  inline bool sanitize (hb_sanitize_context_t *c)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!c->check_struct (this)))
      return trace.ret (false, 132);

    if ((!c->check_range (this, length)))
    {



      uint16_t new_length = (uint16_t) MIN ((uintptr_t) 65535,
         (uintptr_t) (c->end -
        (char *) this));
      if (!c->try_set (&length, new_length))
 return trace.ret (false, 143);
    }

    return trace.ret (16 + 4 * (unsigned int) segCountX2 <= length, 146);
  }

  protected:
  USHORT format;
  USHORT length;

  USHORT languageZ;
  USHORT segCountX2;
  USHORT searchRangeZ;
  USHORT entrySelectorZ;
  USHORT rangeShiftZ;

  USHORT values[1];
# 170 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
  public:
  inline void _instance_assertion_on_line_171 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_171_failed[(((sizeof (*this) == (14) + sizeof (values[0]))))?1:-1]; do { typedef __typeof__(*this) _type_171; union _type__type_171_on_line_171_is_not_POD { _type_171 instance; }; } while (0); }; inline void _compiles_assertion_on_line_171 (void) const { (void) values[0].static_size; } static const unsigned int min_size = (14);
};

struct CmapSubtableLongGroup
{
  friend struct CmapSubtableFormat12;
  friend struct CmapSubtableFormat13;

  int cmp (hb_codepoint_t codepoint) const
  {
    if (codepoint < startCharCode) return -1;
    if (codepoint > endCharCode) return +1;
    return 0;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 188);
  }

  private:
  ULONG startCharCode;
  ULONG endCharCode;
  ULONG glyphID;

  public:
  inline void _instance_assertion_on_line_197 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_197_failed[(((sizeof (*this) == (12))))?1:-1]; do { typedef __typeof__(*this) _type_197; union _type__type_197_on_line_197_is_not_POD { _type_197 instance; }; } while (0); }; static const unsigned int static_size = (12); static const unsigned int min_size = (12);
};

template <typename UINT>
struct CmapSubtableTrimmed
{
  inline bool get_glyph (hb_codepoint_t codepoint, hb_codepoint_t *glyph) const
  {

    hb_codepoint_t gid = glyphIdArray[codepoint - startCharCode];
    if (!gid)
      return false;
    *glyph = gid;
    return true;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && glyphIdArray.sanitize (c), 215);
  }

  protected:
  UINT formatReserved;
  UINT lengthZ;
  UINT languageZ;
  UINT startCharCode;
  ArrayOf<GlyphID, UINT>
  glyphIdArray;

  public:
  inline void _instance_assertion_on_line_227 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_227_failed[(((sizeof (*this) == (5 * sizeof (UINT)) + sizeof (glyphIdArray[0]))))?1:-1]; do { typedef __typeof__(*this) _type_227; union _type__type_227_on_line_227_is_not_POD { _type_227 instance; }; } while (0); }; inline void _compiles_assertion_on_line_227 (void) const { (void) glyphIdArray[0].static_size; } static const unsigned int min_size = (5 * sizeof (UINT));
};

struct CmapSubtableFormat6 : CmapSubtableTrimmed<USHORT> {};
struct CmapSubtableFormat10 : CmapSubtableTrimmed<ULONG > {};

template <typename T>
struct CmapSubtableLongSegmented
{
  inline bool get_glyph (hb_codepoint_t codepoint, hb_codepoint_t *glyph) const
  {
    int i = groups.bsearch (codepoint);
    if (i == -1)
      return false;
    *glyph = T::group_get_glyph (groups[i], codepoint);
    return true;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && groups.sanitize (c), 247);
  }

  protected:
  USHORT format;
  USHORT reservedZ;
  ULONG lengthZ;
  ULONG languageZ;
  SortedArrayOf<CmapSubtableLongGroup, ULONG>
  groups;
  public:
  inline void _instance_assertion_on_line_258 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_258_failed[(((sizeof (*this) == (16) + sizeof (groups[0]))))?1:-1]; do { typedef __typeof__(*this) _type_258; union _type__type_258_on_line_258_is_not_POD { _type_258 instance; }; } while (0); }; inline void _compiles_assertion_on_line_258 (void) const { (void) groups[0].static_size; } static const unsigned int min_size = (16);
};

struct CmapSubtableFormat12 : CmapSubtableLongSegmented<CmapSubtableFormat12>
{
  static inline hb_codepoint_t group_get_glyph (const CmapSubtableLongGroup &group,
      hb_codepoint_t u)
  { return group.glyphID + (u - group.startCharCode); }
};

struct CmapSubtableFormat13 : CmapSubtableLongSegmented<CmapSubtableFormat13>
{
  static inline hb_codepoint_t group_get_glyph (const CmapSubtableLongGroup &group,
      hb_codepoint_t u __attribute__((unused)))
  { return group.glyphID; }
};

typedef enum
{
  GLYPH_VARIANT_NOT_FOUND = 0,
  GLYPH_VARIANT_FOUND = 1,
  GLYPH_VARIANT_USE_DEFAULT = 2
} glyph_variant_t;

struct UnicodeValueRange
{
  inline int cmp (const hb_codepoint_t &codepoint) const
  {
    if (codepoint < startUnicodeValue) return -1;
    if (codepoint > startUnicodeValue + additionalCount) return +1;
    return 0;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 293);
  }

  UINT24 startUnicodeValue;
  BYTE additionalCount;

  public:
  inline void _instance_assertion_on_line_300 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_300_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_300; union _type__type_300_on_line_300_is_not_POD { _type_300 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};

typedef SortedArrayOf<UnicodeValueRange, ULONG> DefaultUVS;

struct UVSMapping
{
  inline int cmp (const hb_codepoint_t &codepoint) const
  {
    return unicodeValue.cmp (codepoint);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 314);
  }

  UINT24 unicodeValue;
  GlyphID glyphID;
  public:
  inline void _instance_assertion_on_line_320 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_320_failed[(((sizeof (*this) == (5))))?1:-1]; do { typedef __typeof__(*this) _type_320; union _type__type_320_on_line_320_is_not_POD { _type_320 instance; }; } while (0); }; static const unsigned int static_size = (5); static const unsigned int min_size = (5);
};

typedef SortedArrayOf<UVSMapping, ULONG> NonDefaultUVS;

struct VariationSelectorRecord
{
  inline glyph_variant_t get_glyph (hb_codepoint_t codepoint,
        hb_codepoint_t *glyph,
        const void *base) const
  {
    int i;
    const DefaultUVS &defaults = base+defaultUVS;
    i = defaults.bsearch (codepoint);
    if (i != -1)
      return GLYPH_VARIANT_USE_DEFAULT;
    const NonDefaultUVS &nonDefaults = base+nonDefaultUVS;
    i = nonDefaults.bsearch (codepoint);
    if (i != -1)
    {
      *glyph = nonDefaults[i].glyphID;
       return GLYPH_VARIANT_FOUND;
    }
    return GLYPH_VARIANT_NOT_FOUND;
  }

  inline int cmp (const hb_codepoint_t &variation_selector) const
  {
    return varSelector.cmp (variation_selector);
  }

  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && defaultUVS.sanitize (c, base) && nonDefaultUVS.sanitize (c, base),

 355
# 353 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
           )

                                     ;
  }

  UINT24 varSelector;
  OffsetTo<DefaultUVS, ULONG>
  defaultUVS;
  OffsetTo<NonDefaultUVS, ULONG>
  nonDefaultUVS;
  public:
  inline void _instance_assertion_on_line_364 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_364_failed[(((sizeof (*this) == (11))))?1:-1]; do { typedef __typeof__(*this) _type_364; union _type__type_364_on_line_364_is_not_POD { _type_364 instance; }; } while (0); }; static const unsigned int static_size = (11); static const unsigned int min_size = (11);
};

struct CmapSubtableFormat14
{
  inline glyph_variant_t get_glyph_variant (hb_codepoint_t codepoint,
         hb_codepoint_t variation_selector,
         hb_codepoint_t *glyph) const
  {
    return record[record.bsearch(variation_selector)].get_glyph (codepoint, glyph, this);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && record.sanitize (c, this),
 379
# 378 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
           )
                              ;
  }

  protected:
  USHORT format;
  ULONG lengthZ;
  SortedArrayOf<VariationSelectorRecord, ULONG>
  record;

  public:
  inline void _instance_assertion_on_line_389 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_389_failed[(((sizeof (*this) == (10) + sizeof (record[0]))))?1:-1]; do { typedef __typeof__(*this) _type_389; union _type__type_389_on_line_389_is_not_POD { _type_389 instance; }; } while (0); }; inline void _compiles_assertion_on_line_389 (void) const { (void) record[0].static_size; } static const unsigned int min_size = (10);
};

struct CmapSubtable
{


  inline bool get_glyph (hb_codepoint_t codepoint,
    hb_codepoint_t *glyph) const
  {
    switch (u.format) {
    case 0: return u.format0 .get_glyph(codepoint, glyph);
    case 4: return u.format4 .get_glyph(codepoint, glyph);
    case 6: return u.format6 .get_glyph(codepoint, glyph);
    case 10: return u.format10.get_glyph(codepoint, glyph);
    case 12: return u.format12.get_glyph(codepoint, glyph);
    case 13: return u.format13.get_glyph(codepoint, glyph);
    case 14:
    default: return false;
    }
  }

  inline glyph_variant_t get_glyph_variant (hb_codepoint_t codepoint,
         hb_codepoint_t variation_selector,
         hb_codepoint_t *glyph) const
  {
    switch (u.format) {
    case 14: return u.format14.get_glyph_variant(codepoint, variation_selector, glyph);
    default: return GLYPH_VARIANT_NOT_FOUND;
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 423);
    switch (u.format) {
    case 0: return trace.ret (u.format0 .sanitize (c), 425);
    case 4: return trace.ret (u.format4 .sanitize (c), 426);
    case 6: return trace.ret (u.format6 .sanitize (c), 427);
    case 10: return trace.ret (u.format10.sanitize (c), 428);
    case 12: return trace.ret (u.format12.sanitize (c), 429);
    case 13: return trace.ret (u.format13.sanitize (c), 430);
    case 14: return trace.ret (u.format14.sanitize (c), 431);
    default:return trace.ret (true, 432);
    }
  }

  protected:
  union {
  USHORT format;
  CmapSubtableFormat0 format0;
  CmapSubtableFormat4 format4;
  CmapSubtableFormat6 format6;
  CmapSubtableFormat10 format10;
  CmapSubtableFormat12 format12;
  CmapSubtableFormat13 format13;
  CmapSubtableFormat14 format14;
  } u;
  public:
  inline void _instance_assertion_on_line_448 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_448_failed[(((this->u.format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_448; union _type__type_448_on_line_448_is_not_POD { _type_448 instance; }; } while (0); }; static const unsigned int min_size = (2);
};


struct EncodingRecord
{
  inline int cmp (const EncodingRecord &other) const
  {
    int ret;
    ret = platformID.cmp (other.platformID);
    if (ret) return ret;
    ret = encodingID.cmp (other.encodingID);
    if (ret) return ret;
    return 0;
  }

  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && subtable.sanitize (c, base),
 467
# 466 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
           )
                                ;
  }

  USHORT platformID;
  USHORT encodingID;
  OffsetTo<CmapSubtable, ULONG>
  subtable;
  public:
  inline void _instance_assertion_on_line_475 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_475_failed[(((sizeof (*this) == (8))))?1:-1]; do { typedef __typeof__(*this) _type_475; union _type__type_475_on_line_475_is_not_POD { _type_475 instance; }; } while (0); }; static const unsigned int static_size = (8); static const unsigned int min_size = (8);
};

struct cmap
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('p'))));

  inline const CmapSubtable *find_subtable (unsigned int platform_id,
         unsigned int encoding_id) const
  {
    EncodingRecord key;
    key.platformID.set (platform_id);
    key.encodingID.set (encoding_id);




    int result = encodingRecord. lsearch (key);
    if (result == -1 || !encodingRecord[result].subtable)
      return __null;

    return &(this+encodingRecord[result].subtable);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && (version == 0) && encodingRecord.sanitize (c, this),

 503
# 501 "../../../libs/harfbuzz-ng/src/hb-ot-cmap-table.hh"
           )

                                      ;
  }

  USHORT version;
  SortedArrayOf<EncodingRecord>
   encodingRecord;
  public:
  inline void _instance_assertion_on_line_510 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_510_failed[(((sizeof (*this) == (4) + sizeof (encodingRecord[0]))))?1:-1]; do { typedef __typeof__(*this) _type_510; union _type__type_510_on_line_510_is_not_POD { _type_510 instance; }; } while (0); }; inline void _compiles_assertion_on_line_510 (void) const { (void) encodingRecord[0].static_size; } static const unsigned int min_size = (4);
};


}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-hhea-table.hh" 1
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-hhea-table.hh"
namespace OT {
# 45 "../../../libs/harfbuzz-ng/src/hb-ot-hhea-table.hh"
struct _hea
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('_'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a'))));

  static const hb_tag_t hheaTag = ((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a'))));
  static const hb_tag_t vheaTag = ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a'))));

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && (version.major == 1), 54);
  }

  public:
  FixedVersion version;
  FWORD ascender;
  FWORD descender;
  FWORD lineGap;
  UFWORD advanceMax;

  FWORD minLeadingBearing;

  FWORD minTrailingBearing;


  FWORD maxExtent;

  SHORT caretSlopeRise;


  SHORT caretSlopeRun;
  SHORT caretOffset;




  SHORT reserved1;
  SHORT reserved2;
  SHORT reserved3;
  SHORT reserved4;
  SHORT metricDataFormat;
  USHORT numberOfLongMetrics;

  public:
  inline void _instance_assertion_on_line_88 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_88_failed[(((sizeof (*this) == (36))))?1:-1]; do { typedef __typeof__(*this) _type_88; union _type__type_88_on_line_88_is_not_POD { _type_88 instance; }; } while (0); }; static const unsigned int static_size = (36); static const unsigned int min_size = (36);
};

struct hhea : _hea {
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a'))));
};
struct vhea : _hea {
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a'))));
};


}
# 35 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-hmtx-table.hh" 1
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-hmtx-table.hh"
namespace OT {
# 45 "../../../libs/harfbuzz-ng/src/hb-ot-hmtx-table.hh"
struct LongMetric
{
  USHORT advance;
  SHORT lsb;
  public:
  inline void _instance_assertion_on_line_50 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_50_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_50; union _type__type_50_on_line_50_is_not_POD { _type_50 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};

struct _mtx
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('_'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x'))));

  static const hb_tag_t hmtxTag = ((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x'))));
  static const hb_tag_t vmtxTag = ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x'))));

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;


    return trace.ret (true, 64);
  }

  public:
  LongMetric longMetric[1];







  SHORT leadingBearingX[1];
# 89 "../../../libs/harfbuzz-ng/src/hb-ot-hmtx-table.hh"
  public:
  inline void _instance_assertion_on_line_90 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_90_failed[(((sizeof (*this) == (0) + sizeof (this->longMetric[0]) + sizeof (this->leadingBearingX[0]))))?1:-1]; do { typedef __typeof__(*this) _type_90; union _type__type_90_on_line_90_is_not_POD { _type_90 instance; }; } while (0); }; inline void _compiles_assertion_on_line_90 (void) const { (void) longMetric[0].static_size; (void) leadingBearingX[0].static_size; } static const unsigned int min_size = (0);
};

struct hmtx : _mtx {
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x'))));
};
struct vmtx : _mtx {
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x'))));
};

}
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-font.cc" 2


struct hb_ot_face_metrics_accelerator_t
{
  unsigned int num_metrics;
  unsigned int num_advances;
  unsigned int default_advance;
  const OT::_mtx *table;
  hb_blob_t *blob;

  inline void init (hb_face_t *face,
      hb_tag_t _hea_tag, hb_tag_t _mtx_tag,
      unsigned int default_advance)
  {
    this->default_advance = default_advance;
    this->num_metrics = face->get_num_glyphs ();

    hb_blob_t *_hea_blob = OT::Sanitizer<OT::_hea>::sanitize (face->reference_table (_hea_tag));
    const OT::_hea *_hea = OT::Sanitizer<OT::_hea>::lock_instance (_hea_blob);
    this->num_advances = _hea->numberOfLongMetrics;
    hb_blob_destroy (_hea_blob);

    this->blob = OT::Sanitizer<OT::_mtx>::sanitize (face->reference_table (_mtx_tag));
    if ((!this->num_advances || 2 * (this->num_advances + this->num_metrics) < hb_blob_get_length (this->blob))
                                                                                   )
    {
      this->num_metrics = this->num_advances = 0;
      hb_blob_destroy (this->blob);
      this->blob = hb_blob_get_empty ();
    }
    this->table = OT::Sanitizer<OT::_mtx>::lock_instance (this->blob);
  }

  inline void fini (void)
  {
    hb_blob_destroy (this->blob);
  }

  inline unsigned int get_advance (hb_codepoint_t glyph) const
  {
    if ((glyph >= this->num_metrics))
    {



      if (this->num_metrics)
 return 0;
      else
 return this->default_advance;
    }

    if (glyph >= this->num_advances)
      glyph = this->num_advances - 1;

    return this->table->longMetric[glyph].advance;
  }
};

struct hb_ot_face_cmap_accelerator_t
{
  const OT::CmapSubtable *table;
  const OT::CmapSubtable *uvs_table;
  hb_blob_t *blob;

  inline void init (hb_face_t *face)
  {
    this->blob = OT::Sanitizer<OT::cmap>::sanitize (face->reference_table (((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('p'))))));
    const OT::cmap *cmap = OT::Sanitizer<OT::cmap>::lock_instance (this->blob);
    const OT::CmapSubtable *subtable = __null;
    const OT::CmapSubtable *subtable_uvs = __null;


    if (!subtable) subtable = cmap->find_subtable (3, 10);
    if (!subtable) subtable = cmap->find_subtable (0, 6);
    if (!subtable) subtable = cmap->find_subtable (0, 4);

    if (!subtable) subtable = cmap->find_subtable (3, 1);
    if (!subtable) subtable = cmap->find_subtable (0, 3);
    if (!subtable) subtable = cmap->find_subtable (0, 2);
    if (!subtable) subtable = cmap->find_subtable (0, 1);
    if (!subtable) subtable = cmap->find_subtable (0, 0);

    if (!subtable) subtable = &OT::Null<OT::CmapSubtable>();


    if (!subtable_uvs) subtable_uvs = cmap->find_subtable (0, 5);

    if (!subtable_uvs) subtable_uvs = &OT::Null<OT::CmapSubtable>();

    this->table = subtable;
    this->uvs_table = subtable_uvs;
  }

  inline void fini (void)
  {
    hb_blob_destroy (this->blob);
  }

  inline bool get_glyph (hb_codepoint_t unicode,
    hb_codepoint_t variation_selector,
    hb_codepoint_t *glyph) const
  {
    if ((variation_selector))
    {
      switch (this->uvs_table->get_glyph_variant (unicode,
        variation_selector,
        glyph))
      {
 case OT::GLYPH_VARIANT_NOT_FOUND: return false;
 case OT::GLYPH_VARIANT_FOUND: return true;
 case OT::GLYPH_VARIANT_USE_DEFAULT: break;
      }
    }

    return this->table->get_glyph (unicode, glyph);
  }
};


struct hb_ot_font_t
{
  hb_ot_face_cmap_accelerator_t cmap;
  hb_ot_face_metrics_accelerator_t h_metrics;
  hb_ot_face_metrics_accelerator_t v_metrics;
};


static hb_ot_font_t *
_hb_ot_font_create (hb_font_t *font)
{
  hb_ot_font_t *ot_font = (hb_ot_font_t *) calloc (1, sizeof (hb_ot_font_t));
  hb_face_t *face = font->face;

  if ((!ot_font))
    return __null;

  unsigned int upem = face->get_upem ();

  ot_font->cmap.init (face);
  ot_font->h_metrics.init (face, ((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a')))), ((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x')))), upem>>1);
  ot_font->v_metrics.init (face, ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('a')))), ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('x')))), upem);

  return ot_font;
}

static void
_hb_ot_font_destroy (hb_ot_font_t *ot_font)
{
  ot_font->cmap.fini ();
  ot_font->h_metrics.fini ();
  ot_font->v_metrics.fini ();

  free (ot_font);
}


static hb_bool_t
hb_ot_get_glyph (hb_font_t *font __attribute__((unused)),
   void *font_data,
   hb_codepoint_t unicode,
   hb_codepoint_t variation_selector,
   hb_codepoint_t *glyph,
   void *user_data __attribute__((unused)))

{
  const hb_ot_font_t *ot_font = (const hb_ot_font_t *) font_data;
  return ot_font->cmap.get_glyph (unicode, variation_selector, glyph);
}

static hb_position_t
hb_ot_get_glyph_h_advance (hb_font_t *font __attribute__((unused)),
      void *font_data,
      hb_codepoint_t glyph,
      void *user_data __attribute__((unused)))
{
  const hb_ot_font_t *ot_font = (const hb_ot_font_t *) font_data;
  return font->em_scale_x (ot_font->h_metrics.get_advance (glyph));
}

static hb_position_t
hb_ot_get_glyph_v_advance (hb_font_t *font __attribute__((unused)),
      void *font_data,
      hb_codepoint_t glyph,
      void *user_data __attribute__((unused)))
{
  const hb_ot_font_t *ot_font = (const hb_ot_font_t *) font_data;
  return font->em_scale_y (-ot_font->v_metrics.get_advance (glyph));
}

static hb_bool_t
hb_ot_get_glyph_h_origin (hb_font_t *font __attribute__((unused)),
     void *font_data __attribute__((unused)),
     hb_codepoint_t glyph __attribute__((unused)),
     hb_position_t *x __attribute__((unused)),
     hb_position_t *y __attribute__((unused)),
     void *user_data __attribute__((unused)))
{

  return true;
}

static hb_bool_t
hb_ot_get_glyph_v_origin (hb_font_t *font __attribute__((unused)),
     void *font_data,
     hb_codepoint_t glyph,
     hb_position_t *x,
     hb_position_t *y,
     void *user_data __attribute__((unused)))
{

  return false;
}

static hb_position_t
hb_ot_get_glyph_h_kerning (hb_font_t *font,
      void *font_data,
      hb_codepoint_t left_glyph,
      hb_codepoint_t right_glyph,
      void *user_data __attribute__((unused)))
{

  return 0;
}

static hb_position_t
hb_ot_get_glyph_v_kerning (hb_font_t *font __attribute__((unused)),
      void *font_data __attribute__((unused)),
      hb_codepoint_t top_glyph __attribute__((unused)),
      hb_codepoint_t bottom_glyph __attribute__((unused)),
      void *user_data __attribute__((unused)))
{

  return 0;
}

static hb_bool_t
hb_ot_get_glyph_extents (hb_font_t *font __attribute__((unused)),
    void *font_data,
    hb_codepoint_t glyph,
    hb_glyph_extents_t *extents,
    void *user_data __attribute__((unused)))
{

  return false;
}

static hb_bool_t
hb_ot_get_glyph_contour_point (hb_font_t *font __attribute__((unused)),
          void *font_data,
          hb_codepoint_t glyph,
          unsigned int point_index,
          hb_position_t *x,
          hb_position_t *y,
          void *user_data __attribute__((unused)))
{

  return false;
}

static hb_bool_t
hb_ot_get_glyph_name (hb_font_t *font __attribute__((unused)),
        void *font_data,
        hb_codepoint_t glyph,
        char *name, unsigned int size,
        void *user_data __attribute__((unused)))
{

  return false;
}

static hb_bool_t
hb_ot_get_glyph_from_name (hb_font_t *font __attribute__((unused)),
      void *font_data,
      const char *name, int len,
      hb_codepoint_t *glyph,
      void *user_data __attribute__((unused)))
{

  return false;
}


static hb_font_funcs_t *
_hb_ot_get_font_funcs (void)
{
  static const hb_font_funcs_t ot_ffuncs = {
    {{((hb_atomic_int_t) -1)}, {{0}, {{0, 0, __null}}}},

    true,

    {

      hb_ot_get_glyph, hb_ot_get_glyph_h_advance, hb_ot_get_glyph_v_advance, hb_ot_get_glyph_h_origin, hb_ot_get_glyph_v_origin, hb_ot_get_glyph_h_kerning, hb_ot_get_glyph_v_kerning, hb_ot_get_glyph_extents, hb_ot_get_glyph_contour_point, hb_ot_get_glyph_name, hb_ot_get_glyph_from_name,

    }
  };

  return const_cast<hb_font_funcs_t *> (&ot_ffuncs);
}


void
hb_ot_font_set_funcs (hb_font_t *font)
{
  hb_ot_font_t *ot_font = _hb_ot_font_create (font);
  if ((!ot_font))
    return;

  hb_font_set_funcs (font,
       _hb_ot_get_font_funcs (),
       ot_font,
       (hb_destroy_func_t) _hb_ot_font_destroy);
}
