# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
# 1 "<command-line>"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
# 27 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh" 1
# 30 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-private.hh" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb.h" 1
# 31 "../../../libs/harfbuzz-ng/src/hb.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-blob.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-blob.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 65 "../../../libs/harfbuzz-ng/src/hb-common.h"
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 1 3 4
# 9 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 1 3 4
# 378 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 385 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 386 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4
# 379 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 402 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 1 3 4
# 10 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs-hard.h" 1 3 4
# 11 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 2 3 4
# 403 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wchar.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 2 3 4
# 66 "../../../libs/harfbuzz-ng/src/hb-common.h" 2




extern "C" {


typedef int hb_bool_t;

typedef uint32_t hb_codepoint_t;
typedef int32_t hb_position_t;
typedef uint32_t hb_mask_t;

typedef union _hb_var_int_t {
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_int_t;




typedef uint32_t hb_tag_t;
# 101 "../../../libs/harfbuzz-ng/src/hb-common.h"
hb_tag_t
hb_tag_from_string (const char *str, int len);


void
hb_tag_to_string (hb_tag_t tag, char *buf);




typedef enum {
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT
} hb_direction_t;


hb_direction_t
hb_direction_from_string (const char *str, int len);

const char *
hb_direction_to_string (hb_direction_t direction);
# 137 "../../../libs/harfbuzz-ng/src/hb-common.h"
typedef const struct hb_language_impl_t *hb_language_t;


hb_language_t
hb_language_from_string (const char *str, int len);

const char *
hb_language_to_string (hb_language_t language);



hb_language_t
hb_language_get_default (void);







typedef enum
{
          HB_SCRIPT_COMMON = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('y')))),
          HB_SCRIPT_INHERITED = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_UNKNOWN = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('z'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('z')))),

          HB_SCRIPT_ARABIC = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_ARMENIAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_BENGALI = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_CYRILLIC = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_DEVANAGARI = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_GEORGIAN = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_GREEK = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_GUJARATI = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('j'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_GURMUKHI = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_HANGUL = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_HAN = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_HEBREW = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_HIRAGANA = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KANNADA = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('n'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KATAKANA = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_LAO = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_LATIN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_MALAYALAM = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_ORIYA = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAMIL = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_TELUGU = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_THAI = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_TIBETAN = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('t')))),

          HB_SCRIPT_BOPOMOFO = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_BRAILLE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CANADIAN_SYLLABICS = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('s')))),
          HB_SCRIPT_CHEROKEE = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_ETHIOPIC = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_KHMER = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_MONGOLIAN = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_MYANMAR = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_OGHAM = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_RUNIC = ((hb_tag_t)((((uint8_t)('R'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_SINHALA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_SYRIAC = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_THAANA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_YI = ((hb_tag_t)((((uint8_t)('Y'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_DESERET = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_GOTHIC = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_OLD_ITALIC = ((hb_tag_t)((((uint8_t)('I'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('l')))),

          HB_SCRIPT_BUHID = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_HANUNOO = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_TAGALOG = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_TAGBANWA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('b')))),

          HB_SCRIPT_CYPRIOT = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_LIMBU = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_LINEAR_B = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OSMANYA = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_SHAVIAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('w')))),
          HB_SCRIPT_TAI_LE = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('e')))),
          HB_SCRIPT_UGARITIC = ((hb_tag_t)((((uint8_t)('U'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))),

          HB_SCRIPT_BUGINESE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_COPTIC = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_GLAGOLITIC = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_KHAROSHTHI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_NEW_TAI_LUE = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_OLD_PERSIAN = ((hb_tag_t)((((uint8_t)('X'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_SYLOTI_NAGRI = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_TIFINAGH = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),

          HB_SCRIPT_BALINESE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CUNEIFORM = ((hb_tag_t)((((uint8_t)('X'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('x')))),
          HB_SCRIPT_NKO = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('k'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_PHAGS_PA = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_PHOENICIAN = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('x')))),

          HB_SCRIPT_CARIAN = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CHAM = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_KAYAH_LI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LEPCHA = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_LYCIAN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LYDIAN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_OL_CHIKI = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_REJANG = ((hb_tag_t)((((uint8_t)('R'))<<24)|(((uint8_t)('j'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_SAURASHTRA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_SUNDANESE = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_VAI = ((hb_tag_t)((((uint8_t)('V'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_AVESTAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('v'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_BAMUM = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('p')))),
          HB_SCRIPT_IMPERIAL_ARAMAIC = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_JAVANESE = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KAITHI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LISU = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_MEETEI_MAYEK = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_OLD_SOUTH_ARABIAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OLD_TURKIC = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_SAMARITAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_TAI_THAM = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAI_VIET = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('t')))),

          HB_SCRIPT_BATAK = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_BRAHMI = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_MANDAIC = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),

          HB_SCRIPT_CHAKMA = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_MEROITIC_CURSIVE = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_MEROITIC_HIEROGLYPHS = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_MIAO = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_SHARADA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_SORA_SOMPENG = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAKRI = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('r')))),

          HB_SCRIPT_BASSA_VAH = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('s')))),
          HB_SCRIPT_CAUCASIAN_ALBANIAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_DUPLOYAN = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_ELBASAN = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_GRANTHA = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_KHOJKI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('j')))),
          HB_SCRIPT_KHUDAWADI = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_LINEAR_A = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_MAHAJANI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('j')))),
          HB_SCRIPT_MANICHAEAN = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_MENDE_KIKAKUI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_MODI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_MRO = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_NABATAEAN = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('b'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_OLD_NORTH_ARABIAN = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OLD_PERMIC = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_PAHAWH_HMONG = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_PALMYRENE = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_PAU_CIN_HAU = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_PSALTER_PAHLAVI = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('p')))),
          HB_SCRIPT_SIDDHAM = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_TIRHUTA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_WARANG_CITI = ((hb_tag_t)((((uint8_t)('W'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),


  HB_SCRIPT_INVALID = ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0)))),
# 309 "../../../libs/harfbuzz-ng/src/hb-common.h"
  _HB_SCRIPT_MAX_VALUE = ((hb_tag_t)((((uint8_t)(0xff))<<24)|(((uint8_t)(0xff))<<16)|(((uint8_t)(0xff))<<8)|((uint8_t)(0xff)))),
  _HB_SCRIPT_MAX_VALUE_SIGNED = ((hb_tag_t)((((uint8_t)(0x7f))<<24)|(((uint8_t)(0xff))<<16)|(((uint8_t)(0xff))<<8)|((uint8_t)(0xff))))

} hb_script_t;




hb_script_t
hb_script_from_iso15924_tag (hb_tag_t tag);



hb_script_t
hb_script_from_string (const char *s, int len);

hb_tag_t
hb_script_to_iso15924_tag (hb_script_t script);

hb_direction_t
hb_script_get_horizontal_direction (hb_script_t script);




typedef struct hb_user_data_key_t {

  char unused;
} hb_user_data_key_t;

typedef void (*hb_destroy_func_t) (void *user_data);


}
# 35 "../../../libs/harfbuzz-ng/src/hb-blob.h" 2

extern "C" {
# 58 "../../../libs/harfbuzz-ng/src/hb-blob.h"
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;

typedef struct hb_blob_t hb_blob_t;

hb_blob_t *
hb_blob_create (const char *data,
  unsigned int length,
  hb_memory_mode_t mode,
  void *user_data,
  hb_destroy_func_t destroy);







hb_blob_t *
hb_blob_create_sub_blob (hb_blob_t *parent,
    unsigned int offset,
    unsigned int length);

hb_blob_t *
hb_blob_get_empty (void);

hb_blob_t *
hb_blob_reference (hb_blob_t *blob);

void
hb_blob_destroy (hb_blob_t *blob);

hb_bool_t
hb_blob_set_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_blob_get_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key);


void
hb_blob_make_immutable (hb_blob_t *blob);

hb_bool_t
hb_blob_is_immutable (hb_blob_t *blob);


unsigned int
hb_blob_get_length (hb_blob_t *blob);

const char *
hb_blob_get_data (hb_blob_t *blob, unsigned int *length);

char *
hb_blob_get_data_writable (hb_blob_t *blob, unsigned int *length);


}
# 32 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-buffer.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 39 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 2

extern "C" {





typedef enum
{
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
} hb_unicode_general_category_t;
# 87 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef enum
{
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,


  HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26,


  HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35,


  HB_UNICODE_COMBINING_CLASS_CCC36 = 36,


  HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91,


  HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107,


  HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122,


  HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
  HB_UNICODE_COMBINING_CLASS_CCC133 = 132,


  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
  HB_UNICODE_COMBINING_CLASS_BELOW = 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
  HB_UNICODE_COMBINING_CLASS_LEFT = 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,

  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,

  HB_UNICODE_COMBINING_CLASS_INVALID = 255
} hb_unicode_combining_class_t;






typedef struct hb_unicode_funcs_t hb_unicode_funcs_t;





hb_unicode_funcs_t *
hb_unicode_funcs_get_default (void);


hb_unicode_funcs_t *
hb_unicode_funcs_create (hb_unicode_funcs_t *parent);

hb_unicode_funcs_t *
hb_unicode_funcs_get_empty (void);

hb_unicode_funcs_t *
hb_unicode_funcs_reference (hb_unicode_funcs_t *ufuncs);

void
hb_unicode_funcs_destroy (hb_unicode_funcs_t *ufuncs);

hb_bool_t
hb_unicode_funcs_set_user_data (hb_unicode_funcs_t *ufuncs,
           hb_user_data_key_t *key,
           void * data,
           hb_destroy_func_t destroy,
    hb_bool_t replace);


void *
hb_unicode_funcs_get_user_data (hb_unicode_funcs_t *ufuncs,
           hb_user_data_key_t *key);


void
hb_unicode_funcs_make_immutable (hb_unicode_funcs_t *ufuncs);

hb_bool_t
hb_unicode_funcs_is_immutable (hb_unicode_funcs_t *ufuncs);

hb_unicode_funcs_t *
hb_unicode_funcs_get_parent (hb_unicode_funcs_t *ufuncs);
# 222 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef hb_unicode_combining_class_t (*hb_unicode_combining_class_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef unsigned int (*hb_unicode_eastasian_width_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_unicode_general_category_t (*hb_unicode_general_category_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_codepoint_t (*hb_unicode_mirroring_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_script_t (*hb_unicode_script_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);

typedef hb_bool_t (*hb_unicode_compose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t a,
           hb_codepoint_t b,
           hb_codepoint_t *ab,
           void *user_data);
typedef hb_bool_t (*hb_unicode_decompose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t ab,
           hb_codepoint_t *a,
           hb_codepoint_t *b,
           void *user_data);
# 267 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef unsigned int (*hb_unicode_decompose_compatibility_func_t) (hb_unicode_funcs_t *ufuncs,
            hb_codepoint_t u,
            hb_codepoint_t *decomposed,
            void *user_data);
# 288 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_combining_class_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_combining_class_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 304 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_eastasian_width_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_eastasian_width_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 320 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_general_category_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_general_category_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 336 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_mirroring_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_mirroring_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 352 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_script_func (hb_unicode_funcs_t *ufuncs,
      hb_unicode_script_func_t func,
      void *user_data, hb_destroy_func_t destroy);
# 368 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_compose_func (hb_unicode_funcs_t *ufuncs,
       hb_unicode_compose_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 384 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_decompose_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 400 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_decompose_compatibility_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_compatibility_func_t func,
         void *user_data, hb_destroy_func_t destroy);



hb_unicode_combining_class_t
hb_unicode_combining_class (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);

unsigned int
hb_unicode_eastasian_width (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);

hb_unicode_general_category_t
hb_unicode_general_category (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);

hb_codepoint_t
hb_unicode_mirroring (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);

hb_script_t
hb_unicode_script (hb_unicode_funcs_t *ufuncs,
     hb_codepoint_t unicode);

hb_bool_t
hb_unicode_compose (hb_unicode_funcs_t *ufuncs,
      hb_codepoint_t a,
      hb_codepoint_t b,
      hb_codepoint_t *ab);
hb_bool_t
hb_unicode_decompose (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t ab,
        hb_codepoint_t *a,
        hb_codepoint_t *b);

unsigned int
hb_unicode_decompose_compatibility (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t u,
        hb_codepoint_t *decomposed);

}
# 39 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-font.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-font.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-face.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-face.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-blob.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-face.h" 2

extern "C" {






typedef struct hb_face_t hb_face_t;

hb_face_t *
hb_face_create (hb_blob_t *blob,
  unsigned int index);

typedef hb_blob_t * (*hb_reference_table_func_t) (hb_face_t *face, hb_tag_t tag, void *user_data);


hb_face_t *
hb_face_create_for_tables (hb_reference_table_func_t reference_table_func,
      void *user_data,
      hb_destroy_func_t destroy);

hb_face_t *
hb_face_get_empty (void);

hb_face_t *
hb_face_reference (hb_face_t *face);

void
hb_face_destroy (hb_face_t *face);

hb_bool_t
hb_face_set_user_data (hb_face_t *face,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_face_get_user_data (hb_face_t *face,
         hb_user_data_key_t *key);

void
hb_face_make_immutable (hb_face_t *face);

hb_bool_t
hb_face_is_immutable (hb_face_t *face);


hb_blob_t *
hb_face_reference_table (hb_face_t *face,
    hb_tag_t tag);

hb_blob_t *
hb_face_reference_blob (hb_face_t *face);

void
hb_face_set_index (hb_face_t *face,
     unsigned int index);

unsigned int
hb_face_get_index (hb_face_t *face);

void
hb_face_set_upem (hb_face_t *face,
    unsigned int upem);

unsigned int
hb_face_get_upem (hb_face_t *face);

void
hb_face_set_glyph_count (hb_face_t *face,
    unsigned int glyph_count);

unsigned int
hb_face_get_glyph_count (hb_face_t *face);


}
# 36 "../../../libs/harfbuzz-ng/src/hb-font.h" 2

extern "C" {


typedef struct hb_font_t hb_font_t;






typedef struct hb_font_funcs_t hb_font_funcs_t;

hb_font_funcs_t *
hb_font_funcs_create (void);

hb_font_funcs_t *
hb_font_funcs_get_empty (void);

hb_font_funcs_t *
hb_font_funcs_reference (hb_font_funcs_t *ffuncs);

void
hb_font_funcs_destroy (hb_font_funcs_t *ffuncs);

hb_bool_t
hb_font_funcs_set_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);


void *
hb_font_funcs_get_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key);


void
hb_font_funcs_make_immutable (hb_font_funcs_t *ffuncs);

hb_bool_t
hb_font_funcs_is_immutable (hb_font_funcs_t *ffuncs);




typedef struct hb_glyph_extents_t
{
  hb_position_t x_bearing;
  hb_position_t y_bearing;
  hb_position_t width;
  hb_position_t height;
} hb_glyph_extents_t;




typedef hb_bool_t (*hb_font_get_glyph_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t unicode, hb_codepoint_t variation_selector,
            hb_codepoint_t *glyph,
            void *user_data);


typedef hb_position_t (*hb_font_get_glyph_advance_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          void *user_data);
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t;
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t;

typedef hb_bool_t (*hb_font_get_glyph_origin_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t;
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t;

typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
          void *user_data);
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t;


typedef hb_bool_t (*hb_font_get_glyph_extents_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t glyph,
             hb_glyph_extents_t *extents,
             void *user_data);
typedef hb_bool_t (*hb_font_get_glyph_contour_point_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph, unsigned int point_index,
            hb_position_t *x, hb_position_t *y,
            void *user_data);


typedef hb_bool_t (*hb_font_get_glyph_name_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          char *name, unsigned int size,
          void *user_data);
typedef hb_bool_t (*hb_font_get_glyph_from_name_func_t) (hb_font_t *font, void *font_data,
        const char *name, int len,
        hb_codepoint_t *glyph,
        void *user_data);
# 153 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 169 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 185 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 201 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_h_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 217 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_v_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 233 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 249 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 265 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_extents_func (hb_font_funcs_t *ffuncs,
          hb_font_get_glyph_extents_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 281 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_contour_point_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_contour_point_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 297 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_name_func (hb_font_funcs_t *ffuncs,
       hb_font_get_glyph_name_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 313 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_from_name_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_from_name_func_t func,
     void *user_data, hb_destroy_func_t destroy);




hb_bool_t
hb_font_get_glyph (hb_font_t *font,
     hb_codepoint_t unicode, hb_codepoint_t variation_selector,
     hb_codepoint_t *glyph);

hb_position_t
hb_font_get_glyph_h_advance (hb_font_t *font,
        hb_codepoint_t glyph);
hb_position_t
hb_font_get_glyph_v_advance (hb_font_t *font,
        hb_codepoint_t glyph);

hb_bool_t
hb_font_get_glyph_h_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);
hb_bool_t
hb_font_get_glyph_v_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);

hb_position_t
hb_font_get_glyph_h_kerning (hb_font_t *font,
        hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);
hb_position_t
hb_font_get_glyph_v_kerning (hb_font_t *font,
        hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);

hb_bool_t
hb_font_get_glyph_extents (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_glyph_extents_t *extents);

hb_bool_t
hb_font_get_glyph_contour_point (hb_font_t *font,
     hb_codepoint_t glyph, unsigned int point_index,
     hb_position_t *x, hb_position_t *y);

hb_bool_t
hb_font_get_glyph_name (hb_font_t *font,
   hb_codepoint_t glyph,
   char *name, unsigned int size);
hb_bool_t
hb_font_get_glyph_from_name (hb_font_t *font,
        const char *name, int len,
        hb_codepoint_t *glyph);




void
hb_font_get_glyph_advance_for_direction (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);
void
hb_font_get_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
void
hb_font_add_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
void
hb_font_subtract_glyph_origin_for_direction (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_position_t *x, hb_position_t *y);

void
hb_font_get_glyph_kerning_for_direction (hb_font_t *font,
      hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);

hb_bool_t
hb_font_get_glyph_extents_for_origin (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_glyph_extents_t *extents);

hb_bool_t
hb_font_get_glyph_contour_point_for_origin (hb_font_t *font,
         hb_codepoint_t glyph, unsigned int point_index,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y);


void
hb_font_glyph_to_string (hb_font_t *font,
    hb_codepoint_t glyph,
    char *s, unsigned int size);

hb_bool_t
hb_font_glyph_from_string (hb_font_t *font,
      const char *s, int len,
      hb_codepoint_t *glyph);
# 428 "../../../libs/harfbuzz-ng/src/hb-font.h"
hb_font_t *
hb_font_create (hb_face_t *face);

hb_font_t *
hb_font_create_sub_font (hb_font_t *parent);

hb_font_t *
hb_font_get_empty (void);

hb_font_t *
hb_font_reference (hb_font_t *font);

void
hb_font_destroy (hb_font_t *font);

hb_bool_t
hb_font_set_user_data (hb_font_t *font,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_font_get_user_data (hb_font_t *font,
         hb_user_data_key_t *key);

void
hb_font_make_immutable (hb_font_t *font);

hb_bool_t
hb_font_is_immutable (hb_font_t *font);

hb_font_t *
hb_font_get_parent (hb_font_t *font);

hb_face_t *
hb_font_get_face (hb_font_t *font);


void
hb_font_set_funcs (hb_font_t *font,
     hb_font_funcs_t *klass,
     void *font_data,
     hb_destroy_func_t destroy);


void
hb_font_set_funcs_data (hb_font_t *font,
          void *font_data,
          hb_destroy_func_t destroy);


void
hb_font_set_scale (hb_font_t *font,
     int x_scale,
     int y_scale);

void
hb_font_get_scale (hb_font_t *font,
     int *x_scale,
     int *y_scale);




void
hb_font_set_ppem (hb_font_t *font,
    unsigned int x_ppem,
    unsigned int y_ppem);

void
hb_font_get_ppem (hb_font_t *font,
    unsigned int *x_ppem,
    unsigned int *y_ppem);


}
# 40 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2

extern "C" {


typedef struct hb_glyph_info_t {
  hb_codepoint_t codepoint;
  hb_mask_t mask;
  uint32_t cluster;


  hb_var_int_t var1;
  hb_var_int_t var2;
} hb_glyph_info_t;

typedef struct hb_glyph_position_t {
  hb_position_t x_advance;
  hb_position_t y_advance;
  hb_position_t x_offset;
  hb_position_t y_offset;


  hb_var_int_t var;
} hb_glyph_position_t;


typedef struct hb_segment_properties_t {
  hb_direction_t direction;
  hb_script_t script;
  hb_language_t language;

  void *reserved1;
  void *reserved2;
} hb_segment_properties_t;







hb_bool_t
hb_segment_properties_equal (const hb_segment_properties_t *a,
        const hb_segment_properties_t *b);

unsigned int
hb_segment_properties_hash (const hb_segment_properties_t *p);







typedef struct hb_buffer_t hb_buffer_t;

hb_buffer_t *
hb_buffer_create (void);

hb_buffer_t *
hb_buffer_get_empty (void);

hb_buffer_t *
hb_buffer_reference (hb_buffer_t *buffer);

void
hb_buffer_destroy (hb_buffer_t *buffer);

hb_bool_t
hb_buffer_set_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);

void *
hb_buffer_get_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key);


typedef enum {
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS
} hb_buffer_content_type_t;

void
hb_buffer_set_content_type (hb_buffer_t *buffer,
       hb_buffer_content_type_t content_type);

hb_buffer_content_type_t
hb_buffer_get_content_type (hb_buffer_t *buffer);


void
hb_buffer_set_unicode_funcs (hb_buffer_t *buffer,
        hb_unicode_funcs_t *unicode_funcs);

hb_unicode_funcs_t *
hb_buffer_get_unicode_funcs (hb_buffer_t *buffer);

void
hb_buffer_set_direction (hb_buffer_t *buffer,
    hb_direction_t direction);

hb_direction_t
hb_buffer_get_direction (hb_buffer_t *buffer);

void
hb_buffer_set_script (hb_buffer_t *buffer,
        hb_script_t script);

hb_script_t
hb_buffer_get_script (hb_buffer_t *buffer);

void
hb_buffer_set_language (hb_buffer_t *buffer,
   hb_language_t language);


hb_language_t
hb_buffer_get_language (hb_buffer_t *buffer);

void
hb_buffer_set_segment_properties (hb_buffer_t *buffer,
      const hb_segment_properties_t *props);

void
hb_buffer_get_segment_properties (hb_buffer_t *buffer,
      hb_segment_properties_t *props);

void
hb_buffer_guess_segment_properties (hb_buffer_t *buffer);


typedef enum {
  HB_BUFFER_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_FLAG_BOT = 0x00000001u,
  HB_BUFFER_FLAG_EOT = 0x00000002u,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 0x00000004u
} hb_buffer_flags_t;

void
hb_buffer_set_flags (hb_buffer_t *buffer,
       hb_buffer_flags_t flags);

hb_buffer_flags_t
hb_buffer_get_flags (hb_buffer_t *buffer);







void
hb_buffer_set_replacement_codepoint (hb_buffer_t *buffer,
         hb_codepoint_t replacement);

hb_codepoint_t
hb_buffer_get_replacement_codepoint (hb_buffer_t *buffer);




void
hb_buffer_reset (hb_buffer_t *buffer);


void
hb_buffer_clear_contents (hb_buffer_t *buffer);


hb_bool_t
hb_buffer_pre_allocate (hb_buffer_t *buffer,
          unsigned int size);



hb_bool_t
hb_buffer_allocation_successful (hb_buffer_t *buffer);

void
hb_buffer_reverse (hb_buffer_t *buffer);

void
hb_buffer_reverse_clusters (hb_buffer_t *buffer);




void
hb_buffer_add (hb_buffer_t *buffer,
        hb_codepoint_t codepoint,
        unsigned int cluster);

void
hb_buffer_add_utf8 (hb_buffer_t *buffer,
      const char *text,
      int text_length,
      unsigned int item_offset,
      int item_length);

void
hb_buffer_add_utf16 (hb_buffer_t *buffer,
       const uint16_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

void
hb_buffer_add_utf32 (hb_buffer_t *buffer,
       const uint32_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);


void
hb_buffer_add_codepoints (hb_buffer_t *buffer,
     const hb_codepoint_t *text,
     int text_length,
     unsigned int item_offset,
     int item_length);



hb_bool_t
hb_buffer_set_length (hb_buffer_t *buffer,
        unsigned int length);


unsigned int
hb_buffer_get_length (hb_buffer_t *buffer);




hb_glyph_info_t *
hb_buffer_get_glyph_infos (hb_buffer_t *buffer,
                           unsigned int *length);


hb_glyph_position_t *
hb_buffer_get_glyph_positions (hb_buffer_t *buffer,
                               unsigned int *length);





void
hb_buffer_normalize_glyphs (hb_buffer_t *buffer);






typedef enum {
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 0x00000001u,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 0x00000002u,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 0x00000004u
} hb_buffer_serialize_flags_t;

typedef enum {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('E'))<<16)|(((uint8_t)('X'))<<8)|((uint8_t)('T')))),
  HB_BUFFER_SERIALIZE_FORMAT_JSON = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('N')))),
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0))))
} hb_buffer_serialize_format_t;


hb_buffer_serialize_format_t
hb_buffer_serialize_format_from_string (const char *str, int len);

const char *
hb_buffer_serialize_format_to_string (hb_buffer_serialize_format_t format);

const char **
hb_buffer_serialize_list_formats (void);


unsigned int
hb_buffer_serialize_glyphs (hb_buffer_t *buffer,
       unsigned int start,
       unsigned int end,
       char *buf,
       unsigned int buf_size,
       unsigned int *buf_consumed,
       hb_font_t *font,
       hb_buffer_serialize_format_t format,
       hb_buffer_serialize_flags_t flags);

hb_bool_t
hb_buffer_deserialize_glyphs (hb_buffer_t *buffer,
         const char *buf,
         int buf_len,
         const char **end_ptr,
         hb_font_t *font,
         hb_buffer_serialize_format_t format);


}
# 33 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-deprecated.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2

extern "C" {
# 49 "../../../libs/harfbuzz-ng/src/hb-deprecated.h"
}
# 35 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-set.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-set.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-set.h" 2

extern "C" {




typedef struct hb_set_t hb_set_t;


hb_set_t *
hb_set_create (void);

hb_set_t *
hb_set_get_empty (void);

hb_set_t *
hb_set_reference (hb_set_t *set);

void
hb_set_destroy (hb_set_t *set);

hb_bool_t
hb_set_set_user_data (hb_set_t *set,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

void *
hb_set_get_user_data (hb_set_t *set,
        hb_user_data_key_t *key);



hb_bool_t
hb_set_allocation_successful (const hb_set_t *set);

void
hb_set_clear (hb_set_t *set);

hb_bool_t
hb_set_is_empty (const hb_set_t *set);

hb_bool_t
hb_set_has (const hb_set_t *set,
     hb_codepoint_t codepoint);



void
hb_set_add (hb_set_t *set,
     hb_codepoint_t codepoint);

void
hb_set_add_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

void
hb_set_del (hb_set_t *set,
     hb_codepoint_t codepoint);

void
hb_set_del_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

hb_bool_t
hb_set_is_equal (const hb_set_t *set,
   const hb_set_t *other);

void
hb_set_set (hb_set_t *set,
     const hb_set_t *other);

void
hb_set_union (hb_set_t *set,
       const hb_set_t *other);

void
hb_set_intersect (hb_set_t *set,
    const hb_set_t *other);

void
hb_set_subtract (hb_set_t *set,
   const hb_set_t *other);

void
hb_set_symmetric_difference (hb_set_t *set,
        const hb_set_t *other);

void
hb_set_invert (hb_set_t *set);

unsigned int
hb_set_get_population (const hb_set_t *set);


hb_codepoint_t
hb_set_get_min (const hb_set_t *set);


hb_codepoint_t
hb_set_get_max (const hb_set_t *set);


hb_bool_t
hb_set_next (const hb_set_t *set,
      hb_codepoint_t *codepoint);


hb_bool_t
hb_set_next_range (const hb_set_t *set,
     hb_codepoint_t *first,
     hb_codepoint_t *last);


}
# 38 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-shape.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 39 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2

extern "C" {


typedef struct hb_feature_t {
  hb_tag_t tag;
  uint32_t value;
  unsigned int start;
  unsigned int end;
} hb_feature_t;


hb_bool_t
hb_feature_from_string (const char *str, int len,
   hb_feature_t *feature);



void
hb_feature_to_string (hb_feature_t *feature,
        char *buf, unsigned int size);


void
hb_shape (hb_font_t *font,
   hb_buffer_t *buffer,
   const hb_feature_t *features,
   unsigned int num_features);

hb_bool_t
hb_shape_full (hb_font_t *font,
        hb_buffer_t *buffer,
        const hb_feature_t *features,
        unsigned int num_features,
        const char * const *shaper_list);

const char **
hb_shape_list_shapers (void);


}
# 39 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 2

extern "C" {

typedef struct hb_shape_plan_t hb_shape_plan_t;

hb_shape_plan_t *
hb_shape_plan_create (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

hb_shape_plan_t *
hb_shape_plan_create_cached (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

hb_shape_plan_t *
hb_shape_plan_get_empty (void);

hb_shape_plan_t *
hb_shape_plan_reference (hb_shape_plan_t *shape_plan);

void
hb_shape_plan_destroy (hb_shape_plan_t *shape_plan);

hb_bool_t
hb_shape_plan_set_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

void *
hb_shape_plan_get_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key);


hb_bool_t
hb_shape_plan_execute (hb_shape_plan_t *shape_plan,
         hb_font_t *font,
         hb_buffer_t *buffer,
         const hb_feature_t *features,
         unsigned int num_features);

const char *
hb_shape_plan_get_shaper (hb_shape_plan_t *shape_plan);


}
# 40 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 41 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-version.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-version.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-version.h" 2

extern "C" {
# 50 "../../../libs/harfbuzz-ng/src/hb-version.h"
void
hb_version (unsigned int *major,
     unsigned int *minor,
     unsigned int *micro);

const char *
hb_version_string (void);

hb_bool_t
hb_version_atleast (unsigned int major,
      unsigned int minor,
      unsigned int micro);


}
# 42 "../../../libs/harfbuzz-ng/src/hb.h" 2

extern "C" {
}
# 37 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2


# 1 "../../../libs/harfbuzz-ng/src/hb-ot.h" 1
# 33 "../../../libs/harfbuzz-ng/src/hb-ot.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-font.h" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-font.h"
extern "C" {


void
hb_ot_font_set_funcs (hb_font_t *font);


}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h"
extern "C" {





void
hb_ot_tags_from_script (hb_script_t script,
   hb_tag_t *script_tag_1,
   hb_tag_t *script_tag_2);

hb_script_t
hb_ot_tag_to_script (hb_tag_t tag);

hb_tag_t
hb_ot_tag_from_language (hb_language_t language);

hb_language_t
hb_ot_tag_to_language (hb_tag_t tag);


}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h" 2

extern "C" {
# 51 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_glyph_classes (hb_face_t *face);

typedef enum {
  HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED = 0,
  HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH = 1,
  HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE = 2,
  HB_OT_LAYOUT_GLYPH_CLASS_MARK = 3,
  HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT = 4
} hb_ot_layout_glyph_class_t;

hb_ot_layout_glyph_class_t
hb_ot_layout_get_glyph_class (hb_face_t *face,
         hb_codepoint_t glyph);

void
hb_ot_layout_get_glyphs_in_class (hb_face_t *face,
      hb_ot_layout_glyph_class_t klass,
      hb_set_t *glyphs );




unsigned int
hb_ot_layout_get_attach_points (hb_face_t *face,
    hb_codepoint_t glyph,
    unsigned int start_offset,
    unsigned int *point_count ,
    unsigned int *point_array );


unsigned int
hb_ot_layout_get_ligature_carets (hb_font_t *font,
      hb_direction_t direction,
      hb_codepoint_t glyph,
      unsigned int start_offset,
      unsigned int *caret_count ,
      hb_position_t *caret_array );
# 99 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
unsigned int
hb_ot_layout_table_get_script_tags (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int start_offset,
        unsigned int *script_count ,
        hb_tag_t *script_tags );

hb_bool_t
hb_ot_layout_table_find_script (hb_face_t *face,
    hb_tag_t table_tag,
    hb_tag_t script_tag,
    unsigned int *script_index);


hb_bool_t
hb_ot_layout_table_choose_script (hb_face_t *face,
      hb_tag_t table_tag,
      const hb_tag_t *script_tags,
      unsigned int *script_index,
      hb_tag_t *chosen_script);

unsigned int
hb_ot_layout_table_get_feature_tags (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int start_offset,
         unsigned int *feature_count ,
         hb_tag_t *feature_tags );

unsigned int
hb_ot_layout_script_get_language_tags (hb_face_t *face,
           hb_tag_t table_tag,
           unsigned int script_index,
           unsigned int start_offset,
           unsigned int *language_count ,
           hb_tag_t *language_tags );

hb_bool_t
hb_ot_layout_script_find_language (hb_face_t *face,
       hb_tag_t table_tag,
       unsigned int script_index,
       hb_tag_t language_tag,
       unsigned int *language_index);

hb_bool_t
hb_ot_layout_language_get_required_feature_index (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int *feature_index);

hb_bool_t
hb_ot_layout_language_get_required_feature (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int script_index,
         unsigned int language_index,
         unsigned int *feature_index,
         hb_tag_t *feature_tag);

unsigned int
hb_ot_layout_language_get_feature_indexes (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int start_offset,
        unsigned int *feature_count ,
        unsigned int *feature_indexes );

unsigned int
hb_ot_layout_language_get_feature_tags (hb_face_t *face,
     hb_tag_t table_tag,
     unsigned int script_index,
     unsigned int language_index,
     unsigned int start_offset,
     unsigned int *feature_count ,
     hb_tag_t *feature_tags );

hb_bool_t
hb_ot_layout_language_find_feature (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        hb_tag_t feature_tag,
        unsigned int *feature_index);

unsigned int
hb_ot_layout_feature_get_lookups (hb_face_t *face,
      hb_tag_t table_tag,
      unsigned int feature_index,
      unsigned int start_offset,
      unsigned int *lookup_count ,
      unsigned int *lookup_indexes );

unsigned int
hb_ot_layout_table_get_lookup_count (hb_face_t *face,
         hb_tag_t table_tag);


void
hb_ot_layout_collect_lookups (hb_face_t *face,
         hb_tag_t table_tag,
         const hb_tag_t *scripts,
         const hb_tag_t *languages,
         const hb_tag_t *features,
         hb_set_t *lookup_indexes );

void
hb_ot_layout_lookup_collect_glyphs (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int lookup_index,
        hb_set_t *glyphs_before,
        hb_set_t *glyphs_input,
        hb_set_t *glyphs_after,
        hb_set_t *glyphs_output );
# 244 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_substitution (hb_face_t *face);

hb_bool_t
hb_ot_layout_lookup_would_substitute (hb_face_t *face,
          unsigned int lookup_index,
          const hb_codepoint_t *glyphs,
          unsigned int glyphs_length,
          hb_bool_t zero_context);

void
hb_ot_layout_lookup_substitute_closure (hb_face_t *face,
            unsigned int lookup_index,
            hb_set_t *glyphs
                                     );
# 277 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_positioning (hb_face_t *face);
# 291 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_get_size_params (hb_face_t *face,
         unsigned int *design_size,
         unsigned int *subfamily_id,
         unsigned int *subfamily_name_id,
         unsigned int *range_start,
         unsigned int *range_end );


}
# 35 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-shape.h"
extern "C" {


void
hb_ot_shape_glyphs_closure (hb_font_t *font,
       hb_buffer_t *buffer,
       const hb_feature_t *features,
       unsigned int num_features,
       hb_set_t *glyphs);

void
hb_ot_shape_plan_collect_lookups (hb_shape_plan_t *shape_plan,
      hb_tag_t table_tag,
      hb_set_t *lookup_indexes );

}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2

extern "C" {

}
# 40 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 1 3 4
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 212 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4

extern "C" {






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitflags.h" 1 3 4
# 42 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 1 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\endian.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\typesizes.h" 1 3 4
# 122 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap-16.h" 1 3 4
# 35 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 65 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 95 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 235 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 305 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;

typedef __caddr_t caddr_t;







typedef __key_t key_t;
# 135 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 57 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __clock_t clock_t;



# 73 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __time_t time_t;



# 91 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __timer_t timer_t;
# 136 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 150 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 203 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 222 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\select.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 1 3 4
# 22 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 120 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef long int __fd_mask;
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern "C" {
# 106 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
}
# 223 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 58 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
}
# 226 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 265 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;

    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 274 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


}
# 315 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 620 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 812 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 899 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdlib-float.h" 1 3 4
# 956 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 968 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
}
# 44 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 147 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 45 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern "C" {




# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 166 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 234 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 261 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}
# 46 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 47 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 1 3 4
# 29 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 1 3 4
# 15 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 16 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 1 3 4
# 82 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 49 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 40 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  __off64_t _offset;
# 302 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 464 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 526 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
}
# 75 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 108 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdio_lim.h" 1 3 4
# 165 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 205 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 649 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (const char *__s);






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 1 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 873 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 943 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
}
# 53 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\linux\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno-base.h" 1 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno.h" 2 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm\\errno.h" 2 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\linux\\errno.h" 2 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 2 3 4
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 68 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
typedef int error_t;
# 54 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 55 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 181 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename Type>
static inline Type MIN (const Type &a, const Type &b) { return a < b ? a : b; }


template <typename Type>
static inline Type MAX (const Type &a, const Type &b) { return a > b ? a : b; }

static inline unsigned int DIV_CEIL (const unsigned int a, unsigned int b)
{ return (a + (b - 1)) / b; }



template <typename Type, unsigned int n>
static inline unsigned int ARRAY_LENGTH (const Type (&)[n]) { return n; }
# 213 "../../../libs/harfbuzz-ng/src/hb-private.hh"
__attribute__((unused)) typedef int _static_assert_on_line_213_failed[(((sizeof (int8_t) == 1)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_214_failed[(((sizeof (uint8_t) == 1)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_215_failed[(((sizeof (int16_t) == 2)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_216_failed[(((sizeof (uint16_t) == 2)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_217_failed[(((sizeof (int32_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_218_failed[(((sizeof (uint32_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_219_failed[(((sizeof (int64_t) == 8)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_220_failed[(((sizeof (uint64_t) == 8)))?1:-1];

__attribute__((unused)) typedef int _static_assert_on_line_222_failed[(((sizeof (hb_codepoint_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_223_failed[(((sizeof (hb_position_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_224_failed[(((sizeof (hb_mask_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_225_failed[(((sizeof (hb_var_int_t) == 4)))?1:-1];
# 258 "../../../libs/harfbuzz-ng/src/hb-private.hh"
struct _hb_void_t {};
typedef const _hb_void_t &hb_void_t;



static inline __attribute__((const)) unsigned int
_hb_popcount32 (uint32_t mask)
{

  return __builtin_popcount (mask);







}


static inline __attribute__((const)) unsigned int
_hb_bit_storage (unsigned int number)
{



  unsigned int n_bits = 0;
  while (number) {
    n_bits++;
    number >>= 1;
  }
  return n_bits;

}


static inline __attribute__((const)) unsigned int
_hb_ctz (unsigned int number)
{



  unsigned int n_bits = 0;
  if ((!number)) return 0;
  while (!(number & 1)) {
    n_bits++;
    number >>= 1;
  }
  return n_bits;

}

static inline bool
_hb_unsigned_int_mul_overflows (unsigned int count, unsigned int size)
{
  return (size > 0) && (count >= ((unsigned int) -1) / size);
}



typedef int (*hb_compare_func_t) (const void *, const void *);
# 327 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename Type, unsigned int StaticSize=16>
struct hb_prealloced_array_t
{
  unsigned int len;
  unsigned int allocated;
  Type *array;
  Type static_array[StaticSize];

  void init (void) { memset (this, 0, sizeof (*this)); }

  inline Type& operator [] (unsigned int i) { return array[i]; }
  inline const Type& operator [] (unsigned int i) const { return array[i]; }

  inline Type *push (void)
  {
    if (!array) {
      array = static_array;
      allocated = ARRAY_LENGTH (static_array);
    }
    if ((len < allocated))
      return &array[len++];


    unsigned int new_allocated = allocated + (allocated >> 1) + 8;
    Type *new_array = __null;

    if (array == static_array) {
      new_array = (Type *) calloc (new_allocated, sizeof (Type));
      if (new_array)
        memcpy (new_array, array, len * sizeof (Type));
    } else {
      bool overflows = (new_allocated < allocated) || _hb_unsigned_int_mul_overflows (new_allocated, sizeof (Type));
      if ((!overflows)) {
 new_array = (Type *) realloc (array, new_allocated * sizeof (Type));
      }
    }

    if ((!new_array))
      return __null;

    array = new_array;
    allocated = new_allocated;
    return &array[len++];
  }

  inline void pop (void)
  {
    len--;
  }

  inline void remove (unsigned int i)
  {
     if ((i >= len))
       return;
     memmove (static_cast<void *> (&array[i]),
       static_cast<void *> (&array[i + 1]),
       (len - i - 1) * sizeof (Type));
     len--;
  }

  inline void shrink (unsigned int l)
  {
     if (l < len)
       len = l;
  }

  template <typename T>
  inline Type *find (T v) {
    for (unsigned int i = 0; i < len; i++)
      if (array[i] == v)
 return &array[i];
    return __null;
  }
  template <typename T>
  inline const Type *find (T v) const {
    for (unsigned int i = 0; i < len; i++)
      if (array[i] == v)
 return &array[i];
    return __null;
  }

  inline void qsort (void)
  {
    ::qsort (array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  inline void qsort (unsigned int start, unsigned int end)
  {
    ::qsort (array + start, end - start, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  template <typename T>
  inline Type *bsearch (T *key)
  {
    return (Type *) ::bsearch (key, array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }
  template <typename T>
  inline const Type *bsearch (T *key) const
  {
    return (const Type *) ::bsearch (key, array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  inline void finish (void)
  {
    if (array != static_array)
      free (array);
    array = __null;
    allocated = len = 0;
  }
};

template <typename Type>
struct hb_auto_array_t : hb_prealloced_array_t <Type>
{
  hb_auto_array_t (void) { hb_prealloced_array_t<Type>::init (); }
  ~hb_auto_array_t (void) { hb_prealloced_array_t<Type>::finish (); }
};



template <typename item_t, typename lock_t>
struct hb_lockable_set_t
{
  hb_prealloced_array_t <item_t, 2> items;

  inline void init (void) { items.init (); }

  template <typename T>
  inline item_t *replace_or_insert (T v, lock_t &l, bool replace)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item) {
      if (replace) {
 item_t old = *item;
 *item = v;
 l.unlock ();
 old.finish ();
      }
      else {
        item = __null;
 l.unlock ();
      }
    } else {
      item = items.push ();
      if ((item))
 *item = v;
      l.unlock ();
    }
    return item;
  }

  template <typename T>
  inline void remove (T v, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item) {
      item_t old = *item;
      *item = items[items.len - 1];
      items.pop ();
      l.unlock ();
      old.finish ();
    } else {
      l.unlock ();
    }
  }

  template <typename T>
  inline bool find (T v, item_t *i, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item)
      *i = *item;
    l.unlock ();
    return !!item;
  }

  template <typename T>
  inline item_t *find_or_insert (T v, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (!item) {
      item = items.push ();
      if ((item))
        *item = v;
    }
    l.unlock ();
    return item;
  }

  inline void finish (lock_t &l)
  {
    if (!items.len) {

      items.finish ();
      return;
    }
    l.lock ();
    while (items.len) {
      item_t old = items[items.len - 1];
 items.pop ();
 l.unlock ();
 old.finish ();
 l.lock ();
    }
    items.finish ();
    l.unlock ();
  }

};




static inline bool ISALPHA (unsigned char c)
{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }
static inline bool ISALNUM (unsigned char c)
{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'); }
static inline bool ISSPACE (unsigned char c)
{ return c == ' ' || c =='\f'|| c =='\n'|| c =='\r'|| c =='\t'|| c =='\v'; }
static inline unsigned char TOUPPER (unsigned char c)
{ return (c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c; }
static inline unsigned char TOLOWER (unsigned char c)
{ return (c >= 'A' && c <= 'Z') ? c - 'A' + 'a' : c; }
# 576 "../../../libs/harfbuzz-ng/src/hb-private.hh"
static inline bool
_hb_debug (unsigned int level,
    unsigned int max_level)
{
  return level < max_level;
}




template <int max_level> static inline void
_hb_debug_msg_va (const char *what,
    const void *obj,
    const char *func,
    bool indented,
    unsigned int level,
    int level_dir,
    const char *message,
    va_list ap) __attribute__((__format__ (__printf__, 7, 0)));
template <int max_level> static inline void
_hb_debug_msg_va (const char *what,
    const void *obj,
    const char *func,
    bool indented,
    unsigned int level,
    int level_dir,
    const char *message,
    va_list ap)
{
  if (!_hb_debug (level, max_level))
    return;

  fprintf (stderr, "%-10s", what ? what : "");

  if (obj)
    fprintf (stderr, "(%0*lx) ", (unsigned int) (2 * sizeof (void *)), (unsigned long) obj);
  else
    fprintf (stderr, " %*s  ", (unsigned int) (2 * sizeof (void *)), "");

  if (indented) {







    static const char bars[] = "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202";
    fprintf (stderr, "%2u %s" "\342\224\234" "%s",
      level,
      bars + sizeof (bars) - 1 - MIN ((unsigned int) sizeof (bars), (unsigned int) (sizeof ("\342\224\202") - 1) * level),
      level_dir ? (level_dir > 0 ? "\342\225\256" : "\342\225\257") : "\342\225\264");
  } else
    fprintf (stderr, "   " "\342\224\234" "\342\225\264");

  if (func)
  {
    unsigned int func_len = strlen (func);


    if (0 == strncmp (func, "typename ", 9))
      func += 9;

    const char *space = strchr (func, ' ');
    if (space)
      func = space + 1;

    const char *paren = strchr (func, '(');
    if (paren)
      func_len = paren - func;

    fprintf (stderr, "%.*s: ", func_len, func);
  }

  if (message)
    vfprintf (stderr, message, ap);

  fprintf (stderr, "\n");
}
template <> inline void
_hb_debug_msg_va<0> (const char *what __attribute__((unused)),
       const void *obj __attribute__((unused)),
       const char *func __attribute__((unused)),
       bool indented __attribute__((unused)),
       unsigned int level __attribute__((unused)),
       int level_dir __attribute__((unused)),
       const char *message __attribute__((unused)),
       va_list ap __attribute__((unused))) {}

template <int max_level> static inline void
_hb_debug_msg (const char *what,
        const void *obj,
        const char *func,
        bool indented,
        unsigned int level,
        int level_dir,
        const char *message,
        ...) __attribute__((__format__ (__printf__, 7, 8)));
template <int max_level> static inline void
_hb_debug_msg (const char *what,
        const void *obj,
        const char *func,
        bool indented,
        unsigned int level,
        int level_dir,
        const char *message,
        ...)
{
  va_list ap;
  __builtin_va_start(ap,message);
  _hb_debug_msg_va<max_level> (what, obj, func, indented, level, level_dir, message, ap);
  __builtin_va_end(ap);
}
template <> inline void
_hb_debug_msg<0> (const char *what __attribute__((unused)),
    const void *obj __attribute__((unused)),
    const char *func __attribute__((unused)),
    bool indented __attribute__((unused)),
    unsigned int level __attribute__((unused)),
    int level_dir __attribute__((unused)),
    const char *message __attribute__((unused)),
    ...) __attribute__((__format__ (__printf__, 7, 8)));
template <> inline void
_hb_debug_msg<0> (const char *what __attribute__((unused)),
    const void *obj __attribute__((unused)),
    const char *func __attribute__((unused)),
    bool indented __attribute__((unused)),
    unsigned int level __attribute__((unused)),
    int level_dir __attribute__((unused)),
    const char *message __attribute__((unused)),
    ...) {}
# 717 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename T>
struct hb_printer_t {
  const char *print (const T&) { return "something"; }
};

template <>
struct hb_printer_t<bool> {
  const char *print (bool v) { return v ? "true" : "false"; }
};

template <>
struct hb_printer_t<hb_void_t> {
  const char *print (hb_void_t) { return ""; }
};






template <typename T>
static inline void _hb_warn_no_return (bool returned)
{
  if ((!returned)) {
    fprintf (stderr, "OUCH, returned with no call to TRACE_RETURN.  This is a bug, please report.\n");
  }
}
template <>
           inline void _hb_warn_no_return<hb_void_t> (bool returned __attribute__((unused)))
{}

template <int max_level, typename ret_t>
struct hb_auto_trace_t {
  explicit inline hb_auto_trace_t (unsigned int *plevel_,
       const char *what_,
       const void *obj_,
       const char *func,
       const char *message,
       ...) : plevel (plevel_), what (what_), obj (obj_), returned (false)
  {
    if (plevel) ++*plevel;

    va_list ap;
    __builtin_va_start(ap,message);
    _hb_debug_msg_va<max_level> (what, obj, func, true, plevel ? *plevel : 0, +1, message, ap);
    __builtin_va_end(ap);
  }
  inline ~hb_auto_trace_t (void)
  {
    _hb_warn_no_return<ret_t> (returned);
    if (!returned) {
      _hb_debug_msg<max_level> (what, obj, __null, true, plevel ? *plevel : 1, -1, " ");
    }
    if (plevel) --*plevel;
  }

  inline ret_t ret (ret_t v, unsigned int line = 0)
  {
    if ((returned)) {
      fprintf (stderr, "OUCH, double calls to TRACE_RETURN.  This is a bug, please report.\n");
      return v;
    }

    _hb_debug_msg<max_level> (what, obj, __null, true, plevel ? *plevel : 1, -1,
         "return %s (line %d)",
         hb_printer_t<ret_t>().print (v), line);
    if (plevel) --*plevel;
    plevel = __null;
    returned = true;
    return v;
  }

  private:
  unsigned int *plevel;
  const char *what;
  const void *obj;
  bool returned;
};
template <typename ret_t>
struct hb_auto_trace_t<0, ret_t> {
  explicit inline hb_auto_trace_t (unsigned int *plevel_ __attribute__((unused)),
       const char *what __attribute__((unused)),
       const void *obj __attribute__((unused)),
       const char *func __attribute__((unused)),
       const char *message __attribute__((unused)),
       ...) {}

  inline ret_t ret (ret_t v, unsigned int line __attribute__((unused)) = 0) { return v; }
};





template <typename T> class hb_assert_unsigned_t;
template <> class hb_assert_unsigned_t<unsigned char> {};
template <> class hb_assert_unsigned_t<unsigned short> {};
template <> class hb_assert_unsigned_t<unsigned int> {};
template <> class hb_assert_unsigned_t<unsigned long> {};

template <typename T> static inline bool
hb_in_range (T u, T lo, T hi)
{





  __attribute__((unused)) typedef int _static_assert_on_line_825_failed[(((sizeof (hb_assert_unsigned_t<T>) >= 0)))?1:-1];



  return (T)(u - lo) <= (T)(hi - lo);
}

template <typename T> static inline bool
hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2)
{
  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2);
}

template <typename T> static inline bool
hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2, T lo3, T hi3)
{
  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2) || hb_in_range (u, lo3, hi3);
}
# 853 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename T, typename T2> static inline void
hb_bubble_sort (T *array, unsigned int len, int(*compar)(const T *, const T *), T2 *array2)
{
  if ((!len))
    return;

  unsigned int k = len - 1;
  do {
    unsigned int new_k = 0;

    for (unsigned int j = 0; j < k; j++)
      if (compar (&array[j], &array[j+1]) > 0)
      {
        {
   T t;
   t = array[j];
   array[j] = array[j + 1];
   array[j + 1] = t;
 }
        if (array2)
        {
   T2 t;
   t = array2[j];
   array2[j] = array2[j + 1];
   array2[j + 1] = t;
 }

 new_k = j;
      }
    k = new_k;
  } while (k);
}

template <typename T> static inline void
hb_bubble_sort (T *array, unsigned int len, int(*compar)(const T *, const T *))
{
  hb_bubble_sort (array, len, compar, (int *) __null);
}

static inline hb_bool_t
hb_codepoint_parse (const char *s, unsigned int len, int base, hb_codepoint_t *out)
{

  char buf[64];
  len = MIN (ARRAY_LENGTH (buf) - 1, len);
  strncpy (buf, s, len);
  buf[len] = '\0';

  char *end;
  (*__errno_location ()) = 0;
  unsigned long v = strtoul (buf, &end, base);
  if ((*__errno_location ())) return false;
  if (*end) return false;
  *out = v;
  return true;
}




struct hb_options_t
{
  unsigned int initialized : 1;
  unsigned int uniscribe_bug_compatible : 1;
};

union hb_options_union_t {
  unsigned int i;
  hb_options_t opts;
};
__attribute__((unused)) typedef int _static_assert_on_line_923_failed[(((sizeof (int) == sizeof (hb_options_union_t))))?1:-1];

__attribute__((__visibility__("hidden"))) void
_hb_options_init (void);

extern __attribute__((__visibility__("hidden"))) hb_options_union_t _hb_options;

static inline hb_options_t
hb_options (void)
{
  if ((!_hb_options.i))
    _hb_options_init ();

  return _hb_options.opts;
}
# 31 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh" 2


# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-shape-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-object-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-atomic-private.hh" 1
# 125 "../../../libs/harfbuzz-ng/src/hb-atomic-private.hh"
typedef int hb_atomic_int_t;
# 38 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh" 1
# 105 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh"
typedef int hb_mutex_impl_t;
# 116 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh"
struct hb_mutex_t
{


  hb_mutex_impl_t m;

  inline void init (void) { do {} while (0); }
  inline void lock (void) { do {} while (0); }
  inline void unlock (void) { do {} while (0); }
  inline void finish (void) { do {} while (0); }
};
# 39 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 2
# 52 "../../../libs/harfbuzz-ng/src/hb-object-private.hh"
struct hb_reference_count_t
{
  hb_atomic_int_t ref_count;

  inline void init (int v) { ref_count = v; }
  inline int inc (void) { return (((const_cast<hb_atomic_int_t &> (ref_count)) += (1)) - (1)); }
  inline int dec (void) { return (((const_cast<hb_atomic_int_t &> (ref_count)) += (-1)) - (-1)); }
  inline void finish (void) { ref_count = ((hb_atomic_int_t) -1); }

  inline bool is_invalid (void) const { return ref_count == ((hb_atomic_int_t) -1); }

};





struct hb_user_data_array_t
{
  struct hb_user_data_item_t {
    hb_user_data_key_t *key;
    void *data;
    hb_destroy_func_t destroy;

    inline bool operator == (hb_user_data_key_t *other_key) const { return key == other_key; }
    inline bool operator == (hb_user_data_item_t &other) const { return key == other.key; }

    void finish (void) { if (destroy) destroy (data); }
  };

  hb_mutex_t lock;
  hb_lockable_set_t<hb_user_data_item_t, hb_mutex_t> items;

  inline void init (void) { lock.init (); items.init (); }

  __attribute__((__visibility__("hidden"))) bool set (hb_user_data_key_t *key,
   void * data,
   hb_destroy_func_t destroy,
   hb_bool_t replace);

  __attribute__((__visibility__("hidden"))) void *get (hb_user_data_key_t *key);

  inline void finish (void) { items.finish (lock); lock.finish (); }
};




struct hb_object_header_t
{
  hb_reference_count_t ref_count;
  hb_user_data_array_t user_data;



  private:
  __attribute__((unused)) inline void _static_assertion_on_line_108 (void) const { do { typedef __typeof__(*this) _type_108; union _type__type_108_on_line_108_is_not_POD { _type_108 instance; }; } while (0); };
};




template <typename Type>
static inline void hb_object_trace (const Type *obj, const char *function)
{
  _hb_debug_msg<(0 +0)> ("OBJECT", ((void *) obj), __null, false, 0, 0, "%s refcount=%d", function, obj ? obj->header.ref_count.ref_count : 0)


                                                ;
}

template <typename Type>
static inline Type *hb_object_create (void)
{
  Type *obj = (Type *) calloc (1, sizeof (Type));

  if ((!obj))
    return obj;

  hb_object_init (obj);
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  return obj;
}
template <typename Type>
static inline void hb_object_init (Type *obj)
{
  obj->header.ref_count.init (1);
  obj->header.user_data.init ();
}
template <typename Type>
static inline bool hb_object_is_inert (const Type *obj)
{
  return (obj->header.ref_count.is_invalid ());
}
template <typename Type>
static inline Type *hb_object_reference (Type *obj)
{
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  if ((!obj || hb_object_is_inert (obj)))
    return obj;
  obj->header.ref_count.inc ();
  return obj;
}
template <typename Type>
static inline bool hb_object_destroy (Type *obj)
{
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  if ((!obj || hb_object_is_inert (obj)))
    return false;
  if (obj->header.ref_count.dec () != 1)
    return false;

  obj->header.ref_count.finish ();
  obj->header.user_data.finish ();
  return true;
}
template <typename Type>
static inline bool hb_object_set_user_data (Type *obj,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace)
{
  if ((!obj || hb_object_is_inert (obj)))
    return false;
  return obj->header.user_data.set (key, data, destroy, replace);
}

template <typename Type>
static inline void *hb_object_get_user_data (Type *obj,
          hb_user_data_key_t *key)
{
  if ((!obj || hb_object_is_inert (obj)))
    return __null;
  return obj->header.user_data.get (key);
}
# 35 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh"
extern __attribute__((__visibility__("hidden"))) const uint8_t _hb_modified_combining_class[256];
# 64 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh"
struct hb_unicode_funcs_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_66 (void) const { do { typedef __typeof__(*this) _type_66; union _type__type_66_on_line_66_is_not_POD { _type_66 instance; }; } while (0); };

  hb_unicode_funcs_t *parent;

  bool immutable;



inline hb_unicode_combining_class_t combining_class (hb_codepoint_t unicode) { return func.combining_class (this, unicode, user_data.combining_class); } inline unsigned int eastasian_width (hb_codepoint_t unicode) { return func.eastasian_width (this, unicode, user_data.eastasian_width); } inline hb_unicode_general_category_t general_category (hb_codepoint_t unicode) { return func.general_category (this, unicode, user_data.general_category); } inline hb_codepoint_t mirroring (hb_codepoint_t unicode) { return func.mirroring (this, unicode, user_data.mirroring); } inline hb_script_t script (hb_codepoint_t unicode) { return func.script (this, unicode, user_data.script); }


  inline hb_bool_t compose (hb_codepoint_t a, hb_codepoint_t b,
       hb_codepoint_t *ab)
  {
    *ab = 0;
    if ((!a || !b)) return false;
    return func.compose (this, a, b, ab, user_data.compose);
  }

  inline hb_bool_t decompose (hb_codepoint_t ab,
         hb_codepoint_t *a, hb_codepoint_t *b)
  {
    *a = ab; *b = 0;
    return func.decompose (this, ab, a, b, user_data.decompose);
  }

  inline unsigned int decompose_compatibility (hb_codepoint_t u,
            hb_codepoint_t *decomposed)
  {
    unsigned int ret = func.decompose_compatibility (this, u, decomposed, user_data.decompose_compatibility);
    if (ret == 1 && u == decomposed[0]) {
      decomposed[0] = 0;
      return 0;
    }
    decomposed[ret] = 0;
    return ret;
  }


  inline unsigned int
  modified_combining_class (hb_codepoint_t unicode)
  {

    if ((unicode == 0x1037u)) unicode = 0x103Au;



    if ((unicode == 0x1A60u)) return 254;



    if ((unicode == 0x0FC6u)) return 254;

    return _hb_modified_combining_class[combining_class (unicode)];
  }

  static inline hb_bool_t
  is_variation_selector (hb_codepoint_t unicode)
  {


    return (hb_in_ranges (unicode, 0xFE00u, 0xFE0Fu, 0xE0100u, 0xE01EFu))

                           ;
  }
# 168 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh"
  static inline hb_bool_t
  is_default_ignorable (hb_codepoint_t ch)
  {
    hb_codepoint_t plane = ch >> 16;
    if ((plane == 0))
    {

      hb_codepoint_t page = ch >> 8;
      switch (page) {
 case 0x00: return (ch == 0x00ADu);
 case 0x03: return (ch == 0x034Fu);
 case 0x06: return (ch == 0x061Cu);
 case 0x17: return hb_in_range (ch, 0x17B4u, 0x17B5u);
 case 0x18: return hb_in_range (ch, 0x180Bu, 0x180Eu);
 case 0x20: return hb_in_ranges (ch, 0x200Bu, 0x200Fu,
           0x202Au, 0x202Eu,
           0x2060u, 0x206Fu);
 case 0xFE: return hb_in_range (ch, 0xFE00u, 0xFE0Fu) || ch == 0xFEFFu;
 case 0xFF: return hb_in_range (ch, 0xFFF0u, 0xFFF8u);
 default: return false;
      }
    }
    else
    {

      switch (plane) {
 case 0x01: return hb_in_ranges (ch, 0x1BCA0u, 0x1BCA3u,
         0x1D173u, 0x1D17Au);
 case 0x0E: return hb_in_range (ch, 0xE0000u, 0xE0FFFu);
 default: return false;
      }
    }
  }


  struct {

    hb_unicode_combining_class_func_t combining_class; hb_unicode_eastasian_width_func_t eastasian_width; hb_unicode_general_category_func_t general_category; hb_unicode_mirroring_func_t mirroring; hb_unicode_script_func_t script; hb_unicode_compose_func_t compose; hb_unicode_decompose_func_t decompose; hb_unicode_decompose_compatibility_func_t decompose_compatibility;

  } func;

  struct {

    void *combining_class; void *eastasian_width; void *general_category; void *mirroring; void *script; void *compose; void *decompose; void *decompose_compatibility;

  } user_data;

  struct {

    hb_destroy_func_t combining_class; hb_destroy_func_t eastasian_width; hb_destroy_func_t general_category; hb_destroy_func_t mirroring; hb_destroy_func_t script; hb_destroy_func_t compose; hb_destroy_func_t decompose; hb_destroy_func_t decompose_compatibility;

  } destroy;
};


extern __attribute__((__visibility__("hidden"))) const hb_unicode_funcs_t _hb_unicode_funcs_nil;
# 36 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh" 2


__attribute__((unused)) typedef int _static_assert_on_line_38_failed[(((sizeof (hb_glyph_info_t) == 20)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_39_failed[(((sizeof (hb_glyph_info_t) == sizeof (hb_glyph_position_t))))?1:-1];






struct hb_buffer_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_48 (void) const { do { typedef __typeof__(*this) _type_48; union _type__type_48_on_line_48_is_not_POD { _type_48 instance; }; } while (0); };


  hb_unicode_funcs_t *unicode;
  hb_buffer_flags_t flags;
  hb_codepoint_t replacement;


  hb_buffer_content_type_t content_type;
  hb_segment_properties_t props;

  bool in_error;
  bool have_output;
  bool have_positions;

  unsigned int idx;
  unsigned int len;
  unsigned int out_len;

  unsigned int allocated;
  hb_glyph_info_t *info;
  hb_glyph_info_t *out_info;
  hb_glyph_position_t *pos;

  inline hb_glyph_info_t &cur (unsigned int i = 0) { return info[idx + i]; }
  inline hb_glyph_info_t cur (unsigned int i = 0) const { return info[idx + i]; }

  inline hb_glyph_position_t &cur_pos (unsigned int i = 0) { return pos[idx + i]; }
  inline hb_glyph_position_t cur_pos (unsigned int i = 0) const { return pos[idx + i]; }

  inline hb_glyph_info_t &prev (void) { return out_info[out_len - 1]; }
  inline hb_glyph_info_t prev (void) const { return info[out_len - 1]; }

  inline bool has_separate_output (void) const { return info != out_info; }

  unsigned int serial;


  uint8_t allocated_var_bytes[8];
  const char *allocated_var_owner[8];




  static const unsigned int CONTEXT_LENGTH = 5;
  hb_codepoint_t context[2][CONTEXT_LENGTH];
  unsigned int context_len[2];




  __attribute__((__visibility__("hidden"))) void reset (void);
  __attribute__((__visibility__("hidden"))) void clear (void);

  inline unsigned int backtrack_len (void) const
  { return have_output? out_len : idx; }
  inline unsigned int lookahead_len (void) const
  { return len - idx; }
  inline unsigned int next_serial (void) { return serial++; }

  __attribute__((__visibility__("hidden"))) void allocate_var (unsigned int byte_i, unsigned int count, const char *owner);
  __attribute__((__visibility__("hidden"))) void deallocate_var (unsigned int byte_i, unsigned int count, const char *owner);
  __attribute__((__visibility__("hidden"))) void assert_var (unsigned int byte_i, unsigned int count, const char *owner);
  __attribute__((__visibility__("hidden"))) void deallocate_var_all (void);

  __attribute__((__visibility__("hidden"))) void add (hb_codepoint_t codepoint,
   unsigned int cluster);
  __attribute__((__visibility__("hidden"))) void add_info (const hb_glyph_info_t &glyph_info);

  __attribute__((__visibility__("hidden"))) void reverse_range (unsigned int start, unsigned int end);
  __attribute__((__visibility__("hidden"))) void reverse (void);
  __attribute__((__visibility__("hidden"))) void reverse_clusters (void);
  __attribute__((__visibility__("hidden"))) void guess_segment_properties (void);

  __attribute__((__visibility__("hidden"))) void swap_buffers (void);
  __attribute__((__visibility__("hidden"))) void remove_output (void);
  __attribute__((__visibility__("hidden"))) void clear_output (void);
  __attribute__((__visibility__("hidden"))) void clear_positions (void);

  __attribute__((__visibility__("hidden"))) void replace_glyphs (unsigned int num_in,
       unsigned int num_out,
       const hb_codepoint_t *glyph_data);

  __attribute__((__visibility__("hidden"))) void replace_glyph (hb_codepoint_t glyph_index);

  __attribute__((__visibility__("hidden"))) void output_glyph (hb_codepoint_t glyph_index);
  __attribute__((__visibility__("hidden"))) void output_info (const hb_glyph_info_t &glyph_info);

  __attribute__((__visibility__("hidden"))) void copy_glyph (void);
  __attribute__((__visibility__("hidden"))) bool move_to (unsigned int i);


  inline void
  next_glyph (void)
  {
    if (have_output)
    {
      if ((out_info != info || out_len != idx)) {
 if ((!make_room_for (1, 1))) return;
 out_info[out_len] = info[idx];
      }
      out_len++;
    }

    idx++;
  }


  inline void skip_glyph (void) { idx++; }

  inline void reset_masks (hb_mask_t mask)
  {
    for (unsigned int j = 0; j < len; j++)
      info[j].mask = mask;
  }
  inline void add_masks (hb_mask_t mask)
  {
    for (unsigned int j = 0; j < len; j++)
      info[j].mask |= mask;
  }
  __attribute__((__visibility__("hidden"))) void set_masks (hb_mask_t value,
         hb_mask_t mask,
         unsigned int cluster_start,
         unsigned int cluster_end);

  __attribute__((__visibility__("hidden"))) void merge_clusters (unsigned int start,
       unsigned int end);
  __attribute__((__visibility__("hidden"))) void merge_out_clusters (unsigned int start,
           unsigned int end);


  __attribute__((__visibility__("hidden"))) bool enlarge (unsigned int size);

  inline bool ensure (unsigned int size)
  { return (!size || size < allocated) ? true : enlarge (size); }

  inline bool ensure_inplace (unsigned int size)
  { return (!size || size < allocated); }

  __attribute__((__visibility__("hidden"))) bool make_room_for (unsigned int num_in, unsigned int num_out);
  __attribute__((__visibility__("hidden"))) bool shift_forward (unsigned int count);

  typedef long scratch_buffer_t;
  __attribute__((__visibility__("hidden"))) scratch_buffer_t *get_scratch_buffer (unsigned int *size);

  inline void clear_context (unsigned int side) { context_len[side] = 0; }
};
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh" 2


struct hb_ot_shape_plan_t;

static const hb_tag_t table_tags[2] = {((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))), ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S'))))};

struct hb_ot_map_t
{
  friend struct hb_ot_map_builder_t;

  public:

  struct feature_map_t {
    hb_tag_t tag;
    unsigned int index[2];
    unsigned int stage[2];
    unsigned int shift;
    hb_mask_t mask;
    hb_mask_t _1_mask;
    unsigned int needs_fallback : 1;
    unsigned int auto_zwj : 1;

    static int cmp (const feature_map_t *a, const feature_map_t *b)
    { return a->tag < b->tag ? -1 : a->tag > b->tag ? 1 : 0; }
  };

  struct lookup_map_t {
    unsigned short index;
    unsigned short auto_zwj : 1;
    hb_mask_t mask;

    static int cmp (const lookup_map_t *a, const lookup_map_t *b)
    { return a->index < b->index ? -1 : a->index > b->index ? 1 : 0; }
  };

  typedef void (*pause_func_t) (const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer);

  struct stage_map_t {
    unsigned int last_lookup;
    pause_func_t pause_func;
  };


  hb_ot_map_t (void) { memset (this, 0, sizeof (*this)); }

  inline hb_mask_t get_global_mask (void) const { return global_mask; }

  inline hb_mask_t get_mask (hb_tag_t feature_tag, unsigned int *shift = __null) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    if (shift) *shift = map ? map->shift : 0;
    return map ? map->mask : 0;
  }

  inline bool needs_fallback (hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->needs_fallback : false;
  }

  inline hb_mask_t get_1_mask (hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->_1_mask : 0;
  }

  inline unsigned int get_feature_index (unsigned int table_index, hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->index[table_index] : 0xFFFFu;
  }

  inline unsigned int get_feature_stage (unsigned int table_index, hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->stage[table_index] : (unsigned int) -1;
  }

  inline void get_stage_lookups (unsigned int table_index, unsigned int stage,
     const struct lookup_map_t **plookups, unsigned int *lookup_count) const {
    if ((stage == (unsigned int) -1)) {
      *plookups = __null;
      *lookup_count = 0;
      return;
    }
    ((stage <= stages[table_index].len) ? static_cast<void> (0) : __assert_fail ("stage <= stages[table_index].len", "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh", 113, __PRETTY_FUNCTION__));
    unsigned int start = stage ? stages[table_index][stage - 1].last_lookup : 0;
    unsigned int end = stage < stages[table_index].len ? stages[table_index][stage].last_lookup : lookups[table_index].len;
    *plookups = &lookups[table_index][start];
    *lookup_count = end - start;
  }

  __attribute__((__visibility__("hidden"))) void collect_lookups (unsigned int table_index, hb_set_t *lookups) const;
  template <typename Proxy>
  __attribute__((__visibility__("hidden"))) inline void apply (const Proxy &proxy,
     const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;
  __attribute__((__visibility__("hidden"))) void substitute (const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;
  __attribute__((__visibility__("hidden"))) void position (const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;

  inline void finish (void) {
    features.finish ();
    for (unsigned int table_index = 0; table_index < 2; table_index++)
    {
      lookups[table_index].finish ();
      stages[table_index].finish ();
    }
  }

  public:
  hb_tag_t chosen_script[2];
  bool found_script[2];

  private:

  __attribute__((__visibility__("hidden"))) void add_lookups (hb_face_t *face,
    unsigned int table_index,
    unsigned int feature_index,
    hb_mask_t mask,
    bool auto_zwj);

  hb_mask_t global_mask;

  hb_prealloced_array_t<feature_map_t, 8> features;
  hb_prealloced_array_t<lookup_map_t, 32> lookups[2];
  hb_prealloced_array_t<stage_map_t, 4> stages[2];
};

enum hb_ot_map_feature_flags_t {
  F_NONE = 0x0000u,
  F_GLOBAL = 0x0001u,
  F_HAS_FALLBACK = 0x0002u,
  F_MANUAL_ZWJ = 0x0004u
};


static inline hb_ot_map_feature_flags_t
operator | (hb_ot_map_feature_flags_t l, hb_ot_map_feature_flags_t r)
{ return hb_ot_map_feature_flags_t ((unsigned int) l | (unsigned int) r); }
static inline hb_ot_map_feature_flags_t
operator & (hb_ot_map_feature_flags_t l, hb_ot_map_feature_flags_t r)
{ return hb_ot_map_feature_flags_t ((unsigned int) l & (unsigned int) r); }
static inline hb_ot_map_feature_flags_t
operator ~ (hb_ot_map_feature_flags_t r)
{ return hb_ot_map_feature_flags_t (~(unsigned int) r); }
static inline hb_ot_map_feature_flags_t&
operator |= (hb_ot_map_feature_flags_t &l, hb_ot_map_feature_flags_t r)
{ l = l | r; return l; }
static inline hb_ot_map_feature_flags_t&
operator &= (hb_ot_map_feature_flags_t& l, hb_ot_map_feature_flags_t r)
{ l = l & r; return l; }


struct hb_ot_map_builder_t
{
  public:

  __attribute__((__visibility__("hidden"))) hb_ot_map_builder_t (hb_face_t *face_,
       const hb_segment_properties_t *props_);

  __attribute__((__visibility__("hidden"))) void add_feature (hb_tag_t tag, unsigned int value,
    hb_ot_map_feature_flags_t flags);

  inline void add_global_bool_feature (hb_tag_t tag)
  { add_feature (tag, 1, F_GLOBAL); }

  inline void add_gsub_pause (hb_ot_map_t::pause_func_t pause_func)
  { add_pause (0, pause_func); }
  inline void add_gpos_pause (hb_ot_map_t::pause_func_t pause_func)
  { add_pause (1, pause_func); }

  __attribute__((__visibility__("hidden"))) void compile (struct hb_ot_map_t &m);

  inline void finish (void) {
    feature_infos.finish ();
    for (unsigned int table_index = 0; table_index < 2; table_index++)
    {
      stages[table_index].finish ();
    }
  }

  private:

  struct feature_info_t {
    hb_tag_t tag;
    unsigned int seq;
    unsigned int max_value;
    hb_ot_map_feature_flags_t flags;
    unsigned int default_value;
    unsigned int stage[2];

    static int cmp (const feature_info_t *a, const feature_info_t *b)
    { return (a->tag != b->tag) ? (a->tag < b->tag ? -1 : 1) : (a->seq < b->seq ? -1 : 1); }
  };

  struct stage_info_t {
    unsigned int index;
    hb_ot_map_t::pause_func_t pause_func;
  };

  __attribute__((__visibility__("hidden"))) void add_pause (unsigned int table_index, hb_ot_map_t::pause_func_t pause_func);

  public:

  hb_face_t *face;
  hb_segment_properties_t props;

  hb_tag_t chosen_script[2];
  bool found_script[2];
  unsigned int script_index[2], language_index[2];

  private:

  unsigned int current_stage[2];
  hb_prealloced_array_t<feature_info_t, 32> feature_infos;
  hb_prealloced_array_t<stage_info_t, 8> stages[2];
};
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-shape-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-font-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-face-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh"
typedef hb_bool_t hb_shape_func_t (hb_shape_plan_t *shape_plan,
       hb_font_t *font,
       hb_buffer_t *buffer,
       const hb_feature_t *features,
       unsigned int num_features);



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
extern "C" __attribute__((__visibility__("hidden"))) hb_shape_func_t _hb_ot_shape;
# 41 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 2


struct hb_shaper_pair_t {
  char name[16];
  hb_shape_func_t *func;
};

__attribute__((__visibility__("hidden"))) const hb_shaper_pair_t *
_hb_shapers_get (void);



struct hb_shaper_data_t {

# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
void *ot;
# 56 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 2

};
# 36 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh"
struct hb_shape_plan_t
{
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_38 (void) const { do { typedef __typeof__(*this) _type_38; union _type__type_38_on_line_38_is_not_POD { _type_38 instance; }; } while (0); };

  hb_bool_t default_shaper_list;
  hb_face_t *face_unsafe;
  hb_segment_properties_t props;

  hb_shape_func_t *shaper_func;
  const char *shaper_name;

  hb_feature_t *user_features;
  unsigned int num_user_features;

  struct hb_shaper_data_t shaper_data;
};





# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_shape_plan_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_shape_plan_data_t * _hb_ot_shaper_shape_plan_data_create (hb_shape_plan_t *shape_plan , const hb_feature_t *user_features , unsigned int num_user_features); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_shape_plan_data_destroy (struct hb_ot_shaper_shape_plan_data_t *data);
# 58 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh" 2
# 37 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2






struct hb_face_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_45 (void) const { do { typedef __typeof__(*this) _type_45; union _type__type_45_on_line_45_is_not_POD { _type_45 instance; }; } while (0); };

  hb_bool_t immutable;

  hb_reference_table_func_t reference_table_func;
  void *user_data;
  hb_destroy_func_t destroy;

  unsigned int index;
  mutable unsigned int upem;
  mutable unsigned int num_glyphs;

  struct hb_shaper_data_t shaper_data;

  struct plan_node_t {
    hb_shape_plan_t *shape_plan;
    plan_node_t *next;
  } *shape_plans;


  inline hb_blob_t *reference_table (hb_tag_t tag) const
  {
    hb_blob_t *blob;

    if ((!reference_table_func))
      return hb_blob_get_empty ();

    blob = reference_table_func ( const_cast<hb_face_t *> (this), tag, user_data);
    if ((!blob))
      return hb_blob_get_empty ();

    return blob;
  }

  inline __attribute__((pure)) unsigned int get_upem (void) const
  {
    if ((!upem))
      load_upem ();
    return upem;
  }

  inline unsigned int get_num_glyphs (void) const
  {
    if ((num_glyphs == (unsigned int) -1))
      load_num_glyphs ();
    return num_glyphs;
  }

  private:
  __attribute__((__visibility__("hidden"))) void load_upem (void) const;
  __attribute__((__visibility__("hidden"))) void load_num_glyphs (void) const;
};

extern __attribute__((__visibility__("hidden"))) const hb_face_t _hb_face_nil;



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_face_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_face_data_t * _hb_ot_shaper_face_data_create (hb_face_t *face ); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_face_data_destroy (struct hb_ot_shaper_face_data_t *data);
# 103 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2
# 36 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 58 "../../../libs/harfbuzz-ng/src/hb-font-private.hh"
struct hb_font_funcs_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_60 (void) const { do { typedef __typeof__(*this) _type_60; union _type__type_60_on_line_60_is_not_POD { _type_60 instance; }; } while (0); };

  hb_bool_t immutable;



  struct {

    hb_font_get_glyph_func_t glyph; hb_font_get_glyph_h_advance_func_t glyph_h_advance; hb_font_get_glyph_v_advance_func_t glyph_v_advance; hb_font_get_glyph_h_origin_func_t glyph_h_origin; hb_font_get_glyph_v_origin_func_t glyph_v_origin; hb_font_get_glyph_h_kerning_func_t glyph_h_kerning; hb_font_get_glyph_v_kerning_func_t glyph_v_kerning; hb_font_get_glyph_extents_func_t glyph_extents; hb_font_get_glyph_contour_point_func_t glyph_contour_point; hb_font_get_glyph_name_func_t glyph_name; hb_font_get_glyph_from_name_func_t glyph_from_name;

  } get;

  struct {

    void *glyph; void *glyph_h_advance; void *glyph_v_advance; void *glyph_h_origin; void *glyph_v_origin; void *glyph_h_kerning; void *glyph_v_kerning; void *glyph_extents; void *glyph_contour_point; void *glyph_name; void *glyph_from_name;

  } user_data;

  struct {

    hb_destroy_func_t glyph; hb_destroy_func_t glyph_h_advance; hb_destroy_func_t glyph_v_advance; hb_destroy_func_t glyph_h_origin; hb_destroy_func_t glyph_v_origin; hb_destroy_func_t glyph_h_kerning; hb_destroy_func_t glyph_v_kerning; hb_destroy_func_t glyph_extents; hb_destroy_func_t glyph_contour_point; hb_destroy_func_t glyph_name; hb_destroy_func_t glyph_from_name;

  } destroy;
};







struct hb_font_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_93 (void) const { do { typedef __typeof__(*this) _type_93; union _type__type_93_on_line_93_is_not_POD { _type_93 instance; }; } while (0); };

  hb_bool_t immutable;

  hb_font_t *parent;
  hb_face_t *face;

  int x_scale;
  int y_scale;

  unsigned int x_ppem;
  unsigned int y_ppem;

  hb_font_funcs_t *klass;
  void *user_data;
  hb_destroy_func_t destroy;

  struct hb_shaper_data_t shaper_data;



  inline hb_position_t em_scale_x (int16_t v) { return em_scale (v, this->x_scale); }
  inline hb_position_t em_scale_y (int16_t v) { return em_scale (v, this->y_scale); }


  inline hb_position_t parent_scale_x_distance (hb_position_t v) {
    if ((parent && parent->x_scale != x_scale))
      return (hb_position_t) (v * (int64_t) this->x_scale / this->parent->x_scale);
    return v;
  }
  inline hb_position_t parent_scale_y_distance (hb_position_t v) {
    if ((parent && parent->y_scale != y_scale))
      return (hb_position_t) (v * (int64_t) this->y_scale / this->parent->y_scale);
    return v;
  }
  inline hb_position_t parent_scale_x_position (hb_position_t v) {
    return parent_scale_x_distance (v);
  }
  inline hb_position_t parent_scale_y_position (hb_position_t v) {
    return parent_scale_y_distance (v);
  }

  inline void parent_scale_distance (hb_position_t *x, hb_position_t *y) {
    *x = parent_scale_x_distance (*x);
    *y = parent_scale_y_distance (*y);
  }
  inline void parent_scale_position (hb_position_t *x, hb_position_t *y) {
    *x = parent_scale_x_position (*x);
    *y = parent_scale_y_position (*y);
  }




  inline hb_bool_t has_glyph (hb_codepoint_t unicode)
  {
    hb_codepoint_t glyph;
    return get_glyph (unicode, 0, &glyph);
  }

  inline hb_bool_t get_glyph (hb_codepoint_t unicode, hb_codepoint_t variation_selector,
         hb_codepoint_t *glyph)
  {
    *glyph = 0;
    return klass->get.glyph (this, user_data,
        unicode, variation_selector, glyph,
        klass->user_data.glyph);
  }

  inline hb_position_t get_glyph_h_advance (hb_codepoint_t glyph)
  {
    return klass->get.glyph_h_advance (this, user_data,
           glyph,
           klass->user_data.glyph_h_advance);
  }

  inline hb_position_t get_glyph_v_advance (hb_codepoint_t glyph)
  {
    return klass->get.glyph_v_advance (this, user_data,
           glyph,
           klass->user_data.glyph_v_advance);
  }

  inline hb_bool_t get_glyph_h_origin (hb_codepoint_t glyph,
           hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_h_origin (this, user_data,
          glyph, x, y,
          klass->user_data.glyph_h_origin);
  }

  inline hb_bool_t get_glyph_v_origin (hb_codepoint_t glyph,
           hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_v_origin (this, user_data,
          glyph, x, y,
          klass->user_data.glyph_v_origin);
  }

  inline hb_position_t get_glyph_h_kerning (hb_codepoint_t left_glyph, hb_codepoint_t right_glyph)
  {
    return klass->get.glyph_h_kerning (this, user_data,
           left_glyph, right_glyph,
           klass->user_data.glyph_h_kerning);
  }

  inline hb_position_t get_glyph_v_kerning (hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph)
  {
    return klass->get.glyph_v_kerning (this, user_data,
           top_glyph, bottom_glyph,
           klass->user_data.glyph_v_kerning);
  }

  inline hb_bool_t get_glyph_extents (hb_codepoint_t glyph,
          hb_glyph_extents_t *extents)
  {
    memset (extents, 0, sizeof (*extents));
    return klass->get.glyph_extents (this, user_data,
         glyph,
         extents,
         klass->user_data.glyph_extents);
  }

  inline hb_bool_t get_glyph_contour_point (hb_codepoint_t glyph, unsigned int point_index,
         hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_contour_point (this, user_data,
        glyph, point_index,
        x, y,
        klass->user_data.glyph_contour_point);
  }

  inline hb_bool_t get_glyph_name (hb_codepoint_t glyph,
       char *name, unsigned int size)
  {
    if (size) *name = '\0';
    return klass->get.glyph_name (this, user_data,
      glyph,
      name, size,
      klass->user_data.glyph_name);
  }

  inline hb_bool_t get_glyph_from_name (const char *name, int len,
     hb_codepoint_t *glyph)
  {
    *glyph = 0;
    if (len == -1) len = strlen (name);
    return klass->get.glyph_from_name (this, user_data,
           name, len,
           glyph,
           klass->user_data.glyph_from_name);
  }




  inline void get_glyph_advance_for_direction (hb_codepoint_t glyph,
            hb_direction_t direction,
            hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4))) {
      *x = get_glyph_h_advance (glyph);
      *y = 0;
    } else {
      *x = 0;
      *y = get_glyph_v_advance (glyph);
    }
  }


  inline void guess_v_origin_minus_h_origin (hb_codepoint_t glyph,
          hb_position_t *x, hb_position_t *y)
  {
    *x = get_glyph_h_advance (glyph) / 2;


    *y = y_scale;
  }

  inline void get_glyph_origin_for_direction (hb_codepoint_t glyph,
           hb_direction_t direction,
           hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4)))
    {
      if (!get_glyph_h_origin (glyph, x, y) &&
    get_glyph_v_origin (glyph, x, y))
      {
 hb_position_t dx, dy;
 guess_v_origin_minus_h_origin (glyph, &dx, &dy);
 *x -= dx; *y -= dy;
      }
    }
    else
    {
      if (!get_glyph_v_origin (glyph, x, y) &&
    get_glyph_h_origin (glyph, x, y))
      {
 hb_position_t dx, dy;
 guess_v_origin_minus_h_origin (glyph, &dx, &dy);
 *x += dx; *y += dy;
      }
    }
  }

  inline void add_glyph_origin_for_direction (hb_codepoint_t glyph,
           hb_direction_t direction,
           hb_position_t *x, hb_position_t *y)
  {
    hb_position_t origin_x, origin_y;

    get_glyph_origin_for_direction (glyph, direction, &origin_x, &origin_y);

    *x += origin_x;
    *y += origin_y;
  }

  inline void subtract_glyph_origin_for_direction (hb_codepoint_t glyph,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y)
  {
    hb_position_t origin_x, origin_y;

    get_glyph_origin_for_direction (glyph, direction, &origin_x, &origin_y);

    *x -= origin_x;
    *y -= origin_y;
  }

  inline void get_glyph_kerning_for_direction (hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
            hb_direction_t direction,
            hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4))) {
      *x = get_glyph_h_kerning (first_glyph, second_glyph);
      *y = 0;
    } else {
      *x = 0;
      *y = get_glyph_v_kerning (first_glyph, second_glyph);
    }
  }

  inline hb_bool_t get_glyph_extents_for_origin (hb_codepoint_t glyph,
       hb_direction_t direction,
       hb_glyph_extents_t *extents)
  {
    hb_bool_t ret = get_glyph_extents (glyph, extents);

    if (ret)
      subtract_glyph_origin_for_direction (glyph, direction, &extents->x_bearing, &extents->y_bearing);

    return ret;
  }

  inline hb_bool_t get_glyph_contour_point_for_origin (hb_codepoint_t glyph, unsigned int point_index,
             hb_direction_t direction,
             hb_position_t *x, hb_position_t *y)
  {
    hb_bool_t ret = get_glyph_contour_point (glyph, point_index, x, y);

    if (ret)
      subtract_glyph_origin_for_direction (glyph, direction, x, y);

    return ret;
  }


  inline void
  glyph_to_string (hb_codepoint_t glyph,
     char *s, unsigned int size)
  {
    if (get_glyph_name (glyph, s, size)) return;

    if (size && snprintf (s, size, "gid%u", glyph) < 0)
      *s = '\0';
  }


  inline hb_bool_t
  glyph_from_string (const char *s, int len,
       hb_codepoint_t *glyph)
  {
    if (get_glyph_from_name (s, len, glyph)) return true;

    if (len == -1) len = strlen (s);


    if (hb_codepoint_parse (s, len, 10, glyph))
      return true;

    if (len > 3)
    {

      if (0 == strncmp (s, "gid", 3) &&
   hb_codepoint_parse (s + 3, len - 3, 10, glyph))
 return true;


      hb_codepoint_t unichar;
      if (0 == strncmp (s, "uni", 3) &&
   hb_codepoint_parse (s + 3, len - 3, 16, &unichar) &&
   get_glyph (unichar, 0, glyph))
 return true;
    }

    return false;
  }

  private:
  inline hb_position_t em_scale (int16_t v, int scale) { return (hb_position_t) (v * (int64_t) scale / face->get_upem ()); }
};



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_font_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_font_data_t * _hb_ot_shaper_font_data_create (hb_font_t *font ); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_font_data_destroy (struct hb_ot_shaper_font_data_t *data);
# 411 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 35 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 2

# 1 "../../../libs/harfbuzz-ng/src/hb-set-private.hh" 1
# 42 "../../../libs/harfbuzz-ng/src/hb-set-private.hh"
template <typename mask_t, unsigned int shift>
struct hb_set_digest_lowest_bits_t
{
  __attribute__((unused)) inline void _static_assertion_on_line_45 (void) const { do { typedef __typeof__(*this) _type_45; union _type__type_45_on_line_45_is_not_POD { _type_45 instance; }; } while (0); };

  static const unsigned int mask_bytes = sizeof (mask_t);
  static const unsigned int mask_bits = sizeof (mask_t) * 8;
  static const unsigned int num_bits = 0
         + (mask_bytes >= 1 ? 3 : 0)
         + (mask_bytes >= 2 ? 1 : 0)
         + (mask_bytes >= 4 ? 1 : 0)
         + (mask_bytes >= 8 ? 1 : 0)
         + (mask_bytes >= 16? 1 : 0)
         + 0;

  __attribute__((unused)) typedef int _static_assert_on_line_57_failed[(((shift < sizeof (hb_codepoint_t) * 8)))?1:-1];
  __attribute__((unused)) typedef int _static_assert_on_line_58_failed[(((shift + num_bits <= sizeof (hb_codepoint_t) * 8)))?1:-1];

  inline void init (void) {
    mask = 0;
  }

  inline void add (hb_codepoint_t g) {
    mask |= mask_for (g);
  }

  inline void add_range (hb_codepoint_t a, hb_codepoint_t b) {
    if ((b >> shift) - (a >> shift) >= mask_bits - 1)
      mask = (mask_t) -1;
    else {
      mask_t ma = mask_for (a);
      mask_t mb = mask_for (b);
      mask |= mb + (mb - ma) - (mb < ma);
    }
  }

  inline bool may_have (hb_codepoint_t g) const {
    return !!(mask & mask_for (g));
  }

  private:

  static inline mask_t mask_for (hb_codepoint_t g) {
    return ((mask_t) 1) << ((g >> shift) & (mask_bits - 1));
  }
  mask_t mask;
};

template <typename head_t, typename tail_t>
struct hb_set_digest_combiner_t
{
  __attribute__((unused)) inline void _static_assertion_on_line_93 (void) const { do { typedef __typeof__(*this) _type_93; union _type__type_93_on_line_93_is_not_POD { _type_93 instance; }; } while (0); };

  inline void init (void) {
    head.init ();
    tail.init ();
  }

  inline void add (hb_codepoint_t g) {
    head.add (g);
    tail.add (g);
  }

  inline void add_range (hb_codepoint_t a, hb_codepoint_t b) {
    head.add_range (a, b);
    tail.add_range (a, b);
  }

  inline bool may_have (hb_codepoint_t g) const {
    return head.may_have (g) && tail.may_have (g);
  }

  private:
  head_t head;
  tail_t tail;
};
# 127 "../../../libs/harfbuzz-ng/src/hb-set-private.hh"
typedef hb_set_digest_combiner_t
<
  hb_set_digest_lowest_bits_t<unsigned long, 4>,
  hb_set_digest_combiner_t
  <
    hb_set_digest_lowest_bits_t<unsigned long, 0>,
    hb_set_digest_lowest_bits_t<unsigned long, 9>
  >
> hb_set_digest_t;
# 146 "../../../libs/harfbuzz-ng/src/hb-set-private.hh"
struct hb_set_t
{
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_149 (void) const { do { typedef __typeof__(*this) _type_149; union _type__type_149_on_line_149_is_not_POD { _type_149 instance; }; } while (0); };
  bool in_error;

  inline void init (void) {
    hb_object_init (this);
    clear ();
  }
  inline void fini (void) {
  }
  inline void clear (void) {
    if ((hb_object_is_inert (this)))
      return;
    in_error = false;
    memset (elts, 0, sizeof elts);
  }
  inline bool is_empty (void) const {
    for (unsigned int i = 0; i < ARRAY_LENGTH (elts); i++)
      if (elts[i])
        return false;
    return true;
  }
  inline void add (hb_codepoint_t g)
  {
    if ((in_error)) return;
    if ((g == INVALID)) return;
    if ((g > MAX_G)) return;
    elt (g) |= mask (g);
  }
  inline void add_range (hb_codepoint_t a, hb_codepoint_t b)
  {
    if ((in_error)) return;

    for (unsigned int i = a; i < b + 1; i++)
      add (i);
  }
  inline void del (hb_codepoint_t g)
  {
    if ((in_error)) return;
    if ((g > MAX_G)) return;
    elt (g) &= ~mask (g);
  }
  inline void del_range (hb_codepoint_t a, hb_codepoint_t b)
  {
    if ((in_error)) return;

    for (unsigned int i = a; i < b + 1; i++)
      del (i);
  }
  inline bool has (hb_codepoint_t g) const
  {
    if ((g > MAX_G)) return false;
    return !!(elt (g) & mask (g));
  }
  inline bool intersects (hb_codepoint_t first,
     hb_codepoint_t last) const
  {
    if ((first > MAX_G)) return false;
    if ((last > MAX_G)) last = MAX_G;
    unsigned int end = last + 1;
    for (hb_codepoint_t i = first; i < end; i++)
      if (has (i))
        return true;
    return false;
  }
  inline bool is_equal (const hb_set_t *other) const
  {
    for (unsigned int i = 0; i < ELTS; i++)
      if (elts[i] != other->elts[i])
        return false;
    return true;
  }
  inline void set (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] = other->elts[i];
  }
  inline void union_ (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] |= other->elts[i];
  }
  inline void intersect (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] &= other->elts[i];
  }
  inline void subtract (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] &= ~other->elts[i];
  }
  inline void symmetric_difference (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] ^= other->elts[i];
  }
  inline void invert (void)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] = ~elts[i];
  }
  inline bool next (hb_codepoint_t *codepoint) const
  {
    if ((*codepoint == INVALID)) {
      hb_codepoint_t i = get_min ();
      if (i != INVALID) {
        *codepoint = i;
 return true;
      } else {
 *codepoint = INVALID;
        return false;
      }
    }
    for (hb_codepoint_t i = *codepoint + 1; i < MAX_G + 1; i++)
      if (has (i)) {
        *codepoint = i;
 return true;
      }
    *codepoint = INVALID;
    return false;
  }
  inline bool next_range (hb_codepoint_t *first, hb_codepoint_t *last) const
  {
    hb_codepoint_t i;

    i = *last;
    if (!next (&i))
    {
      *last = *first = INVALID;
      return false;
    }

    *last = *first = i;
    while (next (&i) && i == *last + 1)
      (*last)++;

    return true;
  }

  inline unsigned int get_population (void) const
  {
    unsigned int count = 0;
    for (unsigned int i = 0; i < ELTS; i++)
      count += _hb_popcount32 (elts[i]);
    return count;
  }
  inline hb_codepoint_t get_min (void) const
  {
    for (unsigned int i = 0; i < ELTS; i++)
      if (elts[i])
 for (unsigned int j = 0; j < BITS; j++)
   if (elts[i] & (1 << j))
     return i * BITS + j;
    return INVALID;
  }
  inline hb_codepoint_t get_max (void) const
  {
    for (unsigned int i = ELTS; i; i--)
      if (elts[i - 1])
 for (unsigned int j = BITS; j; j--)
   if (elts[i - 1] & (1 << (j - 1)))
     return (i - 1) * BITS + (j - 1);
    return INVALID;
  }

  typedef uint32_t elt_t;
  static const unsigned int MAX_G = 65536 - 1;
  static const unsigned int SHIFT = 5;
  static const unsigned int BITS = (1 << SHIFT);
  static const unsigned int MASK = BITS - 1;
  static const unsigned int ELTS = (MAX_G + 1 + (BITS - 1)) / BITS;
  static const hb_codepoint_t INVALID = ((hb_codepoint_t) -1);

  elt_t &elt (hb_codepoint_t g) { return elts[g >> SHIFT]; }
  elt_t elt (hb_codepoint_t g) const { return elts[g >> SHIFT]; }
  elt_t mask (hb_codepoint_t g) const { return elt_t (1) << (g & MASK); }

  elt_t elts[ELTS];

  __attribute__((unused)) typedef int _static_assert_on_line_334_failed[(((sizeof (elt_t) * 8 == BITS)))?1:-1];
  __attribute__((unused)) typedef int _static_assert_on_line_335_failed[(((sizeof (elt_t) * 8 * ELTS > MAX_G)))?1:-1];
};
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 2






typedef enum
{

  HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH = 0x02u,
  HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE = 0x04u,
  HB_OT_LAYOUT_GLYPH_PROPS_MARK = 0x08u,


  HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED = 0x10u,
  HB_OT_LAYOUT_GLYPH_PROPS_LIGATED = 0x20u,
  HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED = 0x40u,

  HB_OT_LAYOUT_GLYPH_PROPS_PRESERVE = HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED |
       HB_OT_LAYOUT_GLYPH_PROPS_LIGATED |
       HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED
} hb_ot_layout_glyph_class_mask_t;






__attribute__((__visibility__("hidden"))) hb_bool_t
hb_ot_layout_lookup_would_substitute_fast (hb_face_t *face,
        unsigned int lookup_index,
        const hb_codepoint_t *glyphs,
        unsigned int glyphs_length,
        hb_bool_t zero_context);



__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_start (hb_font_t *font,
          hb_buffer_t *buffer);


struct hb_ot_layout_lookup_accelerator_t;

namespace OT {
  struct hb_apply_context_t;
  struct SubstLookup;
}

__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_lookup (OT::hb_apply_context_t *c,
    const OT::SubstLookup &lookup,
    const hb_ot_layout_lookup_accelerator_t &accel);



__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_finish (hb_font_t *font,
    hb_buffer_t *buffer);



__attribute__((__visibility__("hidden"))) void
hb_ot_layout_position_start (hb_font_t *font,
        hb_buffer_t *buffer);


__attribute__((__visibility__("hidden"))) void
hb_ot_layout_position_finish (hb_font_t *font,
         hb_buffer_t *buffer);







namespace OT {
  struct GDEF;
  struct GSUB;
  struct GPOS;
}

struct hb_ot_layout_lookup_accelerator_t
{
  template <typename TLookup>
  inline void init (const TLookup &lookup)
  {
    digest.init ();
    lookup.add_coverage (&digest);
  }

  inline void fini (void)
  {
  }

  hb_set_digest_t digest;
};

struct hb_ot_layout_t
{
  hb_blob_t *gdef_blob;
  hb_blob_t *gsub_blob;
  hb_blob_t *gpos_blob;

  const struct OT::GDEF *gdef;
  const struct OT::GSUB *gsub;
  const struct OT::GPOS *gpos;

  unsigned int gsub_lookup_count;
  unsigned int gpos_lookup_count;

  hb_ot_layout_lookup_accelerator_t *gsub_accels;
  hb_ot_layout_lookup_accelerator_t *gpos_accels;
};


__attribute__((__visibility__("hidden"))) hb_ot_layout_t *
_hb_ot_layout_create (hb_face_t *face);

__attribute__((__visibility__("hidden"))) void
_hb_ot_layout_destroy (hb_ot_layout_t *layout);
# 179 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh"
enum {
  MASK0_ZWJ = 0x20u,
  MASK0_ZWNJ = 0x40u,
  MASK0_IGNORABLE = 0x80u,
  MASK0_GEN_CAT = 0x1Fu
};

static inline void
_hb_glyph_info_set_unicode_props (hb_glyph_info_t *info, hb_unicode_funcs_t *unicode)
{

  info->var2.u8[0] = ((unsigned int) unicode->general_category (info->codepoint)) |
      (unicode->is_default_ignorable (info->codepoint) ? MASK0_IGNORABLE : 0) |
      (info->codepoint == 0x200Cu ? MASK0_ZWNJ : 0) |
      (info->codepoint == 0x200Du ? MASK0_ZWJ : 0);
  info->var2.u8[1] = unicode->modified_combining_class (info->codepoint);
}

static inline void
_hb_glyph_info_set_general_category (hb_glyph_info_t *info,
         hb_unicode_general_category_t gen_cat)
{
  info->var2.u8[0] = (unsigned int) gen_cat | ((info->var2.u8[0]) & ~MASK0_GEN_CAT);
}

static inline hb_unicode_general_category_t
_hb_glyph_info_get_general_category (const hb_glyph_info_t *info)
{
  return (hb_unicode_general_category_t) (info->var2.u8[0] & MASK0_GEN_CAT);
}

static inline void
_hb_glyph_info_set_modified_combining_class (hb_glyph_info_t *info,
          unsigned int modified_class)
{
  info->var2.u8[1] = modified_class;
}

static inline unsigned int
_hb_glyph_info_get_modified_combining_class (const hb_glyph_info_t *info)
{
  return info->var2.u8[1];
}

static inline hb_bool_t
_hb_glyph_info_is_default_ignorable (const hb_glyph_info_t *info)
{
  return !!(info->var2.u8[0] & MASK0_IGNORABLE);
}

static inline hb_bool_t
_hb_glyph_info_is_zwnj (const hb_glyph_info_t *info)
{
  return !!(info->var2.u8[0] & MASK0_ZWNJ);
}

static inline hb_bool_t
_hb_glyph_info_is_zwj (const hb_glyph_info_t *info)
{
  return !!(info->var2.u8[0] & MASK0_ZWJ);
}

static inline void
_hb_glyph_info_flip_joiners (hb_glyph_info_t *info)
{
  info->var2.u8[0] ^= MASK0_ZWNJ | MASK0_ZWJ;
}
# 272 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh"
static inline void
_hb_glyph_info_clear_lig_props (hb_glyph_info_t *info)
{
  info->var1.u8[2] = 0;
}



static inline void
_hb_glyph_info_set_lig_props_for_ligature (hb_glyph_info_t *info,
        unsigned int lig_id,
        unsigned int lig_num_comps)
{
  info->var1.u8[2] = (lig_id << 5) | 0x10 | (lig_num_comps & 0x0F);
}

static inline void
_hb_glyph_info_set_lig_props_for_mark (hb_glyph_info_t *info,
           unsigned int lig_id,
           unsigned int lig_comp)
{
  info->var1.u8[2] = (lig_id << 5) | (lig_comp & 0x0F);
}

static inline void
_hb_glyph_info_set_lig_props_for_component (hb_glyph_info_t *info, unsigned int comp)
{
  _hb_glyph_info_set_lig_props_for_mark (info, 0, comp);
}

static inline unsigned int
_hb_glyph_info_get_lig_id (const hb_glyph_info_t *info)
{
  return info->var1.u8[2] >> 5;
}

static inline bool
_hb_glyph_info_ligated_internal (const hb_glyph_info_t *info)
{
  return !!(info->var1.u8[2] & 0x10);
}

static inline unsigned int
_hb_glyph_info_get_lig_comp (const hb_glyph_info_t *info)
{
  if (_hb_glyph_info_ligated_internal (info))
    return 0;
  else
    return info->var1.u8[2] & 0x0F;
}

static inline unsigned int
_hb_glyph_info_get_lig_num_comps (const hb_glyph_info_t *info)
{
  if ((info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE) &&
      _hb_glyph_info_ligated_internal (info))
    return info->var1.u8[2] & 0x0F;
  else
    return 1;
}

static inline uint8_t
_hb_allocate_lig_id (hb_buffer_t *buffer) {
  uint8_t lig_id = buffer->next_serial () & 0x07;
  if ((!lig_id))
    lig_id = _hb_allocate_lig_id (buffer);
  return lig_id;
}



static inline void
_hb_glyph_info_set_glyph_props (hb_glyph_info_t *info, unsigned int props)
{
  info->var1.u16[0] = props;
}

static inline unsigned int
_hb_glyph_info_get_glyph_props (const hb_glyph_info_t *info)
{
  return info->var1.u16[0];
}

static inline bool
_hb_glyph_info_is_base_glyph (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH);
}

static inline bool
_hb_glyph_info_is_ligature (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE);
}

static inline bool
_hb_glyph_info_is_mark (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_MARK);
}

static inline bool
_hb_glyph_info_substituted (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED);
}

static inline bool
_hb_glyph_info_ligated (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_LIGATED);
}

static inline bool
_hb_glyph_info_multiplied (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED);
}

static inline bool
_hb_glyph_info_ligated_and_didnt_multiply (const hb_glyph_info_t *info)
{
  return _hb_glyph_info_ligated (info) && !_hb_glyph_info_multiplied (info);
}

static inline void
_hb_glyph_info_clear_ligated_and_multiplied (hb_glyph_info_t *info)
{
  info->var1.u16[0] &= ~(HB_OT_LAYOUT_GLYPH_PROPS_LIGATED |
      HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED);
}




static inline void
_hb_buffer_allocate_unicode_vars (hb_buffer_t *buffer)
{
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[0]), "unicode_props0");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[1]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[1]), "unicode_props1");
}

static inline void
_hb_buffer_deallocate_unicode_vars (hb_buffer_t *buffer)
{
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[0]), "unicode_props0");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[1]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[1]), "unicode_props1");
}

static inline void
_hb_buffer_assert_unicode_vars (hb_buffer_t *buffer)
{
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[0]), "unicode_props0");
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[1]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[1]), "unicode_props1");
}

static inline void
_hb_buffer_allocate_gsubgpos_vars (hb_buffer_t *buffer)
{
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u16[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u16[0]), "glyph_props");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[2]), "lig_props");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[3]), "syllable");
}

static inline void
_hb_buffer_deallocate_gsubgpos_vars (hb_buffer_t *buffer)
{
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[3]), "syllable");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[2]), "lig_props");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u16[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u16[0]), "glyph_props");
}

static inline void
_hb_buffer_assert_gsubgpos_vars (hb_buffer_t *buffer)
{
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var1.u16[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u16[0]), "glyph_props");
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[2]), "lig_props");
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[3]), "syllable");
}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-shape-private.hh" 2



struct hb_ot_shape_plan_t
{
  hb_segment_properties_t props;
  const struct hb_ot_complex_shaper_t *shaper;
  hb_ot_map_t map;
  const void *data;
  hb_mask_t rtlm_mask, frac_mask, numr_mask, dnom_mask;
  hb_mask_t kern_mask;
  unsigned int has_frac : 1;
  unsigned int has_kern : 1;
  unsigned int has_mark : 1;

  inline void collect_lookups (hb_tag_t table_tag, hb_set_t *lookups) const
  {
    unsigned int table_index;
    switch (table_tag) {
      case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))): table_index = 0; break;
      case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S')))): table_index = 1; break;
      default: return;
    }
    map.collect_lookups (table_index, lookups);
  }
  inline void substitute (hb_font_t *font, hb_buffer_t *buffer) const { map.substitute (this, font, buffer); }
  inline void position (hb_font_t *font, hb_buffer_t *buffer) const { map.position (this, font, buffer); }

  void finish (void) { map.finish (); }
};

struct hb_ot_shape_planner_t
{

  hb_face_t *face;
  hb_segment_properties_t props;
  const struct hb_ot_complex_shaper_t *shaper;
  hb_ot_map_builder_t map;

  hb_ot_shape_planner_t (const hb_shape_plan_t *master_plan) :
    face (master_plan->face_unsafe),
    props (master_plan->props),
    shaper (__null),
    map (face, &props) {}
  ~hb_ot_shape_planner_t (void) { map.finish (); }

  inline void compile (hb_ot_shape_plan_t &plan)
  {
    plan.props = props;
    plan.shaper = shaper;
    map.compile (plan.map);

    plan.rtlm_mask = plan.map.get_1_mask (((hb_tag_t)((((uint8_t)('r'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('m')))));
    plan.frac_mask = plan.map.get_1_mask (((hb_tag_t)((((uint8_t)('f'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('c')))));
    plan.numr_mask = plan.map.get_1_mask (((hb_tag_t)((((uint8_t)('n'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))));
    plan.dnom_mask = plan.map.get_1_mask (((hb_tag_t)((((uint8_t)('d'))<<24)|(((uint8_t)('n'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('m')))));

    plan.kern_mask = plan.map.get_mask (((((unsigned int) (plan.props.direction)) & ~1U) == 4) ?
     ((hb_tag_t)((((uint8_t)('k'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('n')))) : ((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('k'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('n')))));

    plan.has_frac = plan.frac_mask || (plan.numr_mask && plan.dnom_mask);
    plan.has_kern = !!plan.kern_mask;
    plan.has_mark = !!plan.map.get_1_mask (((hb_tag_t)((((uint8_t)('m'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('k')))));
  }

  private:
  hb_ot_shape_planner_t (const hb_ot_shape_planner_t &o); hb_ot_shape_planner_t &operator = (const hb_ot_shape_planner_t &o);
};
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-normalize-private.hh" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-shape-normalize-private.hh"
struct hb_ot_shape_plan_t;

enum hb_ot_shape_normalization_mode_t {
  HB_OT_SHAPE_NORMALIZATION_MODE_NONE,
  HB_OT_SHAPE_NORMALIZATION_MODE_DECOMPOSED,
  HB_OT_SHAPE_NORMALIZATION_MODE_COMPOSED_DIACRITICS,
  HB_OT_SHAPE_NORMALIZATION_MODE_COMPOSED_DIACRITICS_NO_SHORT_CIRCUIT,

  HB_OT_SHAPE_NORMALIZATION_MODE_DEFAULT = HB_OT_SHAPE_NORMALIZATION_MODE_COMPOSED_DIACRITICS
};

__attribute__((__visibility__("hidden"))) void _hb_ot_shape_normalize (const hb_ot_shape_plan_t *shaper,
      hb_buffer_t *buffer,
      hb_font_t *font);


struct hb_ot_shape_normalize_context_t
{
  const hb_ot_shape_plan_t *plan;
  hb_buffer_t *buffer;
  hb_font_t *font;
  hb_unicode_funcs_t *unicode;
  bool (*decompose) (const hb_ot_shape_normalize_context_t *c,
       hb_codepoint_t ab,
       hb_codepoint_t *a,
       hb_codepoint_t *b);
  bool (*compose) (const hb_ot_shape_normalize_context_t *c,
     hb_codepoint_t a,
     hb_codepoint_t b,
     hb_codepoint_t *ab);
};
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh" 2
# 42 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh"
enum hb_ot_shape_zero_width_marks_type_t {
  HB_OT_SHAPE_ZERO_WIDTH_MARKS_NONE,

  HB_OT_SHAPE_ZERO_WIDTH_MARKS_BY_UNICODE_LATE,
  HB_OT_SHAPE_ZERO_WIDTH_MARKS_BY_GDEF_EARLY,
  HB_OT_SHAPE_ZERO_WIDTH_MARKS_BY_GDEF_LATE,

  HB_OT_SHAPE_ZERO_WIDTH_MARKS_DEFAULT = HB_OT_SHAPE_ZERO_WIDTH_MARKS_BY_UNICODE_LATE
};
# 68 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh"
struct hb_ot_complex_shaper_t
{
  char name[8];






  void (*collect_features) (hb_ot_shape_planner_t *plan);







  void (*override_features) (hb_ot_shape_planner_t *plan);







  void *(*data_create) (const hb_ot_shape_plan_t *plan);







  void (*data_destroy) (void *data);







  void (*preprocess_text) (const hb_ot_shape_plan_t *plan,
      hb_buffer_t *buffer,
      hb_font_t *font);


  hb_ot_shape_normalization_mode_t normalization_preference;





  bool (*decompose) (const hb_ot_shape_normalize_context_t *c,
       hb_codepoint_t ab,
       hb_codepoint_t *a,
       hb_codepoint_t *b);





  bool (*compose) (const hb_ot_shape_normalize_context_t *c,
     hb_codepoint_t a,
     hb_codepoint_t b,
     hb_codepoint_t *ab);







  void (*setup_masks) (const hb_ot_shape_plan_t *plan,
         hb_buffer_t *buffer,
         hb_font_t *font);

  hb_ot_shape_zero_width_marks_type_t zero_width_marks;

  bool fallback_position;
};


extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_default; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_arabic; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_hangul; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_hebrew; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_myanmar_old; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_indic; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_myanmar; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_sea; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_thai; extern __attribute__((__visibility__("hidden"))) const hb_ot_complex_shaper_t _hb_ot_complex_shaper_tibetan;



static inline const hb_ot_complex_shaper_t *
hb_ot_shape_complex_categorize (const hb_ot_shape_planner_t *planner)
{
  switch ((hb_tag_t) planner->props.script)
  {
    default:
      return &_hb_ot_complex_shaper_default;



    case HB_SCRIPT_ARABIC:


    case HB_SCRIPT_MONGOLIAN:
    case HB_SCRIPT_SYRIAC:


    case HB_SCRIPT_NKO:
    case HB_SCRIPT_PHAGS_PA:


    case HB_SCRIPT_MANDAIC:


    case HB_SCRIPT_MANICHAEAN:
    case HB_SCRIPT_PSALTER_PAHLAVI:



      if (planner->map.chosen_script[0] != ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('F'))<<16)|(((uint8_t)('L'))<<8)|((uint8_t)('T')))) ||
   planner->props.script == HB_SCRIPT_ARABIC)
 return &_hb_ot_complex_shaper_arabic;
      else
 return &_hb_ot_complex_shaper_default;



    case HB_SCRIPT_THAI:
    case HB_SCRIPT_LAO:

      return &_hb_ot_complex_shaper_thai;



    case HB_SCRIPT_HANGUL:

      return &_hb_ot_complex_shaper_hangul;



    case HB_SCRIPT_TIBETAN:

      return &_hb_ot_complex_shaper_tibetan;



    case HB_SCRIPT_HEBREW:

      return &_hb_ot_complex_shaper_hebrew;
# 274 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-private.hh"
    case HB_SCRIPT_BENGALI:
    case HB_SCRIPT_DEVANAGARI:
    case HB_SCRIPT_GUJARATI:
    case HB_SCRIPT_GURMUKHI:
    case HB_SCRIPT_KANNADA:
    case HB_SCRIPT_MALAYALAM:
    case HB_SCRIPT_ORIYA:
    case HB_SCRIPT_TAMIL:
    case HB_SCRIPT_TELUGU:


    case HB_SCRIPT_SINHALA:


    case HB_SCRIPT_BALINESE:


    case HB_SCRIPT_LEPCHA:
    case HB_SCRIPT_REJANG:
    case HB_SCRIPT_SUNDANESE:


    case HB_SCRIPT_JAVANESE:
    case HB_SCRIPT_KAITHI:
    case HB_SCRIPT_MEETEI_MAYEK:




    case HB_SCRIPT_CHAKMA:
    case HB_SCRIPT_SHARADA:
    case HB_SCRIPT_TAKRI:





      if (planner->map.chosen_script[0] == ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('F'))<<16)|(((uint8_t)('L'))<<8)|((uint8_t)('T')))))
 return &_hb_ot_complex_shaper_default;
      else
 return &_hb_ot_complex_shaper_indic;

    case HB_SCRIPT_KHMER:





      if (planner->map.found_script[0] &&
   hb_ot_layout_language_find_feature (planner->face, ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))),
           planner->map.script_index[0],
           planner->map.language_index[0],
           ((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('f')))),
           __null))
 return &_hb_ot_complex_shaper_indic;
      else
 return &_hb_ot_complex_shaper_default;

    case HB_SCRIPT_MYANMAR:
      if (planner->map.chosen_script[0] == ((hb_tag_t)((((uint8_t)('m'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('2')))))
 return &_hb_ot_complex_shaper_myanmar;
      else if (planner->map.chosen_script[0] == ((hb_tag_t)((((uint8_t)('m'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))))
 return &_hb_ot_complex_shaper_myanmar_old;
      else
 return &_hb_ot_complex_shaper_default;


    case HB_SCRIPT_BUGINESE:
    case HB_SCRIPT_NEW_TAI_LUE:


    case HB_SCRIPT_CHAM:


    case HB_SCRIPT_TAI_THAM:





      if (planner->map.chosen_script[0] == ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('F'))<<16)|(((uint8_t)('L'))<<8)|((uint8_t)('T')))))
 return &_hb_ot_complex_shaper_default;
      else
 return &_hb_ot_complex_shaper_sea;
  }
}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh" 2
# 44 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh"
enum indic_category_t {
  OT_X = 0,
  OT_C = 1,
  OT_V = 2,
  OT_N = 3,
  OT_H = 4,
  OT_ZWNJ = 5,
  OT_ZWJ = 6,
  OT_M = 7,
  OT_SM = 8,
  OT_VD = 9,
  OT_A = 10,
  OT_PLACEHOLDER = 11,
  OT_DOTTEDCIRCLE = 12,
  OT_RS = 13,
  OT_Coeng = 14,
  OT_Repha = 15,
  OT_Ra = 16,
  OT_CM = 17,
  OT_Symbol = 18,
  OT_CM2 = 31
};
# 80 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh"
enum indic_position_t {
  POS_START,

  POS_RA_TO_BECOME_REPH,
  POS_PRE_M,
  POS_PRE_C,

  POS_BASE_C,
  POS_AFTER_MAIN,

  POS_ABOVE_C,

  POS_BEFORE_SUB,
  POS_BELOW_C,
  POS_AFTER_SUB,

  POS_BEFORE_POST,
  POS_POST_C,
  POS_AFTER_POST,

  POS_FINAL_C,
  POS_SMVD,

  POS_END
};


enum indic_syllabic_category_t {
  INDIC_SYLLABIC_CATEGORY_OTHER = OT_X,

  INDIC_SYLLABIC_CATEGORY_AVAGRAHA = OT_Symbol,
  INDIC_SYLLABIC_CATEGORY_BINDU = OT_SM,
  INDIC_SYLLABIC_CATEGORY_BRAHMI_JOINING_NUMBER = OT_PLACEHOLDER,
  INDIC_SYLLABIC_CATEGORY_CANTILLATION_MARK = OT_A,
  INDIC_SYLLABIC_CATEGORY_CONSONANT = OT_C,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_DEAD = OT_C,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_FINAL = OT_CM,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_HEAD_LETTER = OT_C,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_MEDIAL = OT_CM,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_PLACEHOLDER = OT_PLACEHOLDER,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_PRECEDING_REPHA = OT_Repha,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_SUBJOINED = OT_CM,
  INDIC_SYLLABIC_CATEGORY_CONSONANT_SUCCEEDING_REPHA = OT_N,
  INDIC_SYLLABIC_CATEGORY_GEMINATION_MARK = OT_SM,
  INDIC_SYLLABIC_CATEGORY_INVISIBLE_STACKER = OT_H,
  INDIC_SYLLABIC_CATEGORY_JOINER = OT_ZWJ,
  INDIC_SYLLABIC_CATEGORY_MODIFYING_LETTER = OT_X,
  INDIC_SYLLABIC_CATEGORY_NON_JOINER = OT_ZWNJ,
  INDIC_SYLLABIC_CATEGORY_NUKTA = OT_N,
  INDIC_SYLLABIC_CATEGORY_NUMBER = OT_PLACEHOLDER,
  INDIC_SYLLABIC_CATEGORY_NUMBER_JOINER = OT_PLACEHOLDER,
  INDIC_SYLLABIC_CATEGORY_PURE_KILLER = OT_H,
  INDIC_SYLLABIC_CATEGORY_REGISTER_SHIFTER = OT_RS,
  INDIC_SYLLABIC_CATEGORY_TONE_LETTER = OT_X,
  INDIC_SYLLABIC_CATEGORY_TONE_MARK = OT_N,
  INDIC_SYLLABIC_CATEGORY_VIRAMA = OT_H,
  INDIC_SYLLABIC_CATEGORY_VISARGA = OT_SM,
  INDIC_SYLLABIC_CATEGORY_VOWEL = OT_V,
  INDIC_SYLLABIC_CATEGORY_VOWEL_DEPENDENT = OT_M,
  INDIC_SYLLABIC_CATEGORY_VOWEL_INDEPENDENT = OT_V
};


enum indic_matra_category_t {
  INDIC_MATRA_CATEGORY_NOT_APPLICABLE = POS_END,

  INDIC_MATRA_CATEGORY_LEFT = POS_PRE_C,
  INDIC_MATRA_CATEGORY_TOP = POS_ABOVE_C,
  INDIC_MATRA_CATEGORY_BOTTOM = POS_BELOW_C,
  INDIC_MATRA_CATEGORY_RIGHT = POS_POST_C,


  INDIC_MATRA_CATEGORY_BOTTOM_AND_RIGHT = INDIC_MATRA_CATEGORY_RIGHT,
  INDIC_MATRA_CATEGORY_LEFT_AND_RIGHT = INDIC_MATRA_CATEGORY_RIGHT,
  INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM = INDIC_MATRA_CATEGORY_BOTTOM,
  INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM_AND_RIGHT = INDIC_MATRA_CATEGORY_RIGHT,
  INDIC_MATRA_CATEGORY_TOP_AND_LEFT = INDIC_MATRA_CATEGORY_TOP,
  INDIC_MATRA_CATEGORY_TOP_AND_LEFT_AND_RIGHT = INDIC_MATRA_CATEGORY_RIGHT,
  INDIC_MATRA_CATEGORY_TOP_AND_RIGHT = INDIC_MATRA_CATEGORY_RIGHT,

  INDIC_MATRA_CATEGORY_OVERSTRUCK = POS_AFTER_MAIN,
  INDIC_MATRA_CATEGORY_VISUAL_ORDER_LEFT = POS_PRE_M
};
# 179 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-private.hh"
__attribute__((__visibility__("hidden"))) uint16_t
hb_indic_get_categories (hb_codepoint_t u);
# 28 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc" 2
# 97 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
static inline indic_position_t
matra_position (hb_codepoint_t u, indic_position_t side)
{
  switch ((int) side)
  {
    case POS_PRE_C: return POS_PRE_M;
    case POS_POST_C: return ( ((((u) & ~0x7Fu) == (0x0900u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0980u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0A00u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0A80u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0B00u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0B80u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0C00u))) ? (u <= 0x0C42u ? POS_BEFORE_SUB : POS_AFTER_SUB) : ((((u) & ~0x7Fu) == (0x0C80u))) ? (u < 0x0CC3u || u > 0xCD6u ? POS_BEFORE_SUB : POS_AFTER_SUB) : ((((u) & ~0x7Fu) == (0x0D00u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0D80u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x1780u))) ? POS_AFTER_POST : POS_AFTER_SUB );
    case POS_ABOVE_C: return ( ((((u) & ~0x7Fu) == (0x0900u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0A00u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0A80u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0B00u))) ? POS_AFTER_MAIN : ((((u) & ~0x7Fu) == (0x0B80u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0C00u))) ? POS_BEFORE_SUB : ((((u) & ~0x7Fu) == (0x0C80u))) ? POS_BEFORE_SUB : ((((u) & ~0x7Fu) == (0x0D80u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x1780u))) ? POS_AFTER_POST : POS_AFTER_SUB );
    case POS_BELOW_C: return ( ((((u) & ~0x7Fu) == (0x0900u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0980u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0A00u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0A80u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0B00u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x0B80u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0C00u))) ? POS_BEFORE_SUB : ((((u) & ~0x7Fu) == (0x0C80u))) ? POS_BEFORE_SUB : ((((u) & ~0x7Fu) == (0x0D00u))) ? POS_AFTER_POST : ((((u) & ~0x7Fu) == (0x0D80u))) ? POS_AFTER_SUB : ((((u) & ~0x7Fu) == (0x1780u))) ? POS_AFTER_POST : POS_AFTER_SUB );
  };
  return side;
}





static const hb_codepoint_t ra_chars[] = {
  0x0930u,
  0x09B0u,
  0x09F0u,
  0x0A30u,
  0x0AB0u,
  0x0B30u,
  0x0BB0u,
  0x0C30u,
  0x0CB0u,
  0x0D30u,

  0x0DBBu,

  0x179Au,
};

static inline bool
is_ra (hb_codepoint_t u)
{
  for (unsigned int i = 0; i < ARRAY_LENGTH (ra_chars); i++)
    if (u == ra_chars[i])
      return true;
  return false;
}

static inline bool
is_one_of (const hb_glyph_info_t &info, unsigned int flags)
{

  if (_hb_glyph_info_ligated (&info)) return false;
  return !!((1<<(info.var2.u8[2])) & flags);
}

static inline bool
is_joiner (const hb_glyph_info_t &info)
{
  return is_one_of (info, ((1<<(OT_ZWJ)) | (1<<(OT_ZWNJ))));
}

static inline bool
is_consonant (const hb_glyph_info_t &info)
{
  return is_one_of (info, ((1<<(OT_C)) | (1<<(OT_Ra)) | ((1<<(OT_CM)) | (1<<(OT_CM2))) | (1<<(OT_V)) | (1<<(OT_PLACEHOLDER)) | (1<<(OT_DOTTEDCIRCLE))));
}

static inline bool
is_halant_or_coeng (const hb_glyph_info_t &info)
{
  return is_one_of (info, ((1<<(OT_H)) | (1<<(OT_Coeng))));
}

static inline void
set_indic_properties (hb_glyph_info_t &info)
{
  hb_codepoint_t u = info.codepoint;
  unsigned int type = hb_indic_get_categories (u);
  indic_category_t cat = (indic_category_t) (type & 0x7Fu);
  indic_position_t pos = (indic_position_t) (type >> 8);
# 190 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  if ((hb_in_ranges (u, 0x0951u, 0x0952u, 0x1CD0u, 0x1CD2u, 0x1CD4u, 0x1CE1u) || u == 0x1CF4u)


                    )
    cat = OT_A;

  else if ((hb_in_range (u, 0x0953u, 0x0954u)))
    cat = OT_SM;

  else if ((hb_in_ranges (u, 0x0A72u, 0x0A73u, 0x1CF5u, 0x1CF6u))
                            )
    cat = OT_C;


  else if ((hb_in_range (u, 0x1CE2u, 0x1CE8u)))
    cat = OT_A;



  else if ((u == 0x1CEDu))
    cat = OT_A;

  else if ((hb_in_ranges (u, 0xA8F2u, 0xA8F7u, 0x1CE9u, 0x1CECu, 0x1CEEu, 0x1CF1u))

                            )
  {
    cat = OT_Symbol;
    __attribute__((unused)) typedef int _static_assert_on_line_217_failed[((((int) INDIC_SYLLABIC_CATEGORY_AVAGRAHA == OT_Symbol)))?1:-1];
  }
  else if ((hb_in_range (u, 0x17CDu, 0x17D1u) || u == 0x17CBu || u == 0x17D3u || u == 0x17DDu)
                                                    )
  {

    cat = OT_M;
    pos = POS_ABOVE_C;
  }
  else if ((u == 0x17C6u)) cat = OT_N;
  else if ((u == 0x17D2u)) cat = OT_Coeng;
  else if ((hb_in_range (u, 0x2010u, 0x2011u)))
        cat = OT_PLACEHOLDER;
  else if ((u == 0x25CCu)) cat = OT_DOTTEDCIRCLE;
  else if ((u == 0xA982u)) cat = OT_SM;
  else if ((u == 0xA9BEu)) cat = OT_CM2;
  else if ((u == 0xA9BDu)) { cat = OT_M; pos = POS_POST_C; }






  if (((1<<(cat)) & ((1<<(OT_C)) | (1<<(OT_Ra)) | ((1<<(OT_CM)) | (1<<(OT_CM2))) | (1<<(OT_V)) | (1<<(OT_PLACEHOLDER)) | (1<<(OT_DOTTEDCIRCLE)))))
  {
    pos = POS_BASE_C;
    if (is_ra (u))
      cat = OT_Ra;
  }
  else if (cat == OT_M)
  {
    pos = matra_position (u, pos);
  }
  else if (((1<<(cat)) & ((1<<(OT_SM)) | (1<<(OT_VD)) | (1<<(OT_A)) | (1<<(OT_Symbol)))))
  {
    pos = POS_SMVD;
  }

  if ((u == 0x0B01u)) pos = POS_BEFORE_SUB;



  info.var2.u8[2] = cat;
  info.var2.u8[3] = pos;
}
# 276 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
enum base_position_t {
  BASE_POS_FIRST,
  BASE_POS_LAST_SINHALA,
  BASE_POS_LAST
};
enum reph_position_t {
  REPH_POS_AFTER_MAIN = POS_AFTER_MAIN,
  REPH_POS_BEFORE_SUB = POS_BEFORE_SUB,
  REPH_POS_AFTER_SUB = POS_AFTER_SUB,
  REPH_POS_BEFORE_POST = POS_BEFORE_POST,
  REPH_POS_AFTER_POST = POS_AFTER_POST,
  REPH_POS_DONT_CARE = POS_RA_TO_BECOME_REPH
};
enum reph_mode_t {
  REPH_MODE_IMPLICIT,
  REPH_MODE_EXPLICIT,
  REPH_MODE_VIS_REPHA,
  REPH_MODE_LOG_REPHA
};
enum blwf_mode_t {
  BLWF_MODE_PRE_AND_POST,
  BLWF_MODE_POST_ONLY
};
enum pref_len_t {
  PREF_LEN_1 = 1,
  PREF_LEN_2 = 2,
  PREF_LEN_DONT_CARE = PREF_LEN_2
};
struct indic_config_t
{
  hb_script_t script;
  bool has_old_spec;
  hb_codepoint_t virama;
  base_position_t base_pos;
  reph_position_t reph_pos;
  reph_mode_t reph_mode;
  blwf_mode_t blwf_mode;
  pref_len_t pref_len;
};

static const indic_config_t indic_configs[] =
{

  {HB_SCRIPT_INVALID, false, 0,BASE_POS_LAST, REPH_POS_BEFORE_POST,REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_1},
  {HB_SCRIPT_DEVANAGARI,true, 0x094Du,BASE_POS_LAST, REPH_POS_BEFORE_POST,REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_DONT_CARE},
  {HB_SCRIPT_BENGALI, true, 0x09CDu,BASE_POS_LAST, REPH_POS_AFTER_SUB, REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_DONT_CARE},
  {HB_SCRIPT_GURMUKHI, true, 0x0A4Du,BASE_POS_LAST, REPH_POS_BEFORE_SUB, REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_DONT_CARE},
  {HB_SCRIPT_GUJARATI, true, 0x0ACDu,BASE_POS_LAST, REPH_POS_BEFORE_POST,REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_DONT_CARE},
  {HB_SCRIPT_ORIYA, true, 0x0B4Du,BASE_POS_LAST, REPH_POS_AFTER_MAIN, REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_DONT_CARE},
  {HB_SCRIPT_TAMIL, true, 0x0BCDu,BASE_POS_LAST, REPH_POS_AFTER_POST, REPH_MODE_IMPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_2},
  {HB_SCRIPT_TELUGU, true, 0x0C4Du,BASE_POS_LAST, REPH_POS_AFTER_POST, REPH_MODE_EXPLICIT, BLWF_MODE_POST_ONLY, PREF_LEN_2},
  {HB_SCRIPT_KANNADA, true, 0x0CCDu,BASE_POS_LAST, REPH_POS_AFTER_POST, REPH_MODE_IMPLICIT, BLWF_MODE_POST_ONLY, PREF_LEN_2},
  {HB_SCRIPT_MALAYALAM, true, 0x0D4Du,BASE_POS_LAST, REPH_POS_AFTER_MAIN, REPH_MODE_LOG_REPHA,BLWF_MODE_PRE_AND_POST, PREF_LEN_2},
  {HB_SCRIPT_SINHALA, false,0x0DCAu,BASE_POS_LAST_SINHALA,
           REPH_POS_AFTER_MAIN, REPH_MODE_EXPLICIT, BLWF_MODE_PRE_AND_POST, PREF_LEN_DONT_CARE},
  {HB_SCRIPT_KHMER, false,0x17D2u,BASE_POS_FIRST,REPH_POS_DONT_CARE, REPH_MODE_VIS_REPHA,BLWF_MODE_PRE_AND_POST, PREF_LEN_2},
  {HB_SCRIPT_JAVANESE, false,0xA9C0u,BASE_POS_FIRST,REPH_POS_DONT_CARE, REPH_MODE_VIS_REPHA,BLWF_MODE_PRE_AND_POST, PREF_LEN_1},
};







struct feature_list_t {
  hb_tag_t tag;
  hb_ot_map_feature_flags_t flags;
};

static const feature_list_t
indic_features[] =
{




  {((hb_tag_t)((((uint8_t)('n'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('t')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('a'))<<24)|(((uint8_t)('k'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('n')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('r'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('f')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('r'))<<24)|(((uint8_t)('k'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('f')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('f')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('b'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('w'))<<8)|((uint8_t)('f')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('a'))<<24)|(((uint8_t)('b'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('f')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('f')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('f')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('v'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('u')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('j'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('t')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))), F_NONE},






  {((hb_tag_t)((((uint8_t)('i'))<<24)|(((uint8_t)('n'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('t')))), F_NONE},
  {((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('s')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('a'))<<24)|(((uint8_t)('b'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('s')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('b'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('w'))<<8)|((uint8_t)('s')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('s')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('h'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('n')))), F_GLOBAL},

  {((hb_tag_t)((((uint8_t)('d'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('t')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('a'))<<24)|(((uint8_t)('b'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('m')))), F_GLOBAL},
  {((hb_tag_t)((((uint8_t)('b'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('w'))<<8)|((uint8_t)('m')))), F_GLOBAL},
};




enum {
  _NUKT,
  _AKHN,
  RPHF,
  _RKRF,
  PREF,
  BLWF,
  ABVF,
  HALF,
  PSTF,
  _VATU,
  _CJCT,
  CFAR,

  INIT,
  _PRES,
  _ABVS,
  _BLWS,
  _PSTS,
  _HALN,
  _DIST,
  _ABVM,
  _BLWM,

  INDIC_NUM_FEATURES,
  INDIC_BASIC_FEATURES = INIT
};

static void
setup_syllables (const hb_ot_shape_plan_t *plan,
   hb_font_t *font,
   hb_buffer_t *buffer);
static void
initial_reordering (const hb_ot_shape_plan_t *plan,
      hb_font_t *font,
      hb_buffer_t *buffer);
static void
final_reordering (const hb_ot_shape_plan_t *plan,
    hb_font_t *font,
    hb_buffer_t *buffer);
static void
clear_syllables (const hb_ot_shape_plan_t *plan,
   hb_font_t *font,
   hb_buffer_t *buffer);

static void
collect_features_indic (hb_ot_shape_planner_t *plan)
{
  hb_ot_map_builder_t *map = &plan->map;


  map->add_gsub_pause (setup_syllables);

  map->add_global_bool_feature (((hb_tag_t)((((uint8_t)('l'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('l')))));


  map->add_global_bool_feature (((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('c'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('p')))));


  unsigned int i = 0;
  map->add_gsub_pause (initial_reordering);
  for (; i < INDIC_BASIC_FEATURES; i++) {
    map->add_feature (indic_features[i].tag, 1, indic_features[i].flags | F_MANUAL_ZWJ);
    map->add_gsub_pause (__null);
  }
  map->add_gsub_pause (final_reordering);
  for (; i < INDIC_NUM_FEATURES; i++) {
    map->add_feature (indic_features[i].tag, 1, indic_features[i].flags | F_MANUAL_ZWJ);
  }

  map->add_global_bool_feature (((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('t')))));
  map->add_global_bool_feature (((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('g')))));

  map->add_gsub_pause (clear_syllables);
}

static void
override_features_indic (hb_ot_shape_planner_t *plan)
{

  if (hb_options ().uniscribe_bug_compatible)
  {
    switch ((hb_tag_t) plan->props.script)
    {
      case HB_SCRIPT_KHMER:
 plan->map.add_feature (((hb_tag_t)((((uint8_t)('k'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('n')))), 0, F_GLOBAL);
 break;
    }
  }

  plan->map.add_feature (((hb_tag_t)((((uint8_t)('l'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('a')))), 0, F_GLOBAL);
}


struct would_substitute_feature_t
{
  inline void init (const hb_ot_map_t *map, hb_tag_t feature_tag, bool zero_context_)
  {
    zero_context = zero_context_;
    map->get_stage_lookups (0 ,
       map->get_feature_stage (0 , feature_tag),
       &lookups, &count);
  }

  inline bool would_substitute (const hb_codepoint_t *glyphs,
    unsigned int glyphs_count,
    hb_face_t *face) const
  {
    for (unsigned int i = 0; i < count; i++)
      if (hb_ot_layout_lookup_would_substitute_fast (face, lookups[i].index, glyphs, glyphs_count, zero_context))
 return true;
    return false;
  }

  private:
  const hb_ot_map_t::lookup_map_t *lookups;
  unsigned int count;
  bool zero_context;
};

struct indic_shape_plan_t
{
  __attribute__((unused)) inline void _static_assertion_on_line_508 (void) const { do { typedef __typeof__(*this) _type_508; union _type__type_508_on_line_508_is_not_POD { _type_508 instance; }; } while (0); };

  inline bool get_virama_glyph (hb_font_t *font, hb_codepoint_t *pglyph) const
  {
    hb_codepoint_t glyph = virama_glyph;
    if ((virama_glyph == (hb_codepoint_t) -1))
    {
      if (!config->virama || !font->get_glyph (config->virama, 0, &glyph))
 glyph = 0;





      (const_cast<indic_shape_plan_t *> (this))->virama_glyph = glyph;
    }

    *pglyph = glyph;
    return glyph != 0;
  }

  const indic_config_t *config;

  bool is_old_spec;
  hb_codepoint_t virama_glyph;

  would_substitute_feature_t rphf;
  would_substitute_feature_t pref;
  would_substitute_feature_t blwf;
  would_substitute_feature_t pstf;

  hb_mask_t mask_array[INDIC_NUM_FEATURES];
};

static void *
data_create_indic (const hb_ot_shape_plan_t *plan)
{
  indic_shape_plan_t *indic_plan = (indic_shape_plan_t *) calloc (1, sizeof (indic_shape_plan_t));
  if ((!indic_plan))
    return __null;

  indic_plan->config = &indic_configs[0];
  for (unsigned int i = 1; i < ARRAY_LENGTH (indic_configs); i++)
    if (plan->props.script == indic_configs[i].script) {
      indic_plan->config = &indic_configs[i];
      break;
    }

  indic_plan->is_old_spec = indic_plan->config->has_old_spec && ((plan->map.chosen_script[0] & 0x000000FFu) != '2');
  indic_plan->virama_glyph = (hb_codepoint_t) -1;



  bool zero_context = !indic_plan->is_old_spec;
  indic_plan->rphf.init (&plan->map, ((hb_tag_t)((((uint8_t)('r'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('f')))), zero_context);
  indic_plan->pref.init (&plan->map, ((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('f')))), zero_context);
  indic_plan->blwf.init (&plan->map, ((hb_tag_t)((((uint8_t)('b'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('w'))<<8)|((uint8_t)('f')))), zero_context);
  indic_plan->pstf.init (&plan->map, ((hb_tag_t)((((uint8_t)('p'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('f')))), zero_context);

  for (unsigned int i = 0; i < ARRAY_LENGTH (indic_plan->mask_array); i++)
    indic_plan->mask_array[i] = (indic_features[i].flags & F_GLOBAL) ?
     0 : plan->map.get_1_mask (indic_features[i].tag);

  return indic_plan;
}

static void
data_destroy_indic (void *data)
{
  free (data);
}

static indic_position_t
consonant_position_from_face (const indic_shape_plan_t *indic_plan,
         const hb_codepoint_t consonant,
         const hb_codepoint_t virama,
         hb_face_t *face)
{
# 596 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  hb_codepoint_t glyphs[3] = {virama, consonant, virama};
  if (indic_plan->blwf.would_substitute (glyphs , 2, face) ||
      indic_plan->blwf.would_substitute (glyphs+1, 2, face))
    return POS_BELOW_C;
  if (indic_plan->pstf.would_substitute (glyphs , 2, face) ||
      indic_plan->pstf.would_substitute (glyphs+1, 2, face))
    return POS_POST_C;
  unsigned int pref_len = indic_plan->config->pref_len;
  if ((pref_len == PREF_LEN_2 &&
       (indic_plan->pref.would_substitute (glyphs , 2, face) ||
        indic_plan->pref.would_substitute (glyphs+1, 2, face)))
   || (pref_len == PREF_LEN_1 &&
       indic_plan->pref.would_substitute (glyphs+1, 1, face)))
    return POS_POST_C;
  return POS_BASE_C;
}


enum syllable_type_t {
  consonant_syllable,
  vowel_syllable,
  standalone_cluster,
  symbol_cluster,
  broken_cluster,
  non_indic_cluster,
};

# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic-machine.hh" 1
# 1 "hb-ot-shape-complex-indic-machine.rl"
# 36 "hb-ot-shape-complex-indic-machine.hh"
static const unsigned char _indic_syllable_machine_trans_keys[] = {
 8u, 8u, 1u, 16u, 8u, 13u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u,
 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 4u, 8u,
 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u,
 4u, 8u, 6u, 6u, 16u, 16u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u,
 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 8u, 8u, 1u, 16u, 8u, 13u,
 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u,
 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u,
 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u,
 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u,
 4u, 14u, 4u, 14u, 8u, 8u, 1u, 16u, 8u, 13u, 5u, 8u, 5u, 7u, 7u, 7u,
 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u,
 7u, 7u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u,
 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 14u, 4u, 14u, 4u, 14u,
 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 8u, 8u, 1u, 16u,
 8u, 13u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u,
 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 4u, 8u, 6u, 6u, 16u, 16u,
 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u,
 16u, 16u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u,
 4u, 14u, 4u, 14u, 4u, 14u, 4u, 14u, 5u, 8u, 4u, 14u, 4u, 14u, 5u, 8u,
 5u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u,
 5u, 7u, 7u, 7u, 8u, 8u, 1u, 16u, 8u, 13u, 4u, 8u, 6u, 6u, 16u, 16u,
 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u,
 16u, 16u, 8u, 8u, 1u, 31u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u,
 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u,
 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 5u, 14u, 5u, 14u,
 5u, 10u, 9u, 10u, 9u, 9u, 9u, 10u, 9u, 10u, 9u, 9u, 5u, 10u, 3u, 13u,
 3u, 10u, 5u, 10u, 3u, 10u, 3u, 13u, 3u, 14u, 3u, 14u, 4u, 14u, 5u, 14u,
 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u,
 5u, 14u, 3u, 14u, 1u, 16u, 4u, 31u, 4u, 14u, 3u, 31u, 3u, 31u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 3u, 31u, 3u, 31u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u,
 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u,
 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 5u, 14u, 5u, 14u,
 5u, 10u, 9u, 10u, 9u, 9u, 9u, 10u, 9u, 10u, 9u, 9u, 5u, 10u, 3u, 13u,
 3u, 10u, 5u, 10u, 3u, 10u, 3u, 13u, 3u, 14u, 3u, 14u, 4u, 14u, 5u, 14u,
 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u,
 5u, 14u, 3u, 14u, 1u, 16u, 4u, 31u, 4u, 14u, 3u, 31u, 3u, 31u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u,
 4u, 14u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u,
 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u,
 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 5u, 14u, 5u, 14u, 5u, 10u,
 9u, 10u, 9u, 9u, 9u, 10u, 9u, 10u, 9u, 9u, 5u, 10u, 3u, 13u, 3u, 10u,
 5u, 10u, 3u, 10u, 3u, 13u, 3u, 14u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u,
 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u,
 3u, 14u, 1u, 16u, 4u, 31u, 4u, 14u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u,
 4u, 14u, 3u, 31u, 4u, 14u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u,
 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u,
 3u, 31u, 4u, 31u, 1u, 16u, 3u, 31u, 3u, 31u, 4u, 31u, 5u, 14u, 5u, 14u,
 5u, 10u, 9u, 10u, 9u, 9u, 9u, 10u, 9u, 10u, 9u, 9u, 5u, 10u, 3u, 13u,
 3u, 10u, 5u, 10u, 3u, 10u, 3u, 13u, 3u, 14u, 3u, 14u, 4u, 14u, 5u, 14u,
 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u,
 5u, 14u, 3u, 14u, 1u, 16u, 4u, 31u, 4u, 14u, 3u, 31u, 3u, 31u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 1u, 16u, 3u, 31u, 3u, 31u, 1u, 16u, 1u, 16u, 1u, 16u, 1u, 16u,
 1u, 16u, 3u, 31u, 1u, 31u, 3u, 31u, 1u, 31u, 4u, 14u, 5u, 10u, 9u, 10u,
 9u, 9u, 9u, 10u, 9u, 10u, 9u, 9u, 5u, 10u, 1u, 16u, 3u, 31u, 3u, 31u,
 4u, 31u, 3u, 31u, 3u, 31u, 1u, 16u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u,
 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u, 3u, 14u, 4u, 14u, 5u, 14u,
 3u, 13u, 3u, 10u, 5u, 10u, 3u, 10u, 3u, 13u, 1u, 16u, 3u, 10u, 5u, 10u,
 5u, 10u, 9u, 10u, 9u, 9u, 9u, 10u, 9u, 10u, 9u, 9u, 5u, 10u, 0
};

static const char _indic_syllable_machine_key_spans[] = {
 1, 16, 6, 4, 3, 1, 4, 3,
 1, 4, 3, 1, 4, 3, 1, 5,
 1, 1, 5, 1, 1, 5, 1, 1,
 5, 1, 1, 11, 11, 11, 11, 11,
 11, 11, 11, 11, 11, 1, 16, 6,
 4, 3, 1, 4, 3, 1, 4, 3,
 1, 4, 3, 1, 5, 1, 1, 5,
 1, 1, 5, 1, 1, 5, 1, 1,
 11, 11, 11, 11, 11, 11, 11, 11,
 11, 11, 1, 16, 6, 4, 3, 1,
 4, 3, 1, 4, 3, 1, 4, 3,
 1, 5, 1, 1, 5, 1, 1, 5,
 1, 1, 5, 1, 1, 11, 11, 11,
 11, 11, 11, 11, 11, 11, 1, 16,
 6, 4, 3, 1, 4, 3, 1, 4,
 3, 1, 4, 3, 1, 5, 1, 1,
 5, 1, 1, 5, 1, 1, 5, 1,
 1, 11, 11, 11, 11, 11, 11, 11,
 11, 11, 11, 11, 4, 11, 11, 4,
 3, 4, 3, 1, 4, 3, 1, 4,
 3, 1, 1, 16, 6, 5, 1, 1,
 5, 1, 1, 5, 1, 1, 5, 1,
 1, 1, 31, 29, 29, 28, 16, 29,
 29, 28, 16, 29, 29, 28, 16, 29,
 29, 28, 16, 29, 29, 28, 10, 10,
 6, 2, 1, 2, 2, 1, 6, 11,
 8, 6, 8, 11, 12, 12, 11, 10,
 12, 11, 10, 12, 11, 10, 12, 11,
 10, 12, 16, 28, 11, 29, 29, 16,
 16, 16, 16, 16, 29, 29, 16, 16,
 16, 16, 16, 29, 29, 16, 16, 16,
 16, 16, 29, 29, 16, 16, 16, 16,
 16, 29, 29, 29, 29, 28, 16, 29,
 29, 28, 16, 29, 29, 28, 16, 29,
 29, 28, 16, 29, 29, 28, 10, 10,
 6, 2, 1, 2, 2, 1, 6, 11,
 8, 6, 8, 11, 12, 12, 11, 10,
 12, 11, 10, 12, 11, 10, 12, 11,
 10, 12, 16, 28, 11, 29, 29, 16,
 16, 16, 16, 16, 29, 29, 16, 16,
 16, 16, 16, 29, 29, 16, 16, 16,
 16, 16, 29, 29, 16, 16, 16, 16,
 11, 16, 29, 29, 28, 16, 29, 29,
 28, 16, 29, 29, 28, 16, 29, 29,
 28, 16, 29, 29, 28, 10, 10, 6,
 2, 1, 2, 2, 1, 6, 11, 8,
 6, 8, 11, 12, 12, 11, 10, 12,
 11, 10, 12, 11, 10, 12, 11, 10,
 12, 16, 28, 11, 29, 29, 16, 16,
 16, 16, 16, 29, 29, 16, 16, 16,
 16, 16, 29, 29, 16, 16, 16, 16,
 16, 29, 29, 16, 16, 16, 16, 16,
 11, 29, 11, 29, 29, 28, 16, 29,
 29, 28, 16, 29, 29, 28, 16, 29,
 29, 28, 16, 29, 29, 28, 10, 10,
 6, 2, 1, 2, 2, 1, 6, 11,
 8, 6, 8, 11, 12, 12, 11, 10,
 12, 11, 10, 12, 11, 10, 12, 11,
 10, 12, 16, 28, 11, 29, 29, 16,
 16, 16, 16, 16, 29, 29, 16, 16,
 16, 16, 16, 29, 29, 16, 16, 16,
 16, 16, 29, 29, 16, 16, 16, 16,
 16, 29, 31, 29, 31, 11, 6, 2,
 1, 2, 2, 1, 6, 16, 29, 29,
 28, 29, 29, 16, 12, 11, 10, 12,
 11, 10, 12, 11, 10, 12, 11, 10,
 11, 8, 6, 8, 11, 16, 8, 6,
 6, 2, 1, 2, 2, 1, 6
};

static const short _indic_syllable_machine_index_offsets[] = {
 0, 2, 19, 26, 31, 35, 37, 42,
 46, 48, 53, 57, 59, 64, 68, 70,
 76, 78, 80, 86, 88, 90, 96, 98,
 100, 106, 108, 110, 122, 134, 146, 158,
 170, 182, 194, 206, 218, 230, 232, 249,
 256, 261, 265, 267, 272, 276, 278, 283,
 287, 289, 294, 298, 300, 306, 308, 310,
 316, 318, 320, 326, 328, 330, 336, 338,
 340, 352, 364, 376, 388, 400, 412, 424,
 436, 448, 460, 462, 479, 486, 491, 495,
 497, 502, 506, 508, 513, 517, 519, 524,
 528, 530, 536, 538, 540, 546, 548, 550,
 556, 558, 560, 566, 568, 570, 582, 594,
 606, 618, 630, 642, 654, 666, 678, 680,
 697, 704, 709, 713, 715, 720, 724, 726,
 731, 735, 737, 742, 746, 748, 754, 756,
 758, 764, 766, 768, 774, 776, 778, 784,
 786, 788, 800, 812, 824, 836, 848, 860,
 872, 884, 896, 908, 920, 925, 937, 949,
 954, 958, 963, 967, 969, 974, 978, 980,
 985, 989, 991, 993, 1010, 1017, 1023, 1025,
 1027, 1033, 1035, 1037, 1043, 1045, 1047, 1053,
 1055, 1057, 1059, 1091, 1121, 1151, 1180, 1197,
 1227, 1257, 1286, 1303, 1333, 1363, 1392, 1409,
 1439, 1469, 1498, 1515, 1545, 1575, 1604, 1615,
 1626, 1633, 1636, 1638, 1641, 1644, 1646, 1653,
 1665, 1674, 1681, 1690, 1702, 1715, 1728, 1740,
 1751, 1764, 1776, 1787, 1800, 1812, 1823, 1836,
 1848, 1859, 1872, 1889, 1918, 1930, 1960, 1990,
 2007, 2024, 2041, 2058, 2075, 2105, 2135, 2152,
 2169, 2186, 2203, 2220, 2250, 2280, 2297, 2314,
 2331, 2348, 2365, 2395, 2425, 2442, 2459, 2476,
 2493, 2510, 2540, 2570, 2600, 2630, 2659, 2676,
 2706, 2736, 2765, 2782, 2812, 2842, 2871, 2888,
 2918, 2948, 2977, 2994, 3024, 3054, 3083, 3094,
 3105, 3112, 3115, 3117, 3120, 3123, 3125, 3132,
 3144, 3153, 3160, 3169, 3181, 3194, 3207, 3219,
 3230, 3243, 3255, 3266, 3279, 3291, 3302, 3315,
 3327, 3338, 3351, 3368, 3397, 3409, 3439, 3469,
 3486, 3503, 3520, 3537, 3554, 3584, 3614, 3631,
 3648, 3665, 3682, 3699, 3729, 3759, 3776, 3793,
 3810, 3827, 3844, 3874, 3904, 3921, 3938, 3955,
 3972, 3984, 4001, 4031, 4061, 4090, 4107, 4137,
 4167, 4196, 4213, 4243, 4273, 4302, 4319, 4349,
 4379, 4408, 4425, 4455, 4485, 4514, 4525, 4536,
 4543, 4546, 4548, 4551, 4554, 4556, 4563, 4575,
 4584, 4591, 4600, 4612, 4625, 4638, 4650, 4661,
 4674, 4686, 4697, 4710, 4722, 4733, 4746, 4758,
 4769, 4782, 4799, 4828, 4840, 4870, 4900, 4917,
 4934, 4951, 4968, 4985, 5015, 5045, 5062, 5079,
 5096, 5113, 5130, 5160, 5190, 5207, 5224, 5241,
 5258, 5275, 5305, 5335, 5352, 5369, 5386, 5403,
 5420, 5432, 5462, 5474, 5504, 5534, 5563, 5580,
 5610, 5640, 5669, 5686, 5716, 5746, 5775, 5792,
 5822, 5852, 5881, 5898, 5928, 5958, 5987, 5998,
 6009, 6016, 6019, 6021, 6024, 6027, 6029, 6036,
 6048, 6057, 6064, 6073, 6085, 6098, 6111, 6123,
 6134, 6147, 6159, 6170, 6183, 6195, 6206, 6219,
 6231, 6242, 6255, 6272, 6301, 6313, 6343, 6373,
 6390, 6407, 6424, 6441, 6458, 6488, 6518, 6535,
 6552, 6569, 6586, 6603, 6633, 6663, 6680, 6697,
 6714, 6731, 6748, 6778, 6808, 6825, 6842, 6859,
 6876, 6893, 6923, 6955, 6985, 7017, 7029, 7036,
 7039, 7041, 7044, 7047, 7049, 7056, 7073, 7103,
 7133, 7162, 7192, 7222, 7239, 7252, 7264, 7275,
 7288, 7300, 7311, 7324, 7336, 7347, 7360, 7372,
 7383, 7395, 7404, 7411, 7420, 7432, 7449, 7458,
 7465, 7472, 7475, 7477, 7480, 7483, 7485
};

static const short _indic_syllable_machine_indicies[] = {
 1, 0, 2, 3, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 2, 0, 1, 0, 0, 0, 0,
 4, 0, 5, 5, 6, 1, 0, 7,
 7, 6, 0, 6, 0, 8, 8, 9,
 1, 0, 10, 10, 9, 0, 9, 0,
 11, 11, 12, 1, 0, 13, 13, 12,
 0, 12, 0, 14, 14, 15, 1, 0,
 16, 16, 15, 0, 15, 0, 17, 0,
 0, 0, 1, 0, 18, 0, 19, 0,
 20, 14, 14, 15, 1, 0, 21, 0,
 22, 0, 23, 11, 11, 12, 1, 0,
 24, 0, 25, 0, 26, 8, 8, 9,
 1, 0, 27, 0, 28, 0, 29, 5,
 5, 6, 1, 0, 0, 0, 0, 0,
 29, 0, 29, 5, 5, 6, 1, 0,
 0, 0, 0, 30, 29, 0, 31, 5,
 5, 6, 1, 0, 0, 0, 0, 0,
 31, 0, 31, 5, 5, 6, 1, 0,
 0, 0, 0, 32, 31, 0, 33, 5,
 5, 6, 1, 0, 0, 0, 0, 0,
 33, 0, 33, 5, 5, 6, 1, 0,
 0, 0, 0, 34, 33, 0, 35, 5,
 5, 6, 1, 0, 0, 0, 0, 0,
 35, 0, 35, 5, 5, 6, 1, 0,
 0, 0, 0, 36, 35, 0, 37, 5,
 5, 6, 1, 0, 0, 0, 0, 0,
 37, 0, 37, 5, 5, 6, 1, 0,
 0, 0, 0, 38, 37, 0, 40, 39,
 41, 42, 39, 39, 39, 39, 39, 39,
 39, 39, 39, 39, 39, 39, 39, 41,
 39, 40, 39, 39, 39, 39, 43, 39,
 44, 44, 45, 40, 39, 46, 46, 45,
 39, 45, 39, 47, 47, 48, 40, 39,
 49, 49, 48, 39, 48, 39, 50, 50,
 51, 40, 39, 52, 52, 51, 39, 51,
 39, 53, 53, 54, 40, 39, 55, 55,
 54, 39, 54, 39, 56, 39, 39, 39,
 40, 39, 57, 39, 58, 39, 59, 53,
 53, 54, 40, 39, 60, 39, 61, 39,
 62, 50, 50, 51, 40, 39, 63, 39,
 64, 39, 65, 47, 47, 48, 40, 39,
 66, 39, 67, 39, 68, 44, 44, 45,
 40, 39, 39, 39, 39, 39, 68, 39,
 68, 44, 44, 45, 40, 39, 39, 39,
 39, 69, 68, 39, 70, 44, 44, 45,
 40, 39, 39, 39, 39, 39, 70, 39,
 70, 44, 44, 45, 40, 39, 39, 39,
 39, 71, 70, 39, 72, 44, 44, 45,
 40, 39, 39, 39, 39, 39, 72, 39,
 72, 44, 44, 45, 40, 39, 39, 39,
 39, 73, 72, 39, 74, 44, 44, 45,
 40, 39, 39, 39, 39, 39, 74, 39,
 74, 44, 44, 45, 40, 39, 39, 39,
 39, 75, 74, 39, 76, 44, 44, 45,
 40, 39, 39, 39, 39, 39, 76, 39,
 76, 44, 44, 45, 40, 39, 39, 39,
 39, 77, 76, 39, 79, 78, 80, 81,
 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 80, 78, 79,
 78, 78, 78, 78, 82, 78, 83, 83,
 84, 79, 78, 86, 86, 84, 85, 84,
 85, 87, 87, 88, 79, 78, 89, 89,
 88, 78, 88, 78, 90, 90, 91, 79,
 78, 92, 92, 91, 78, 91, 78, 93,
 93, 94, 79, 78, 95, 95, 94, 78,
 94, 78, 96, 78, 78, 78, 79, 78,
 97, 78, 98, 78, 99, 93, 93, 94,
 79, 78, 100, 78, 101, 78, 102, 90,
 90, 91, 79, 78, 103, 78, 104, 78,
 105, 87, 87, 88, 79, 78, 106, 78,
 107, 78, 108, 83, 83, 84, 79, 78,
 78, 78, 78, 78, 108, 78, 108, 83,
 83, 84, 79, 78, 78, 78, 78, 109,
 108, 78, 110, 83, 83, 84, 79, 78,
 78, 78, 78, 78, 110, 78, 110, 83,
 83, 84, 79, 78, 78, 78, 78, 111,
 110, 78, 112, 83, 83, 84, 79, 78,
 78, 78, 78, 78, 112, 78, 112, 83,
 83, 84, 79, 78, 78, 78, 78, 113,
 112, 78, 114, 83, 83, 84, 79, 78,
 78, 78, 78, 78, 114, 78, 114, 83,
 83, 84, 79, 78, 78, 78, 78, 115,
 114, 78, 116, 83, 83, 84, 79, 78,
 78, 78, 78, 78, 116, 78, 118, 117,
 119, 120, 117, 117, 117, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117, 119,
 117, 118, 117, 117, 117, 117, 121, 117,
 122, 122, 123, 118, 117, 124, 124, 123,
 117, 123, 117, 125, 125, 126, 118, 117,
 127, 127, 126, 117, 126, 117, 128, 128,
 129, 118, 117, 130, 130, 129, 117, 129,
 117, 131, 131, 132, 118, 117, 133, 133,
 132, 117, 132, 117, 134, 117, 117, 117,
 118, 117, 135, 117, 136, 117, 137, 131,
 131, 132, 118, 117, 138, 117, 139, 117,
 140, 128, 128, 129, 118, 117, 141, 117,
 142, 117, 143, 125, 125, 126, 118, 117,
 144, 117, 145, 117, 146, 122, 122, 123,
 118, 117, 117, 117, 117, 117, 146, 117,
 146, 122, 122, 123, 118, 117, 117, 117,
 117, 147, 146, 117, 148, 122, 122, 123,
 118, 117, 117, 117, 117, 117, 148, 117,
 148, 122, 122, 123, 118, 117, 117, 117,
 117, 149, 148, 117, 150, 122, 122, 123,
 118, 117, 117, 117, 117, 117, 150, 117,
 150, 122, 122, 123, 118, 117, 117, 117,
 117, 151, 150, 117, 152, 122, 122, 123,
 118, 117, 117, 117, 117, 117, 152, 117,
 152, 122, 122, 123, 118, 117, 117, 117,
 117, 153, 152, 117, 154, 122, 122, 123,
 118, 117, 117, 117, 117, 117, 154, 117,
 154, 122, 122, 123, 118, 117, 117, 117,
 117, 155, 154, 117, 116, 83, 83, 84,
 79, 78, 78, 78, 78, 156, 116, 78,
 86, 86, 84, 1, 0, 114, 83, 83,
 84, 157, 0, 0, 0, 0, 0, 114,
 0, 114, 83, 83, 84, 157, 0, 0,
 0, 0, 158, 114, 0, 159, 159, 160,
 1, 0, 7, 7, 160, 0, 161, 161,
 162, 157, 0, 163, 163, 162, 0, 162,
 0, 164, 164, 165, 157, 0, 166, 166,
 165, 0, 165, 0, 167, 167, 168, 157,
 0, 169, 169, 168, 0, 168, 0, 157,
 0, 170, 171, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 170, 0, 157, 0, 0, 0, 0, 172,
 0, 173, 0, 0, 0, 157, 0, 174,
 0, 175, 0, 176, 167, 167, 168, 157,
 0, 177, 0, 178, 0, 179, 164, 164,
 165, 157, 0, 180, 0, 181, 0, 182,
 161, 161, 162, 157, 0, 183, 0, 184,
 0, 186, 185, 188, 189, 190, 191, 192,
 193, 84, 79, 194, 195, 196, 196, 156,
 197, 198, 199, 200, 201, 187, 187, 187,
 187, 187, 187, 187, 187, 187, 187, 187,
 187, 202, 187, 204, 205, 206, 207, 6,
 1, 208, 209, 203, 203, 38, 210, 203,
 203, 211, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 212,
 203, 213, 205, 214, 214, 6, 1, 208,
 209, 203, 203, 203, 210, 203, 203, 211,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 212, 203, 205,
 214, 214, 6, 1, 208, 209, 203, 203,
 203, 210, 203, 203, 211, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 212, 203, 215, 203, 203, 203,
 19, 216, 203, 1, 208, 209, 203, 203,
 203, 217, 203, 215, 203, 218, 219, 220,
 221, 6, 1, 208, 209, 203, 203, 36,
 222, 203, 203, 211, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 212, 203, 223, 219, 224, 224, 6,
 1, 208, 209, 203, 203, 203, 222, 203,
 203, 211, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 212,
 203, 219, 224, 224, 6, 1, 208, 209,
 203, 203, 203, 222, 203, 203, 211, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 212, 203, 225, 203,
 203, 203, 19, 226, 203, 1, 208, 209,
 203, 203, 203, 217, 203, 225, 203, 227,
 228, 229, 230, 6, 1, 208, 209, 203,
 203, 34, 231, 203, 203, 211, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 212, 203, 232, 228, 233,
 233, 6, 1, 208, 209, 203, 203, 203,
 231, 203, 203, 211, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 212, 203, 228, 233, 233, 6, 1,
 208, 209, 203, 203, 203, 231, 203, 203,
 211, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 212, 203,
 234, 203, 203, 203, 19, 235, 203, 1,
 208, 209, 203, 203, 203, 217, 203, 234,
 203, 236, 237, 238, 239, 6, 1, 208,
 209, 203, 203, 32, 240, 203, 203, 211,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 212, 203, 241,
 237, 242, 242, 6, 1, 208, 209, 203,
 203, 203, 240, 203, 203, 211, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 212, 203, 237, 242, 242,
 6, 1, 208, 209, 203, 203, 203, 240,
 203, 203, 211, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 212, 203, 243, 203, 203, 203, 19, 244,
 203, 1, 208, 209, 203, 203, 203, 217,
 203, 243, 203, 245, 246, 247, 248, 6,
 1, 208, 209, 203, 203, 30, 249, 203,
 203, 211, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 212,
 203, 250, 246, 251, 251, 6, 1, 208,
 209, 203, 203, 203, 249, 203, 203, 211,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 212, 203, 246,
 251, 251, 6, 1, 208, 209, 203, 203,
 203, 249, 203, 203, 211, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 212, 203, 19, 252, 203, 1,
 208, 209, 203, 203, 203, 217, 203, 253,
 253, 203, 1, 208, 209, 203, 203, 203,
 217, 203, 254, 203, 203, 255, 208, 209,
 203, 208, 209, 203, 256, 203, 208, 257,
 203, 208, 258, 203, 208, 203, 254, 203,
 203, 203, 208, 209, 203, 259, 203, 260,
 261, 203, 1, 208, 209, 203, 203, 4,
 203, 3, 203, 253, 253, 203, 1, 208,
 209, 203, 253, 253, 203, 1, 208, 209,
 203, 259, 203, 253, 253, 203, 1, 208,
 209, 203, 259, 203, 260, 253, 203, 1,
 208, 209, 203, 203, 4, 203, 19, 203,
 262, 262, 6, 1, 208, 209, 203, 203,
 203, 217, 203, 263, 28, 264, 265, 9,
 1, 208, 209, 203, 203, 203, 217, 203,
 28, 264, 265, 9, 1, 208, 209, 203,
 203, 203, 217, 203, 264, 264, 9, 1,
 208, 209, 203, 203, 203, 217, 203, 266,
 25, 267, 268, 12, 1, 208, 209, 203,
 203, 203, 217, 203, 25, 267, 268, 12,
 1, 208, 209, 203, 203, 203, 217, 203,
 267, 267, 12, 1, 208, 209, 203, 203,
 203, 217, 203, 269, 22, 270, 271, 15,
 1, 208, 209, 203, 203, 203, 217, 203,
 22, 270, 271, 15, 1, 208, 209, 203,
 203, 203, 217, 203, 270, 270, 15, 1,
 208, 209, 203, 203, 203, 217, 203, 272,
 19, 253, 273, 203, 1, 208, 209, 203,
 203, 203, 217, 203, 19, 253, 273, 203,
 1, 208, 209, 203, 203, 203, 217, 203,
 253, 274, 203, 1, 208, 209, 203, 203,
 203, 217, 203, 19, 203, 253, 253, 203,
 1, 208, 209, 203, 203, 203, 217, 203,
 2, 3, 203, 203, 19, 252, 203, 1,
 208, 209, 203, 203, 203, 217, 203, 2,
 203, 246, 251, 251, 6, 1, 208, 209,
 203, 203, 203, 249, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 212, 203, 246, 251,
 251, 6, 1, 208, 209, 203, 203, 203,
 249, 203, 245, 246, 251, 251, 6, 1,
 208, 209, 203, 203, 203, 249, 203, 203,
 211, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 212, 203,
 245, 246, 247, 251, 6, 1, 208, 209,
 203, 203, 30, 249, 203, 203, 211, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 212, 203, 243, 203,
 275, 203, 262, 262, 6, 1, 208, 209,
 203, 203, 203, 217, 203, 243, 203, 243,
 203, 203, 203, 253, 253, 203, 1, 208,
 209, 203, 203, 203, 217, 203, 243, 203,
 243, 203, 203, 203, 253, 276, 203, 1,
 208, 209, 203, 203, 203, 217, 203, 243,
 203, 243, 203, 275, 203, 253, 253, 203,
 1, 208, 209, 203, 203, 203, 217, 203,
 243, 203, 243, 3, 203, 203, 19, 244,
 203, 1, 208, 209, 203, 203, 203, 217,
 203, 243, 203, 236, 237, 242, 242, 6,
 1, 208, 209, 203, 203, 203, 240, 203,
 203, 211, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 212,
 203, 236, 237, 238, 242, 6, 1, 208,
 209, 203, 203, 32, 240, 203, 203, 211,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 212, 203, 234,
 203, 277, 203, 262, 262, 6, 1, 208,
 209, 203, 203, 203, 217, 203, 234, 203,
 234, 203, 203, 203, 253, 253, 203, 1,
 208, 209, 203, 203, 203, 217, 203, 234,
 203, 234, 203, 203, 203, 253, 278, 203,
 1, 208, 209, 203, 203, 203, 217, 203,
 234, 203, 234, 203, 277, 203, 253, 253,
 203, 1, 208, 209, 203, 203, 203, 217,
 203, 234, 203, 234, 3, 203, 203, 19,
 235, 203, 1, 208, 209, 203, 203, 203,
 217, 203, 234, 203, 227, 228, 233, 233,
 6, 1, 208, 209, 203, 203, 203, 231,
 203, 203, 211, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 212, 203, 227, 228, 229, 233, 6, 1,
 208, 209, 203, 203, 34, 231, 203, 203,
 211, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 212, 203,
 225, 203, 279, 203, 262, 262, 6, 1,
 208, 209, 203, 203, 203, 217, 203, 225,
 203, 225, 203, 203, 203, 253, 253, 203,
 1, 208, 209, 203, 203, 203, 217, 203,
 225, 203, 225, 203, 203, 203, 253, 280,
 203, 1, 208, 209, 203, 203, 203, 217,
 203, 225, 203, 225, 203, 279, 203, 253,
 253, 203, 1, 208, 209, 203, 203, 203,
 217, 203, 225, 203, 225, 3, 203, 203,
 19, 226, 203, 1, 208, 209, 203, 203,
 203, 217, 203, 225, 203, 218, 219, 224,
 224, 6, 1, 208, 209, 203, 203, 203,
 222, 203, 203, 211, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 212, 203, 218, 219, 220, 224, 6,
 1, 208, 209, 203, 203, 36, 222, 203,
 203, 211, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 212,
 203, 215, 203, 281, 203, 262, 262, 6,
 1, 208, 209, 203, 203, 203, 217, 203,
 215, 203, 215, 203, 203, 203, 253, 253,
 203, 1, 208, 209, 203, 203, 203, 217,
 203, 215, 203, 215, 203, 203, 203, 253,
 282, 203, 1, 208, 209, 203, 203, 203,
 217, 203, 215, 203, 215, 203, 281, 203,
 253, 253, 203, 1, 208, 209, 203, 203,
 203, 217, 203, 215, 203, 215, 3, 203,
 203, 19, 216, 203, 1, 208, 209, 203,
 203, 203, 217, 203, 215, 203, 204, 205,
 214, 214, 6, 1, 208, 209, 203, 203,
 203, 210, 203, 203, 211, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 212, 203, 204, 205, 206, 214,
 6, 1, 208, 209, 203, 203, 38, 210,
 203, 203, 211, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 212, 203, 284, 285, 286, 287, 45, 40,
 288, 289, 283, 283, 77, 290, 283, 283,
 291, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 292, 283,
 293, 285, 294, 287, 45, 40, 288, 289,
 283, 283, 283, 290, 283, 283, 291, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 292, 283, 285, 294,
 287, 45, 40, 288, 289, 283, 283, 283,
 290, 283, 283, 291, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 292, 283, 295, 283, 283, 283, 58,
 296, 283, 40, 288, 289, 283, 283, 283,
 297, 283, 295, 283, 298, 299, 300, 301,
 45, 40, 288, 289, 283, 283, 75, 302,
 283, 283, 291, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 292, 283, 303, 299, 304, 304, 45, 40,
 288, 289, 283, 283, 283, 302, 283, 283,
 291, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 292, 283,
 299, 304, 304, 45, 40, 288, 289, 283,
 283, 283, 302, 283, 283, 291, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 292, 283, 305, 283, 283,
 283, 58, 306, 283, 40, 288, 289, 283,
 283, 283, 297, 283, 305, 283, 307, 308,
 309, 310, 45, 40, 288, 289, 283, 283,
 73, 311, 283, 283, 291, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 292, 283, 312, 308, 313, 313,
 45, 40, 288, 289, 283, 283, 283, 311,
 283, 283, 291, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 292, 283, 308, 313, 313, 45, 40, 288,
 289, 283, 283, 283, 311, 283, 283, 291,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 292, 283, 314,
 283, 283, 283, 58, 315, 283, 40, 288,
 289, 283, 283, 283, 297, 283, 314, 283,
 316, 317, 318, 319, 45, 40, 288, 289,
 283, 283, 71, 320, 283, 283, 291, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 292, 283, 321, 317,
 322, 322, 45, 40, 288, 289, 283, 283,
 283, 320, 283, 283, 291, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 292, 283, 317, 322, 322, 45,
 40, 288, 289, 283, 283, 283, 320, 283,
 283, 291, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 292,
 283, 323, 283, 283, 283, 58, 324, 283,
 40, 288, 289, 283, 283, 283, 297, 283,
 323, 283, 325, 326, 327, 328, 45, 40,
 288, 289, 283, 283, 69, 329, 283, 283,
 291, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 292, 283,
 330, 326, 331, 331, 45, 40, 288, 289,
 283, 283, 283, 329, 283, 283, 291, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 292, 283, 326, 331,
 331, 45, 40, 288, 289, 283, 283, 283,
 329, 283, 283, 291, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 292, 283, 58, 332, 283, 40, 288,
 289, 283, 283, 283, 297, 283, 333, 333,
 283, 40, 288, 289, 283, 283, 283, 297,
 283, 334, 283, 283, 335, 288, 289, 283,
 288, 289, 283, 336, 283, 288, 337, 283,
 288, 338, 283, 288, 283, 334, 283, 283,
 283, 288, 289, 283, 339, 283, 340, 341,
 283, 40, 288, 289, 283, 283, 43, 283,
 42, 283, 333, 333, 283, 40, 288, 289,
 283, 333, 333, 283, 40, 288, 289, 283,
 339, 283, 333, 333, 283, 40, 288, 289,
 283, 339, 283, 340, 333, 283, 40, 288,
 289, 283, 283, 43, 283, 58, 283, 342,
 342, 45, 40, 288, 289, 283, 283, 283,
 297, 283, 343, 67, 344, 345, 48, 40,
 288, 289, 283, 283, 283, 297, 283, 67,
 344, 345, 48, 40, 288, 289, 283, 283,
 283, 297, 283, 344, 344, 48, 40, 288,
 289, 283, 283, 283, 297, 283, 346, 64,
 347, 348, 51, 40, 288, 289, 283, 283,
 283, 297, 283, 64, 347, 348, 51, 40,
 288, 289, 283, 283, 283, 297, 283, 347,
 347, 51, 40, 288, 289, 283, 283, 283,
 297, 283, 349, 61, 350, 351, 54, 40,
 288, 289, 283, 283, 283, 297, 283, 61,
 350, 351, 54, 40, 288, 289, 283, 283,
 283, 297, 283, 350, 350, 54, 40, 288,
 289, 283, 283, 283, 297, 283, 352, 58,
 333, 353, 283, 40, 288, 289, 283, 283,
 283, 297, 283, 58, 333, 353, 283, 40,
 288, 289, 283, 283, 283, 297, 283, 333,
 354, 283, 40, 288, 289, 283, 283, 283,
 297, 283, 58, 283, 333, 333, 283, 40,
 288, 289, 283, 283, 283, 297, 283, 41,
 42, 283, 283, 58, 332, 283, 40, 288,
 289, 283, 283, 283, 297, 283, 41, 283,
 326, 331, 331, 45, 40, 288, 289, 283,
 283, 283, 329, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 292, 283, 326, 331, 331,
 45, 40, 288, 289, 283, 283, 283, 329,
 283, 325, 326, 331, 331, 45, 40, 288,
 289, 283, 283, 283, 329, 283, 283, 291,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 292, 283, 325,
 326, 327, 331, 45, 40, 288, 289, 283,
 283, 69, 329, 283, 283, 291, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 292, 283, 323, 283, 355,
 283, 342, 342, 45, 40, 288, 289, 283,
 283, 283, 297, 283, 323, 283, 323, 283,
 283, 283, 333, 333, 283, 40, 288, 289,
 283, 283, 283, 297, 283, 323, 283, 323,
 283, 283, 283, 333, 356, 283, 40, 288,
 289, 283, 283, 283, 297, 283, 323, 283,
 323, 283, 355, 283, 333, 333, 283, 40,
 288, 289, 283, 283, 283, 297, 283, 323,
 283, 323, 42, 283, 283, 58, 324, 283,
 40, 288, 289, 283, 283, 283, 297, 283,
 323, 283, 316, 317, 322, 322, 45, 40,
 288, 289, 283, 283, 283, 320, 283, 283,
 291, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 292, 283,
 316, 317, 318, 322, 45, 40, 288, 289,
 283, 283, 71, 320, 283, 283, 291, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 292, 283, 314, 283,
 357, 283, 342, 342, 45, 40, 288, 289,
 283, 283, 283, 297, 283, 314, 283, 314,
 283, 283, 283, 333, 333, 283, 40, 288,
 289, 283, 283, 283, 297, 283, 314, 283,
 314, 283, 283, 283, 333, 358, 283, 40,
 288, 289, 283, 283, 283, 297, 283, 314,
 283, 314, 283, 357, 283, 333, 333, 283,
 40, 288, 289, 283, 283, 283, 297, 283,
 314, 283, 314, 42, 283, 283, 58, 315,
 283, 40, 288, 289, 283, 283, 283, 297,
 283, 314, 283, 307, 308, 313, 313, 45,
 40, 288, 289, 283, 283, 283, 311, 283,
 283, 291, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 292,
 283, 307, 308, 309, 313, 45, 40, 288,
 289, 283, 283, 73, 311, 283, 283, 291,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 292, 283, 305,
 283, 359, 283, 342, 342, 45, 40, 288,
 289, 283, 283, 283, 297, 283, 305, 283,
 305, 283, 283, 283, 333, 333, 283, 40,
 288, 289, 283, 283, 283, 297, 283, 305,
 283, 305, 283, 283, 283, 333, 360, 283,
 40, 288, 289, 283, 283, 283, 297, 283,
 305, 283, 305, 283, 359, 283, 333, 333,
 283, 40, 288, 289, 283, 283, 283, 297,
 283, 305, 283, 305, 42, 283, 283, 58,
 306, 283, 40, 288, 289, 283, 283, 283,
 297, 283, 305, 283, 298, 299, 304, 304,
 45, 40, 288, 289, 283, 283, 283, 302,
 283, 283, 291, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 283, 283,
 292, 283, 298, 299, 300, 304, 45, 40,
 288, 289, 283, 283, 75, 302, 283, 283,
 291, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 283, 292, 283,
 295, 283, 361, 283, 342, 342, 45, 40,
 288, 289, 283, 283, 283, 297, 283, 295,
 283, 295, 283, 283, 283, 333, 333, 283,
 40, 288, 289, 283, 283, 283, 297, 283,
 295, 283, 295, 283, 283, 283, 333, 362,
 283, 40, 288, 289, 283, 283, 283, 297,
 283, 295, 283, 295, 283, 361, 283, 333,
 333, 283, 40, 288, 289, 283, 283, 283,
 297, 283, 295, 283, 76, 44, 44, 45,
 40, 283, 283, 283, 283, 283, 76, 283,
 295, 42, 283, 283, 58, 296, 283, 40,
 288, 289, 283, 283, 283, 297, 283, 295,
 283, 284, 285, 294, 287, 45, 40, 288,
 289, 283, 283, 283, 290, 283, 283, 291,
 283, 283, 283, 283, 283, 283, 283, 283,
 283, 283, 283, 283, 283, 292, 283, 364,
 191, 365, 365, 84, 79, 194, 195, 363,
 363, 363, 197, 363, 363, 200, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 202, 363, 191, 365, 365,
 84, 79, 194, 195, 363, 363, 363, 197,
 363, 363, 200, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 202, 363, 366, 363, 363, 363, 98, 367,
 363, 79, 194, 195, 363, 363, 363, 368,
 363, 366, 363, 369, 370, 371, 372, 84,
 79, 194, 195, 363, 363, 115, 373, 363,
 363, 200, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 202,
 363, 374, 370, 375, 375, 84, 79, 194,
 195, 363, 363, 363, 373, 363, 363, 200,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 202, 363, 370,
 375, 375, 84, 79, 194, 195, 363, 363,
 363, 373, 363, 363, 200, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 202, 363, 376, 363, 363, 363,
 98, 377, 363, 79, 194, 195, 363, 363,
 363, 368, 363, 376, 363, 378, 379, 380,
 381, 84, 79, 194, 195, 363, 363, 113,
 382, 363, 363, 200, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 202, 363, 383, 379, 384, 384, 84,
 79, 194, 195, 363, 363, 363, 382, 363,
 363, 200, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 202,
 363, 379, 384, 384, 84, 79, 194, 195,
 363, 363, 363, 382, 363, 363, 200, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 202, 363, 385, 363,
 363, 363, 98, 386, 363, 79, 194, 195,
 363, 363, 363, 368, 363, 385, 363, 387,
 388, 389, 390, 84, 79, 194, 195, 363,
 363, 111, 391, 363, 363, 200, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 202, 363, 392, 388, 393,
 393, 84, 79, 194, 195, 363, 363, 363,
 391, 363, 363, 200, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 202, 363, 388, 393, 393, 84, 79,
 194, 195, 363, 363, 363, 391, 363, 363,
 200, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 202, 363,
 394, 363, 363, 363, 98, 395, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 394,
 363, 396, 397, 398, 399, 84, 79, 194,
 195, 363, 363, 109, 400, 363, 363, 200,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 202, 363, 401,
 397, 402, 402, 84, 79, 194, 195, 363,
 363, 363, 400, 363, 363, 200, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 202, 363, 397, 402, 402,
 84, 79, 194, 195, 363, 363, 363, 400,
 363, 363, 200, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 202, 363, 98, 403, 363, 79, 194, 195,
 363, 363, 363, 368, 363, 404, 404, 363,
 79, 194, 195, 363, 363, 363, 368, 363,
 405, 363, 363, 406, 194, 195, 363, 194,
 195, 363, 407, 363, 194, 408, 363, 194,
 409, 363, 194, 363, 405, 363, 363, 363,
 194, 195, 363, 410, 363, 411, 412, 363,
 79, 194, 195, 363, 363, 82, 363, 81,
 363, 404, 404, 363, 79, 194, 195, 363,
 404, 404, 363, 79, 194, 195, 363, 410,
 363, 404, 404, 363, 79, 194, 195, 363,
 410, 363, 411, 404, 363, 79, 194, 195,
 363, 363, 82, 363, 98, 363, 413, 413,
 84, 79, 194, 195, 363, 363, 363, 368,
 363, 414, 107, 415, 416, 88, 79, 194,
 195, 363, 363, 363, 368, 363, 107, 415,
 416, 88, 79, 194, 195, 363, 363, 363,
 368, 363, 415, 415, 88, 79, 194, 195,
 363, 363, 363, 368, 363, 417, 104, 418,
 419, 91, 79, 194, 195, 363, 363, 363,
 368, 363, 104, 418, 419, 91, 79, 194,
 195, 363, 363, 363, 368, 363, 418, 418,
 91, 79, 194, 195, 363, 363, 363, 368,
 363, 420, 101, 421, 422, 94, 79, 194,
 195, 363, 363, 363, 368, 363, 101, 421,
 422, 94, 79, 194, 195, 363, 363, 363,
 368, 363, 421, 421, 94, 79, 194, 195,
 363, 363, 363, 368, 363, 423, 98, 404,
 424, 363, 79, 194, 195, 363, 363, 363,
 368, 363, 98, 404, 424, 363, 79, 194,
 195, 363, 363, 363, 368, 363, 404, 425,
 363, 79, 194, 195, 363, 363, 363, 368,
 363, 98, 363, 404, 404, 363, 79, 194,
 195, 363, 363, 363, 368, 363, 80, 81,
 363, 363, 98, 403, 363, 79, 194, 195,
 363, 363, 363, 368, 363, 80, 363, 397,
 402, 402, 84, 79, 194, 195, 363, 363,
 363, 400, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 202, 363, 397, 402, 402, 84,
 79, 194, 195, 363, 363, 363, 400, 363,
 396, 397, 402, 402, 84, 79, 194, 195,
 363, 363, 363, 400, 363, 363, 200, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 202, 363, 396, 397,
 398, 402, 84, 79, 194, 195, 363, 363,
 109, 400, 363, 363, 200, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 202, 363, 394, 363, 426, 363,
 413, 413, 84, 79, 194, 195, 363, 363,
 363, 368, 363, 394, 363, 394, 363, 363,
 363, 404, 404, 363, 79, 194, 195, 363,
 363, 363, 368, 363, 394, 363, 394, 363,
 363, 363, 404, 427, 363, 79, 194, 195,
 363, 363, 363, 368, 363, 394, 363, 394,
 363, 426, 363, 404, 404, 363, 79, 194,
 195, 363, 363, 363, 368, 363, 394, 363,
 394, 81, 363, 363, 98, 395, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 394,
 363, 387, 388, 393, 393, 84, 79, 194,
 195, 363, 363, 363, 391, 363, 363, 200,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 202, 363, 387,
 388, 389, 393, 84, 79, 194, 195, 363,
 363, 111, 391, 363, 363, 200, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 202, 363, 385, 363, 428,
 363, 413, 413, 84, 79, 194, 195, 363,
 363, 363, 368, 363, 385, 363, 385, 363,
 363, 363, 404, 404, 363, 79, 194, 195,
 363, 363, 363, 368, 363, 385, 363, 385,
 363, 363, 363, 404, 429, 363, 79, 194,
 195, 363, 363, 363, 368, 363, 385, 363,
 385, 363, 428, 363, 404, 404, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 385,
 363, 385, 81, 363, 363, 98, 386, 363,
 79, 194, 195, 363, 363, 363, 368, 363,
 385, 363, 378, 379, 384, 384, 84, 79,
 194, 195, 363, 363, 363, 382, 363, 363,
 200, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 202, 363,
 378, 379, 380, 384, 84, 79, 194, 195,
 363, 363, 113, 382, 363, 363, 200, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 202, 363, 376, 363,
 430, 363, 413, 413, 84, 79, 194, 195,
 363, 363, 363, 368, 363, 376, 363, 376,
 363, 363, 363, 404, 404, 363, 79, 194,
 195, 363, 363, 363, 368, 363, 376, 363,
 376, 363, 363, 363, 404, 431, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 376,
 363, 376, 363, 430, 363, 404, 404, 363,
 79, 194, 195, 363, 363, 363, 368, 363,
 376, 363, 376, 81, 363, 363, 98, 377,
 363, 79, 194, 195, 363, 363, 363, 368,
 363, 376, 363, 369, 370, 375, 375, 84,
 79, 194, 195, 363, 363, 363, 373, 363,
 363, 200, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 202,
 363, 369, 370, 371, 375, 84, 79, 194,
 195, 363, 363, 115, 373, 363, 363, 200,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 202, 363, 366,
 363, 432, 363, 413, 413, 84, 79, 194,
 195, 363, 363, 363, 368, 363, 366, 363,
 366, 363, 363, 363, 404, 404, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 366,
 363, 366, 363, 363, 363, 404, 433, 363,
 79, 194, 195, 363, 363, 363, 368, 363,
 366, 363, 366, 363, 432, 363, 404, 404,
 363, 79, 194, 195, 363, 363, 363, 368,
 363, 366, 363, 366, 81, 363, 363, 98,
 367, 363, 79, 194, 195, 363, 363, 363,
 368, 363, 366, 363, 116, 83, 83, 84,
 79, 434, 434, 434, 434, 156, 116, 434,
 190, 191, 365, 365, 84, 79, 194, 195,
 363, 363, 363, 197, 363, 363, 200, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 363, 363, 363, 202, 363, 116, 83,
 83, 84, 79, 434, 434, 434, 434, 434,
 116, 434, 436, 437, 438, 439, 123, 118,
 440, 441, 435, 435, 155, 442, 435, 435,
 443, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 444, 435,
 445, 437, 439, 439, 123, 118, 440, 441,
 435, 435, 435, 442, 435, 435, 443, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 444, 435, 437, 439,
 439, 123, 118, 440, 441, 435, 435, 435,
 442, 435, 435, 443, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 444, 435, 446, 435, 435, 435, 136,
 447, 435, 118, 440, 441, 435, 435, 435,
 448, 435, 446, 435, 449, 450, 451, 452,
 123, 118, 440, 441, 435, 435, 153, 453,
 435, 435, 443, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 444, 435, 454, 450, 455, 455, 123, 118,
 440, 441, 435, 435, 435, 453, 435, 435,
 443, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 444, 435,
 450, 455, 455, 123, 118, 440, 441, 435,
 435, 435, 453, 435, 435, 443, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 444, 435, 456, 435, 435,
 435, 136, 457, 435, 118, 440, 441, 435,
 435, 435, 448, 435, 456, 435, 458, 459,
 460, 461, 123, 118, 440, 441, 435, 435,
 151, 462, 435, 435, 443, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 444, 435, 463, 459, 464, 464,
 123, 118, 440, 441, 435, 435, 435, 462,
 435, 435, 443, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 444, 435, 459, 464, 464, 123, 118, 440,
 441, 435, 435, 435, 462, 435, 435, 443,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 444, 435, 465,
 435, 435, 435, 136, 466, 435, 118, 440,
 441, 435, 435, 435, 448, 435, 465, 435,
 467, 468, 469, 470, 123, 118, 440, 441,
 435, 435, 149, 471, 435, 435, 443, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 444, 435, 472, 468,
 473, 473, 123, 118, 440, 441, 435, 435,
 435, 471, 435, 435, 443, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 444, 435, 468, 473, 473, 123,
 118, 440, 441, 435, 435, 435, 471, 435,
 435, 443, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 444,
 435, 474, 435, 435, 435, 136, 475, 435,
 118, 440, 441, 435, 435, 435, 448, 435,
 474, 435, 476, 477, 478, 479, 123, 118,
 440, 441, 435, 435, 147, 480, 435, 435,
 443, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 444, 435,
 481, 477, 482, 482, 123, 118, 440, 441,
 435, 435, 435, 480, 435, 435, 443, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 444, 435, 477, 482,
 482, 123, 118, 440, 441, 435, 435, 435,
 480, 435, 435, 443, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 444, 435, 136, 483, 435, 118, 440,
 441, 435, 435, 435, 448, 435, 484, 484,
 435, 118, 440, 441, 435, 435, 435, 448,
 435, 485, 435, 435, 486, 440, 441, 435,
 440, 441, 435, 487, 435, 440, 488, 435,
 440, 489, 435, 440, 435, 485, 435, 435,
 435, 440, 441, 435, 490, 435, 491, 492,
 435, 118, 440, 441, 435, 435, 121, 435,
 120, 435, 484, 484, 435, 118, 440, 441,
 435, 484, 484, 435, 118, 440, 441, 435,
 490, 435, 484, 484, 435, 118, 440, 441,
 435, 490, 435, 491, 484, 435, 118, 440,
 441, 435, 435, 121, 435, 136, 435, 493,
 493, 123, 118, 440, 441, 435, 435, 435,
 448, 435, 494, 145, 495, 496, 126, 118,
 440, 441, 435, 435, 435, 448, 435, 145,
 495, 496, 126, 118, 440, 441, 435, 435,
 435, 448, 435, 495, 495, 126, 118, 440,
 441, 435, 435, 435, 448, 435, 497, 142,
 498, 499, 129, 118, 440, 441, 435, 435,
 435, 448, 435, 142, 498, 499, 129, 118,
 440, 441, 435, 435, 435, 448, 435, 498,
 498, 129, 118, 440, 441, 435, 435, 435,
 448, 435, 500, 139, 501, 502, 132, 118,
 440, 441, 435, 435, 435, 448, 435, 139,
 501, 502, 132, 118, 440, 441, 435, 435,
 435, 448, 435, 501, 501, 132, 118, 440,
 441, 435, 435, 435, 448, 435, 503, 136,
 484, 504, 435, 118, 440, 441, 435, 435,
 435, 448, 435, 136, 484, 504, 435, 118,
 440, 441, 435, 435, 435, 448, 435, 484,
 505, 435, 118, 440, 441, 435, 435, 435,
 448, 435, 136, 435, 484, 484, 435, 118,
 440, 441, 435, 435, 435, 448, 435, 119,
 120, 435, 435, 136, 483, 435, 118, 440,
 441, 435, 435, 435, 448, 435, 119, 435,
 477, 482, 482, 123, 118, 440, 441, 435,
 435, 435, 480, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 444, 435, 477, 482, 482,
 123, 118, 440, 441, 435, 435, 435, 480,
 435, 476, 477, 482, 482, 123, 118, 440,
 441, 435, 435, 435, 480, 435, 435, 443,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 444, 435, 476,
 477, 478, 482, 123, 118, 440, 441, 435,
 435, 147, 480, 435, 435, 443, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 444, 435, 474, 435, 506,
 435, 493, 493, 123, 118, 440, 441, 435,
 435, 435, 448, 435, 474, 435, 474, 435,
 435, 435, 484, 484, 435, 118, 440, 441,
 435, 435, 435, 448, 435, 474, 435, 474,
 435, 435, 435, 484, 507, 435, 118, 440,
 441, 435, 435, 435, 448, 435, 474, 435,
 474, 435, 506, 435, 484, 484, 435, 118,
 440, 441, 435, 435, 435, 448, 435, 474,
 435, 474, 120, 435, 435, 136, 475, 435,
 118, 440, 441, 435, 435, 435, 448, 435,
 474, 435, 467, 468, 473, 473, 123, 118,
 440, 441, 435, 435, 435, 471, 435, 435,
 443, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 444, 435,
 467, 468, 469, 473, 123, 118, 440, 441,
 435, 435, 149, 471, 435, 435, 443, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 444, 435, 465, 435,
 508, 435, 493, 493, 123, 118, 440, 441,
 435, 435, 435, 448, 435, 465, 435, 465,
 435, 435, 435, 484, 484, 435, 118, 440,
 441, 435, 435, 435, 448, 435, 465, 435,
 465, 435, 435, 435, 484, 509, 435, 118,
 440, 441, 435, 435, 435, 448, 435, 465,
 435, 465, 435, 508, 435, 484, 484, 435,
 118, 440, 441, 435, 435, 435, 448, 435,
 465, 435, 465, 120, 435, 435, 136, 466,
 435, 118, 440, 441, 435, 435, 435, 448,
 435, 465, 435, 458, 459, 464, 464, 123,
 118, 440, 441, 435, 435, 435, 462, 435,
 435, 443, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 444,
 435, 458, 459, 460, 464, 123, 118, 440,
 441, 435, 435, 151, 462, 435, 435, 443,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 444, 435, 456,
 435, 510, 435, 493, 493, 123, 118, 440,
 441, 435, 435, 435, 448, 435, 456, 435,
 456, 435, 435, 435, 484, 484, 435, 118,
 440, 441, 435, 435, 435, 448, 435, 456,
 435, 456, 435, 435, 435, 484, 511, 435,
 118, 440, 441, 435, 435, 435, 448, 435,
 456, 435, 456, 435, 510, 435, 484, 484,
 435, 118, 440, 441, 435, 435, 435, 448,
 435, 456, 435, 456, 120, 435, 435, 136,
 457, 435, 118, 440, 441, 435, 435, 435,
 448, 435, 456, 435, 449, 450, 455, 455,
 123, 118, 440, 441, 435, 435, 435, 453,
 435, 435, 443, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 444, 435, 449, 450, 451, 455, 123, 118,
 440, 441, 435, 435, 153, 453, 435, 435,
 443, 435, 435, 435, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 444, 435,
 446, 435, 512, 435, 493, 493, 123, 118,
 440, 441, 435, 435, 435, 448, 435, 446,
 435, 446, 435, 435, 435, 484, 484, 435,
 118, 440, 441, 435, 435, 435, 448, 435,
 446, 435, 446, 435, 435, 435, 484, 513,
 435, 118, 440, 441, 435, 435, 435, 448,
 435, 446, 435, 446, 435, 512, 435, 484,
 484, 435, 118, 440, 441, 435, 435, 435,
 448, 435, 446, 435, 446, 120, 435, 435,
 136, 447, 435, 118, 440, 441, 435, 435,
 435, 448, 435, 446, 435, 436, 437, 439,
 439, 123, 118, 440, 441, 435, 435, 435,
 442, 435, 435, 443, 435, 435, 435, 435,
 435, 435, 435, 435, 435, 435, 435, 435,
 435, 444, 435, 188, 189, 190, 191, 514,
 365, 84, 79, 194, 195, 196, 196, 156,
 197, 363, 188, 200, 363, 363, 363, 363,
 363, 363, 363, 363, 363, 363, 363, 363,
 363, 202, 363, 204, 515, 206, 207, 6,
 1, 208, 209, 203, 203, 38, 210, 203,
 203, 211, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 212,
 203, 215, 189, 190, 191, 516, 517, 84,
 157, 518, 519, 203, 196, 156, 520, 203,
 215, 200, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 202,
 203, 116, 521, 521, 84, 157, 208, 209,
 203, 203, 156, 522, 203, 523, 203, 203,
 524, 518, 519, 203, 518, 519, 203, 256,
 203, 518, 525, 203, 518, 526, 203, 518,
 203, 523, 203, 203, 203, 518, 519, 203,
 527, 3, 363, 363, 404, 433, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 527,
 363, 528, 370, 529, 530, 84, 157, 518,
 519, 203, 203, 158, 373, 203, 203, 200,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 202, 203, 531,
 370, 532, 532, 84, 157, 518, 519, 203,
 203, 203, 373, 203, 203, 200, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 202, 203, 370, 532, 532,
 84, 157, 518, 519, 203, 203, 203, 373,
 203, 203, 200, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 202, 203, 528, 370, 532, 532, 84, 157,
 518, 519, 203, 203, 203, 373, 203, 203,
 200, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 203, 203, 202, 203,
 528, 370, 529, 532, 84, 157, 518, 519,
 203, 203, 158, 373, 203, 203, 200, 203,
 203, 203, 203, 203, 203, 203, 203, 203,
 203, 203, 203, 203, 202, 203, 215, 203,
 281, 116, 533, 533, 160, 157, 208, 209,
 203, 203, 203, 522, 203, 215, 203, 534,
 184, 535, 536, 162, 157, 518, 519, 203,
 203, 203, 537, 203, 184, 535, 536, 162,
 157, 518, 519, 203, 203, 203, 537, 203,
 535, 535, 162, 157, 518, 519, 203, 203,
 203, 537, 203, 538, 181, 539, 540, 165,
 157, 518, 519, 203, 203, 203, 537, 203,
 181, 539, 540, 165, 157, 518, 519, 203,
 203, 203, 537, 203, 539, 539, 165, 157,
 518, 519, 203, 203, 203, 537, 203, 541,
 178, 542, 543, 168, 157, 518, 519, 203,
 203, 203, 537, 203, 178, 542, 543, 168,
 157, 518, 519, 203, 203, 203, 537, 203,
 542, 542, 168, 157, 518, 519, 203, 203,
 203, 537, 203, 544, 175, 545, 546, 203,
 157, 518, 519, 203, 203, 203, 537, 203,
 175, 545, 546, 203, 157, 518, 519, 203,
 203, 203, 537, 203, 545, 545, 203, 157,
 518, 519, 203, 203, 203, 537, 203, 547,
 203, 548, 549, 203, 157, 518, 519, 203,
 203, 172, 203, 171, 203, 545, 545, 203,
 157, 518, 519, 203, 545, 545, 203, 157,
 518, 519, 203, 547, 203, 545, 545, 203,
 157, 518, 519, 203, 547, 203, 548, 545,
 203, 157, 518, 519, 203, 203, 172, 203,
 527, 171, 363, 363, 98, 367, 363, 79,
 194, 195, 363, 363, 363, 368, 363, 527,
 363, 551, 550, 552, 552, 550, 186, 553,
 554, 550, 552, 552, 550, 186, 553, 554,
 550, 555, 550, 550, 556, 553, 554, 550,
 553, 554, 550, 557, 550, 553, 558, 550,
 553, 559, 550, 553, 550, 555, 550, 550,
 550, 553, 554, 550, 0
};

static const short _indic_syllable_machine_trans_targs[] = {
 178, 200, 207, 209, 210, 4, 213, 5,
 7, 216, 8, 10, 219, 11, 13, 222,
 14, 16, 17, 199, 19, 20, 221, 22,
 23, 218, 25, 26, 215, 224, 229, 233,
 236, 240, 243, 247, 250, 254, 257, 178,
 280, 287, 289, 290, 41, 293, 42, 44,
 296, 45, 47, 299, 48, 50, 302, 51,
 53, 54, 279, 56, 57, 301, 59, 60,
 298, 62, 63, 295, 304, 309, 313, 316,
 320, 323, 327, 330, 334, 338, 178, 359,
 366, 368, 369, 78, 372, 178, 79, 81,
 375, 82, 84, 378, 85, 87, 381, 88,
 90, 91, 358, 93, 94, 380, 96, 97,
 377, 99, 100, 374, 383, 388, 392, 395,
 399, 402, 406, 409, 413, 178, 440, 447,
 449, 450, 114, 453, 115, 117, 456, 118,
 120, 459, 121, 123, 462, 124, 126, 127,
 439, 129, 130, 461, 132, 133, 458, 135,
 136, 455, 464, 469, 473, 476, 480, 483,
 487, 490, 494, 497, 417, 502, 513, 152,
 516, 154, 519, 155, 157, 522, 158, 160,
 525, 161, 528, 530, 531, 166, 167, 527,
 169, 170, 524, 172, 173, 521, 175, 176,
 518, 178, 536, 178, 179, 259, 339, 341,
 416, 418, 361, 362, 419, 415, 498, 499,
 386, 534, 387, 178, 180, 182, 36, 258,
 202, 203, 256, 227, 228, 181, 35, 183,
 252, 1, 184, 186, 34, 251, 249, 185,
 33, 187, 245, 188, 190, 32, 244, 242,
 189, 31, 191, 238, 192, 194, 30, 237,
 235, 193, 29, 195, 231, 196, 198, 28,
 230, 226, 197, 27, 212, 0, 201, 206,
 178, 204, 205, 208, 2, 211, 3, 214,
 6, 24, 217, 9, 21, 220, 12, 18,
 223, 15, 225, 232, 234, 239, 241, 246,
 248, 253, 255, 178, 260, 262, 73, 336,
 282, 283, 337, 307, 308, 261, 72, 263,
 332, 38, 264, 266, 71, 331, 329, 265,
 70, 267, 325, 268, 270, 69, 324, 322,
 269, 68, 271, 318, 272, 274, 67, 317,
 315, 273, 66, 275, 311, 276, 278, 65,
 310, 306, 277, 64, 292, 37, 281, 286,
 178, 284, 285, 288, 39, 291, 40, 294,
 43, 61, 297, 46, 58, 300, 49, 55,
 303, 52, 305, 312, 314, 319, 321, 326,
 328, 333, 335, 178, 340, 109, 342, 411,
 75, 343, 345, 108, 410, 408, 344, 107,
 346, 404, 347, 349, 106, 403, 401, 348,
 105, 350, 397, 351, 353, 104, 396, 394,
 352, 103, 354, 390, 355, 357, 102, 389,
 385, 356, 101, 371, 74, 360, 365, 178,
 363, 364, 367, 76, 370, 77, 373, 80,
 98, 376, 83, 95, 379, 86, 92, 382,
 89, 384, 391, 393, 398, 400, 405, 407,
 412, 414, 178, 178, 420, 422, 146, 145,
 442, 443, 496, 467, 468, 421, 423, 492,
 111, 424, 426, 144, 491, 489, 425, 143,
 427, 485, 428, 430, 142, 484, 482, 429,
 141, 431, 478, 432, 434, 140, 477, 475,
 433, 139, 435, 471, 436, 438, 138, 470,
 466, 437, 137, 452, 110, 441, 446, 178,
 444, 445, 448, 112, 451, 113, 454, 116,
 134, 457, 119, 131, 460, 122, 128, 463,
 125, 465, 472, 474, 479, 481, 486, 488,
 493, 495, 147, 500, 501, 515, 504, 505,
 533, 148, 509, 503, 508, 506, 507, 510,
 511, 150, 514, 512, 149, 151, 517, 153,
 174, 163, 520, 156, 171, 523, 159, 168,
 526, 162, 165, 529, 164, 532, 178, 535,
 177, 538, 539, 537, 542, 178, 540, 541
};

static const char _indic_syllable_machine_trans_actions[] = {
 1, 0, 2, 2, 2, 0, 2, 0,
 0, 2, 0, 0, 2, 0, 0, 2,
 0, 0, 0, 2, 0, 0, 2, 0,
 0, 2, 0, 0, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 2, 3,
 0, 2, 2, 2, 0, 2, 0, 0,
 2, 0, 0, 2, 0, 0, 2, 0,
 0, 0, 2, 0, 0, 2, 0, 0,
 2, 0, 0, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 2, 2, 4, 0,
 2, 2, 2, 0, 2, 5, 0, 0,
 2, 0, 0, 2, 0, 0, 2, 0,
 0, 0, 2, 0, 0, 2, 0, 0,
 2, 0, 0, 2, 2, 6, 2, 6,
 2, 6, 2, 6, 2, 7, 0, 2,
 2, 2, 0, 2, 0, 0, 2, 0,
 0, 2, 0, 0, 2, 0, 0, 0,
 2, 0, 0, 2, 0, 0, 2, 0,
 0, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 2, 6, 0, 8, 0,
 2, 0, 2, 0, 0, 2, 0, 0,
 2, 0, 2, 2, 2, 0, 0, 2,
 0, 0, 2, 0, 0, 2, 0, 0,
 2, 9, 0, 12, 2, 2, 6, 2,
 13, 13, 0, 0, 2, 2, 6, 2,
 6, 2, 6, 14, 2, 2, 0, 2,
 0, 0, 2, 2, 2, 2, 0, 2,
 2, 0, 2, 2, 0, 2, 2, 2,
 0, 2, 2, 2, 2, 0, 2, 2,
 2, 0, 2, 2, 2, 2, 0, 2,
 2, 2, 0, 2, 2, 2, 2, 0,
 2, 2, 2, 0, 2, 0, 0, 0,
 15, 0, 0, 2, 0, 2, 0, 2,
 0, 0, 2, 0, 0, 2, 0, 0,
 2, 0, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 16, 2, 2, 0, 2,
 0, 0, 2, 2, 2, 2, 0, 2,
 2, 0, 2, 2, 0, 2, 2, 2,
 0, 2, 2, 2, 2, 0, 2, 2,
 2, 0, 2, 2, 2, 2, 0, 2,
 2, 2, 0, 2, 2, 2, 2, 0,
 2, 2, 2, 0, 2, 0, 0, 0,
 17, 0, 0, 2, 0, 2, 0, 2,
 0, 0, 2, 0, 0, 2, 0, 0,
 2, 0, 2, 2, 2, 2, 2, 2,
 2, 2, 2, 18, 6, 0, 6, 6,
 0, 6, 2, 0, 6, 2, 6, 0,
 6, 6, 6, 2, 0, 6, 2, 6,
 0, 6, 6, 6, 2, 0, 6, 2,
 6, 0, 6, 6, 6, 2, 0, 6,
 2, 6, 0, 6, 0, 0, 0, 19,
 0, 0, 2, 0, 2, 0, 2, 0,
 0, 2, 0, 0, 2, 0, 0, 2,
 0, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 20, 21, 2, 2, 0, 0,
 0, 0, 2, 2, 2, 2, 2, 2,
 0, 2, 2, 0, 2, 2, 2, 0,
 2, 2, 2, 2, 0, 2, 2, 2,
 0, 2, 2, 2, 2, 0, 2, 2,
 2, 0, 2, 2, 2, 2, 0, 2,
 2, 2, 0, 2, 0, 0, 0, 22,
 0, 0, 2, 0, 2, 0, 2, 0,
 0, 2, 0, 0, 2, 0, 0, 2,
 0, 2, 2, 2, 2, 2, 2, 2,
 2, 2, 0, 0, 8, 2, 0, 0,
 2, 0, 2, 0, 0, 0, 0, 8,
 8, 0, 8, 8, 0, 0, 2, 0,
 0, 0, 2, 0, 0, 2, 0, 0,
 2, 0, 0, 2, 0, 2, 23, 2,
 0, 0, 0, 0, 0, 24, 0, 0
};

static const char _indic_syllable_machine_to_state_actions[] = {
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 10, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0
};

static const char _indic_syllable_machine_from_state_actions[] = {
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 11, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0
};

static const short _indic_syllable_machine_eof_trans[] = {
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 79, 79, 79, 79, 86, 86,
 79, 79, 79, 79, 79, 79, 79, 79,
 79, 79, 79, 79, 79, 79, 79, 79,
 79, 79, 79, 79, 79, 79, 79, 79,
 79, 79, 79, 79, 79, 79, 118, 118,
 118, 118, 118, 118, 118, 118, 118, 118,
 118, 118, 118, 118, 118, 118, 118, 118,
 118, 118, 118, 118, 118, 118, 118, 118,
 118, 118, 118, 118, 118, 118, 118, 118,
 118, 118, 118, 79, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1,
 1, 186, 0, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 284, 284, 284, 284, 284,
 284, 284, 284, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 364, 364, 364, 364, 364, 364, 364, 364,
 435, 364, 435, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 436, 436, 436, 436, 436, 436,
 436, 436, 364, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 364, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 204, 204, 204,
 204, 204, 204, 204, 204, 364, 551, 551,
 551, 551, 551, 551, 551, 551, 551
};

static const int indic_syllable_machine_start = 178;
static const int indic_syllable_machine_first_final = 178;
static const int indic_syllable_machine_error = -1;

static const int indic_syllable_machine_en_main = 178;
# 36 "hb-ot-shape-complex-indic-machine.rl"
# 97 "hb-ot-shape-complex-indic-machine.rl"
# 109 "hb-ot-shape-complex-indic-machine.rl"
static void
find_syllables (hb_buffer_t *buffer)
{
  unsigned int p, pe, eof, ts __attribute__((unused)), te __attribute__((unused)), act __attribute__((unused));
  int cs;
  hb_glyph_info_t *info = buffer->info;
# 1580 "hb-ot-shape-complex-indic-machine.hh"
 {
 cs = indic_syllable_machine_start;
 ts = 0;
 te = 0;
 act = 0;
 }
# 118 "hb-ot-shape-complex-indic-machine.rl"


  p = 0;
  pe = eof = buffer->len;

  unsigned int last = 0;
  unsigned int syllable_serial = 1;
# 1597 "hb-ot-shape-complex-indic-machine.hh"
 {
 int _slen;
 int _trans;
 const unsigned char *_keys;
 const short *_inds;
 if ( p == pe )
  goto _test_eof;
_resume:
 switch ( _indic_syllable_machine_from_state_actions[cs] ) {
 case 11:
# 1 "NONE"
 {ts = p;}
 break;
# 1611 "hb-ot-shape-complex-indic-machine.hh"
 }

 _keys = _indic_syllable_machine_trans_keys + (cs<<1);
 _inds = _indic_syllable_machine_indicies + _indic_syllable_machine_index_offsets[cs];

 _slen = _indic_syllable_machine_key_spans[cs];
 _trans = _inds[ _slen > 0 && _keys[0] <=( info[p].var2.u8[2]) &&
  ( info[p].var2.u8[2]) <= _keys[1] ?
  ( info[p].var2.u8[2]) - _keys[0] : _slen ];

_eof_trans:
 cs = _indic_syllable_machine_trans_targs[_trans];

 if ( _indic_syllable_machine_trans_actions[_trans] == 0 )
  goto _again;

 switch ( _indic_syllable_machine_trans_actions[_trans] ) {
 case 2:
# 1 "NONE"
 {te = p+1;}
 break;
 case 15:
# 88 "hb-ot-shape-complex-indic-machine.rl"
 {te = p+1;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "consonant_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | consonant_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 17:
# 89 "hb-ot-shape-complex-indic-machine.rl"
 {te = p+1;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "vowel_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | vowel_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 22:
# 90 "hb-ot-shape-complex-indic-machine.rl"
 {te = p+1;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "standalone_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | standalone_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 24:
# 91 "hb-ot-shape-complex-indic-machine.rl"
 {te = p+1;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "symbol_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | symbol_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 19:
# 92 "hb-ot-shape-complex-indic-machine.rl"
 {te = p+1;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "broken_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | broken_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 12:
# 93 "hb-ot-shape-complex-indic-machine.rl"
 {te = p+1;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "non_indic_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | non_indic_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 14:
# 88 "hb-ot-shape-complex-indic-machine.rl"
 {te = p;p--;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "consonant_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | consonant_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 16:
# 89 "hb-ot-shape-complex-indic-machine.rl"
 {te = p;p--;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "vowel_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | vowel_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 21:
# 90 "hb-ot-shape-complex-indic-machine.rl"
 {te = p;p--;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "standalone_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | standalone_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 23:
# 91 "hb-ot-shape-complex-indic-machine.rl"
 {te = p;p--;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "symbol_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | symbol_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 18:
# 92 "hb-ot-shape-complex-indic-machine.rl"
 {te = p;p--;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "broken_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | broken_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 20:
# 93 "hb-ot-shape-complex-indic-machine.rl"
 {te = p;p--;{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "non_indic_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | non_indic_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 1:
# 88 "hb-ot-shape-complex-indic-machine.rl"
 {{p = ((te))-1;}{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "consonant_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | consonant_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 3:
# 89 "hb-ot-shape-complex-indic-machine.rl"
 {{p = ((te))-1;}{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "vowel_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | vowel_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 7:
# 90 "hb-ot-shape-complex-indic-machine.rl"
 {{p = ((te))-1;}{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "standalone_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | standalone_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 9:
# 91 "hb-ot-shape-complex-indic-machine.rl"
 {{p = ((te))-1;}{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "symbol_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | symbol_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 4:
# 92 "hb-ot-shape-complex-indic-machine.rl"
 {{p = ((te))-1;}{ do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "broken_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | broken_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }}
 break;
 case 5:
# 1 "NONE"
 { switch( act ) {
 case 1:
 {{p = ((te))-1;} do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "consonant_syllable"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | consonant_syllable; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }
 break;
 case 5:
 {{p = ((te))-1;} do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "broken_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | broken_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }
 break;
 case 6:
 {{p = ((te))-1;} do { if (0) fprintf (stderr, "syllable %d..%d %s\n", last, p+1, "non_indic_cluster"); for (unsigned int i = last; i < p+1; i++) info[i].var1.u8[3] = (syllable_serial << 4) | non_indic_cluster; last = p+1; syllable_serial++; if ((syllable_serial == 16)) syllable_serial = 1; } while (0); }
 break;
 }
 }
 break;
 case 8:
# 1 "NONE"
 {te = p+1;}
# 88 "hb-ot-shape-complex-indic-machine.rl"
 {act = 1;}
 break;
 case 6:
# 1 "NONE"
 {te = p+1;}
# 92 "hb-ot-shape-complex-indic-machine.rl"
 {act = 5;}
 break;
 case 13:
# 1 "NONE"
 {te = p+1;}
# 93 "hb-ot-shape-complex-indic-machine.rl"
 {act = 6;}
 break;
# 1734 "hb-ot-shape-complex-indic-machine.hh"
 }

_again:
 switch ( _indic_syllable_machine_to_state_actions[cs] ) {
 case 10:
# 1 "NONE"
 {ts = 0;}
 break;
# 1743 "hb-ot-shape-complex-indic-machine.hh"
 }

 if ( ++p != pe )
  goto _resume;
 _test_eof: {}
 if ( p == eof )
 {
 if ( _indic_syllable_machine_eof_trans[cs] > 0 ) {
  _trans = _indic_syllable_machine_eof_trans[cs] - 1;
  goto _eof_trans;
 }
 }

 }
# 127 "hb-ot-shape-complex-indic-machine.rl"

}
# 624 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc" 2


static void
setup_masks_indic (const hb_ot_shape_plan_t *plan __attribute__((unused)),
     hb_buffer_t *buffer,
     hb_font_t *font __attribute__((unused)))
{
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[2]), "indic_category");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[3]), "indic_position");




  unsigned int count = buffer->len;
  hb_glyph_info_t *info = buffer->info;
  for (unsigned int i = 0; i < count; i++)
    set_indic_properties (info[i]);
}

static void
setup_syllables (const hb_ot_shape_plan_t *plan __attribute__((unused)),
   hb_font_t *font __attribute__((unused)),
   hb_buffer_t *buffer)
{
  find_syllables (buffer);
}

static int
compare_indic_order (const hb_glyph_info_t *pa, const hb_glyph_info_t *pb)
{
  int a = pa->var2.u8[3];
  int b = pb->var2.u8[3];

  return a < b ? -1 : a == b ? 0 : +1;
}



static void
update_consonant_positions (const hb_ot_shape_plan_t *plan,
       hb_font_t *font,
       hb_buffer_t *buffer)
{
  const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) plan->data;

  if (indic_plan->config->base_pos != BASE_POS_LAST)
    return;

  hb_codepoint_t virama;
  if (indic_plan->get_virama_glyph (font, &virama))
  {
    hb_face_t *face = font->face;
    unsigned int count = buffer->len;
    hb_glyph_info_t *info = buffer->info;
    for (unsigned int i = 0; i < count; i++)
      if (info[i].var2.u8[3] == POS_BASE_C)
      {
 hb_codepoint_t consonant = info[i].codepoint;
 info[i].var2.u8[3] = consonant_position_from_face (indic_plan, consonant, virama, face);
      }
  }
}





static void
initial_reordering_consonant_syllable (const hb_ot_shape_plan_t *plan,
           hb_face_t *face,
           hb_buffer_t *buffer,
           unsigned int start, unsigned int end)
{
  const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) plan->data;
  hb_glyph_info_t *info = buffer->info;
# 715 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  unsigned int base = end;
  bool has_reph = false;

  {



    unsigned int limit = start;
    if (indic_plan->config->reph_pos != REPH_POS_DONT_CARE &&
 indic_plan->mask_array[RPHF] &&
 start + 3 <= end &&
 (
  (indic_plan->config->reph_mode == REPH_MODE_IMPLICIT && !is_joiner (info[start + 2])) ||
  (indic_plan->config->reph_mode == REPH_MODE_EXPLICIT && info[start + 2].var2.u8[2] == OT_ZWJ)
 ))
    {

      hb_codepoint_t glyphs[3] = {info[start].codepoint,
      info[start + 1].codepoint,
      indic_plan->config->reph_mode == REPH_MODE_EXPLICIT ?
        info[start + 2].codepoint : 0};
      if (indic_plan->rphf.would_substitute (glyphs, 2, face) ||
   (indic_plan->config->reph_mode == REPH_MODE_EXPLICIT &&
    indic_plan->rphf.would_substitute (glyphs, 3, face)))
      {
 limit += 2;
 while (limit < end && is_joiner (info[limit]))
   limit++;
 base = start;
 has_reph = true;
      }
    } else if (indic_plan->config->reph_mode == REPH_MODE_LOG_REPHA && info[start].var2.u8[2] == OT_Repha)
    {
 limit += 1;
 while (limit < end && is_joiner (info[limit]))
   limit++;
 base = start;
 has_reph = true;
    }

    switch (indic_plan->config->base_pos)
    {
      default:
        ((false) ? static_cast<void> (0) : __assert_fail ("false", "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc", 758, __PRETTY_FUNCTION__));


      case BASE_POS_LAST:
      {

 unsigned int i = end;
 bool seen_below = false;
 do {
   i--;

   if (is_consonant (info[i]))
   {


     if (info[i].var2.u8[3] != POS_BELOW_C &&
  (info[i].var2.u8[3] != POS_POST_C || seen_below))
     {
       base = i;
       break;
     }
     if (info[i].var2.u8[3] == POS_BELOW_C)
       seen_below = true;
# 792 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
     base = i;
   }
   else
   {





     if (start < i &&
  info[i].var2.u8[2] == OT_ZWJ &&
  info[i - 1].var2.u8[2] == OT_H)
       break;
   }
 } while (i > limit);
      }
      break;

      case BASE_POS_LAST_SINHALA:
      {





 if (!has_reph)
   base = limit;



 for (unsigned int i = limit; i < end; i++)
   if (is_consonant (info[i]))
   {
     if (limit < i && info[i - 1].var2.u8[2] == OT_ZWJ)
       break;
     else
       base = i;
   }


 for (unsigned int i = base + 1; i < end; i++)
   if (is_consonant (info[i]))
     info[i].var2.u8[3] = POS_BELOW_C;
      }
      break;

      case BASE_POS_FIRST:
      {


 ((indic_plan->config->reph_mode == REPH_MODE_VIS_REPHA) ? static_cast<void> (0) : __assert_fail ("indic_plan->config->reph_mode == REPH_MODE_VIS_REPHA", "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc", 842, __PRETTY_FUNCTION__));
 ((!has_reph) ? static_cast<void> (0) : __assert_fail ("!has_reph", "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc", 843, __PRETTY_FUNCTION__));

 base = start;


 for (unsigned int i = base + 1; i < end; i++)
   if (is_consonant (info[i]))
     info[i].var2.u8[3] = POS_BELOW_C;
      }
      break;
    }






    if (has_reph && base == start && limit - base <= 2) {

      has_reph = false;
    }
  }
# 901 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  for (unsigned int i = start; i < base; i++)
    info[i].var2.u8[3] = MIN (POS_PRE_C, (indic_position_t) info[i].var2.u8[3]);

  if (base < end)
    info[base].var2.u8[3] = POS_BASE_C;



  for (unsigned int i = base + 1; i < end; i++)
    if (info[i].var2.u8[2] == OT_M) {
      for (unsigned int j = i + 1; j < end; j++)
        if (is_consonant (info[j])) {
   info[j].var2.u8[3] = POS_FINAL_C;
   break;
 }
      break;
    }


  if (has_reph)
    info[start].var2.u8[3] = POS_RA_TO_BECOME_REPH;
# 940 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  if (indic_plan->is_old_spec)
  {
    bool disallow_double_halants = buffer->props.script != HB_SCRIPT_MALAYALAM;
    for (unsigned int i = base + 1; i < end; i++)
      if (info[i].var2.u8[2] == OT_H)
      {
        unsigned int j;
        for (j = end - 1; j > i; j--)
   if (is_consonant (info[j]) ||
       (disallow_double_halants && info[j].var2.u8[2] == OT_H))
     break;
 if (info[j].var2.u8[2] != OT_H && j > i) {

   hb_glyph_info_t t = info[i];
   memmove (&info[i], &info[i + 1], (j - i) * sizeof (info[0]));
   info[j] = t;
 }
        break;
      }
  }


  {
    indic_position_t last_pos = POS_START;
    for (unsigned int i = start; i < end; i++)
    {
      if (((1<<(info[i].var2.u8[2])) & (((1<<(OT_ZWJ)) | (1<<(OT_ZWNJ))) | (1<<(OT_N)) | (1<<(OT_RS)) | ((1<<(OT_CM)) | (1<<(OT_CM2))) | ((1<<(OT_H)) | (1<<(OT_Coeng))))))
      {
 info[i].var2.u8[3] = last_pos;
 if ((info[i].var2.u8[2] == OT_H && info[i].var2.u8[3] == POS_PRE_M)
                                              )
 {
# 981 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
   for (unsigned int j = i; j > start; j--)
     if (info[j - 1].var2.u8[3] != POS_PRE_M) {
       info[i].var2.u8[3] = info[j - 1].var2.u8[3];
       break;
     }
 }
      } else if (info[i].var2.u8[3] != POS_SMVD) {
        last_pos = (indic_position_t) info[i].var2.u8[3];
      }
    }
  }


  {
    unsigned int last = base;
    for (unsigned int i = base + 1; i < end; i++)
      if (is_consonant (info[i]))
      {
 for (unsigned int j = last + 1; j < i; j++)
   if (info[j].var2.u8[3] < POS_SMVD)
     info[j].var2.u8[3] = info[i].var2.u8[3];
 last = i;
      } else if (info[i].var2.u8[2] == OT_M)
        last = i;
  }


  {

    unsigned int syllable = info[start].var1.u8[3];
    for (unsigned int i = start; i < end; i++)
      info[i].var1.u8[3] = i - start;


    hb_bubble_sort (info + start, end - start, compare_indic_order);

    base = end;
    for (unsigned int i = start; i < end; i++)
      if (info[i].var2.u8[3] == POS_BASE_C)
      {
 base = i;
 break;
      }





    if (indic_plan->is_old_spec || end - base > 127)
      buffer->merge_clusters (base, end);
    else
    {

      for (unsigned int i = base; i < end; i++)
        if (info[i].var1.u8[3] != 255)
 {
   unsigned int max = i;
   unsigned int j = start + info[i].var1.u8[3];
   while (j != i)
   {
     max = MAX (max, j);
     unsigned int next = start + info[j].var1.u8[3];
     info[j].var1.u8[3] = 255;
     j = next;
   }
   if (i != max)
     buffer->merge_clusters (i, max + 1);
 }
    }


    for (unsigned int i = start; i < end; i++)
      info[i].var1.u8[3] = syllable;
  }



  {
    hb_mask_t mask;


    for (unsigned int i = start; i < end && info[i].var2.u8[3] == POS_RA_TO_BECOME_REPH; i++)
      info[i].mask |= indic_plan->mask_array[RPHF];


    mask = indic_plan->mask_array[HALF];
    if (!indic_plan->is_old_spec &&
 indic_plan->config->blwf_mode == BLWF_MODE_PRE_AND_POST)
      mask |= indic_plan->mask_array[BLWF];
    for (unsigned int i = start; i < base; i++)
      info[i].mask |= mask;

    mask = 0;
    if (base < end)
      info[base].mask |= mask;

    mask = indic_plan->mask_array[BLWF] | indic_plan->mask_array[ABVF] | indic_plan->mask_array[PSTF];
    for (unsigned int i = base + 1; i < end; i++)
      info[i].mask |= mask;
  }

  if (indic_plan->is_old_spec &&
      buffer->props.script == HB_SCRIPT_DEVANAGARI)
  {
# 1103 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
    for (unsigned int i = start; i + 1 < base; i++)
      if (info[i ].var2.u8[2] == OT_Ra &&
   info[i+1].var2.u8[2] == OT_H &&
   (i + 2 == base ||
    info[i+2].var2.u8[2] != OT_ZWJ))
      {
 info[i ].mask |= indic_plan->mask_array[BLWF];
 info[i+1].mask |= indic_plan->mask_array[BLWF];
      }
  }

  unsigned int pref_len = indic_plan->config->pref_len;
  if (indic_plan->mask_array[PREF] && base + pref_len < end)
  {
    ((1 <= pref_len && pref_len <= 2) ? static_cast<void> (0) : __assert_fail ("1 <= pref_len && pref_len <= 2", "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc", 1117, __PRETTY_FUNCTION__));

    for (unsigned int i = base + 1; i + pref_len - 1 < end; i++) {
      hb_codepoint_t glyphs[2];
      for (unsigned int j = 0; j < pref_len; j++)
        glyphs[j] = info[i + j].codepoint;
      if (indic_plan->pref.would_substitute (glyphs, pref_len, face))
      {
 for (unsigned int j = 0; j < pref_len; j++)
   info[i++].mask |= indic_plan->mask_array[PREF];







 if (indic_plan->mask_array[CFAR])
   for (; i < end; i++)
     info[i].mask |= indic_plan->mask_array[CFAR];

 break;
      }
    }
  }


  for (unsigned int i = start + 1; i < end; i++)
    if (is_joiner (info[i])) {
      bool non_joiner = info[i].var2.u8[2] == OT_ZWNJ;
      unsigned int j = i;

      do {
 j--;






 if (non_joiner)
   info[j].mask &= ~indic_plan->mask_array[HALF];

      } while (j > start && !is_consonant (info[j]));
    }
}


static void
initial_reordering_vowel_syllable (const hb_ot_shape_plan_t *plan,
       hb_face_t *face,
       hb_buffer_t *buffer,
       unsigned int start, unsigned int end)
{

  initial_reordering_consonant_syllable (plan, face, buffer, start, end);
}

static void
initial_reordering_standalone_cluster (const hb_ot_shape_plan_t *plan,
           hb_face_t *face,
           hb_buffer_t *buffer,
           unsigned int start, unsigned int end)
{



  if (hb_options ().uniscribe_bug_compatible)
  {



    if (buffer->info[end - 1].var2.u8[2] == OT_DOTTEDCIRCLE)
      return;
  }

  initial_reordering_consonant_syllable (plan, face, buffer, start, end);
}

static void
initial_reordering_broken_cluster (const hb_ot_shape_plan_t *plan,
       hb_face_t *face,
       hb_buffer_t *buffer,
       unsigned int start, unsigned int end)
{

  initial_reordering_standalone_cluster (plan, face, buffer, start, end);
}

static void
initial_reordering_symbol_cluster (const hb_ot_shape_plan_t *plan __attribute__((unused)),
       hb_face_t *face __attribute__((unused)),
       hb_buffer_t *buffer __attribute__((unused)),
       unsigned int start __attribute__((unused)), unsigned int end __attribute__((unused)))
{


}

static void
initial_reordering_non_indic_cluster (const hb_ot_shape_plan_t *plan __attribute__((unused)),
          hb_face_t *face __attribute__((unused)),
          hb_buffer_t *buffer __attribute__((unused)),
          unsigned int start __attribute__((unused)), unsigned int end __attribute__((unused)))
{


}


static void
initial_reordering_syllable (const hb_ot_shape_plan_t *plan,
        hb_face_t *face,
        hb_buffer_t *buffer,
        unsigned int start, unsigned int end)
{
  syllable_type_t syllable_type = (syllable_type_t) (buffer->info[start].var1.u8[3] & 0x0F);
  switch (syllable_type) {
  case consonant_syllable: initial_reordering_consonant_syllable (plan, face, buffer, start, end); return;
  case vowel_syllable: initial_reordering_vowel_syllable (plan, face, buffer, start, end); return;
  case standalone_cluster: initial_reordering_standalone_cluster (plan, face, buffer, start, end); return;
  case symbol_cluster: initial_reordering_symbol_cluster (plan, face, buffer, start, end); return;
  case broken_cluster: initial_reordering_broken_cluster (plan, face, buffer, start, end); return;
  case non_indic_cluster: initial_reordering_non_indic_cluster (plan, face, buffer, start, end); return;
  }
}

static inline void
insert_dotted_circles (const hb_ot_shape_plan_t *plan __attribute__((unused)),
         hb_font_t *font,
         hb_buffer_t *buffer)
{

  bool has_broken_syllables = false;
  unsigned int count = buffer->len;
  hb_glyph_info_t *info = buffer->info;
  for (unsigned int i = 0; i < count; i++)
    if ((info[i].var1.u8[3] & 0x0F) == broken_cluster)
    {
      has_broken_syllables = true;
      break;
    }
  if ((!has_broken_syllables))
    return;


  hb_codepoint_t dottedcircle_glyph;
  if (!font->get_glyph (0x25CCu, 0, &dottedcircle_glyph))
    return;

  hb_glyph_info_t dottedcircle = {0};
  dottedcircle.codepoint = 0x25CCu;
  set_indic_properties (dottedcircle);
  dottedcircle.codepoint = dottedcircle_glyph;

  buffer->clear_output ();

  buffer->idx = 0;
  unsigned int last_syllable = 0;
  while (buffer->idx < buffer->len)
  {
    unsigned int syllable = buffer->cur().var1.u8[3];
    syllable_type_t syllable_type = (syllable_type_t) (syllable & 0x0F);
    if ((last_syllable != syllable && syllable_type == broken_cluster))
    {
      last_syllable = syllable;

      hb_glyph_info_t info = dottedcircle;
      info.cluster = buffer->cur().cluster;
      info.mask = buffer->cur().mask;
      info.var1.u8[3] = buffer->cur().var1.u8[3];



      while (buffer->idx < buffer->len &&
      last_syllable == buffer->cur().var1.u8[3] &&
      buffer->cur().var2.u8[2] == OT_Repha)
        buffer->next_glyph ();

      buffer->output_info (info);
    }
    else
      buffer->next_glyph ();
  }

  buffer->swap_buffers ();
}

static void
initial_reordering (const hb_ot_shape_plan_t *plan,
      hb_font_t *font,
      hb_buffer_t *buffer)
{
  update_consonant_positions (plan, font, buffer);
  insert_dotted_circles (plan, font, buffer);

  hb_glyph_info_t *info = buffer->info;
  unsigned int count = buffer->len;
  if ((!count)) return;
  unsigned int last = 0;
  unsigned int last_syllable = info[0].var1.u8[3];
  for (unsigned int i = 1; i < count; i++)
    if (last_syllable != info[i].var1.u8[3]) {
      initial_reordering_syllable (plan, font->face, buffer, last, i);
      last = i;
      last_syllable = info[last].var1.u8[3];
    }
  initial_reordering_syllable (plan, font->face, buffer, last, count);
}

static void
final_reordering_syllable (const hb_ot_shape_plan_t *plan,
      hb_buffer_t *buffer,
      unsigned int start, unsigned int end)
{
  const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) plan->data;
  hb_glyph_info_t *info = buffer->info;







  if (indic_plan->virama_glyph)
  {
    unsigned int virama_glyph = indic_plan->virama_glyph;
    for (unsigned int i = start; i < end; i++)
      if (info[i].codepoint == virama_glyph &&
   _hb_glyph_info_ligated (&info[i]) &&
   _hb_glyph_info_multiplied (&info[i]))
      {

 info[i].var2.u8[2] = OT_H;
 _hb_glyph_info_clear_ligated_and_multiplied (&info[i]);
      }
  }
# 1364 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  bool try_pref = !!indic_plan->mask_array[PREF];


  unsigned int base;
  for (base = start; base < end; base++)
    if (info[base].var2.u8[3] >= POS_BASE_C)
    {
      if (try_pref && base + 1 < end && indic_plan->config->pref_len == 2)
      {
 for (unsigned int i = base + 1; i < end; i++)
   if ((info[i].mask & indic_plan->mask_array[PREF]) != 0)
   {
     if (!(_hb_glyph_info_substituted (&info[i]) &&
    _hb_glyph_info_ligated_and_didnt_multiply (&info[i])))
     {


       base = i;
       while (base < end && is_halant_or_coeng (info[base]))
  base++;
       info[base].var2.u8[3] = POS_BASE_C;

       try_pref = false;
     }
     break;
   }
      }

      if (start < base && info[base].var2.u8[3] > POS_BASE_C)
        base--;
      break;
    }
  if (base == end && start < base &&
      is_one_of (info[base - 1], (1<<(OT_ZWJ))))
    base--;
  if (base < end)
    while (start < base &&
    is_one_of (info[base], ((1<<(OT_N)) | ((1<<(OT_H)) | (1<<(OT_Coeng))))))
      base--;
# 1415 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  if (start + 1 < end && start < base)
  {

    unsigned int new_pos = base == end ? base - 2 : base - 1;





    if (buffer->props.script != HB_SCRIPT_MALAYALAM && buffer->props.script != HB_SCRIPT_TAMIL)
    {
      while (new_pos > start &&
      !(is_one_of (info[new_pos], ((1<<(OT_M)) | ((1<<(OT_H)) | (1<<(OT_Coeng)))))))
 new_pos--;




      if (is_halant_or_coeng (info[new_pos]) &&
   info[new_pos].var2.u8[3] != POS_PRE_M)
      {

 if (new_pos + 1 < end && is_joiner (info[new_pos + 1]))
   new_pos++;
      }
      else
        new_pos = start;
    }

    if (start < new_pos && info[new_pos].var2.u8[3] != POS_PRE_M)
    {

      for (unsigned int i = new_pos; i > start; i--)
 if (info[i - 1].var2.u8[3] == POS_PRE_M)
 {
   unsigned int old_pos = i - 1;
   hb_glyph_info_t tmp = info[old_pos];
   memmove (&info[old_pos], &info[old_pos + 1], (new_pos - old_pos) * sizeof (info[0]));
   info[new_pos] = tmp;
   if (old_pos < base && base <= new_pos)
     base--;
   buffer->merge_clusters (new_pos, MIN (end, base + 1));
   new_pos--;
 }
    } else {
      for (unsigned int i = start; i < base; i++)
 if (info[i].var2.u8[3] == POS_PRE_M) {
   buffer->merge_clusters (i, MIN (end, base + 1));
   break;
 }
    }
  }
# 1487 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  if (start + 1 < end &&
      info[start].var2.u8[3] == POS_RA_TO_BECOME_REPH &&
      ((info[start].var2.u8[2] == OT_Repha) ^
       _hb_glyph_info_ligated_and_didnt_multiply (&info[start])))
  {
    unsigned int new_reph_pos;
    reph_position_t reph_pos = indic_plan->config->reph_pos;

    ((reph_pos != REPH_POS_DONT_CARE) ? static_cast<void> (0) : __assert_fail ("reph_pos != REPH_POS_DONT_CARE", "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc", 1495, __PRETTY_FUNCTION__));




    if (reph_pos == REPH_POS_AFTER_POST)
    {
      goto reph_step_5;
    }
# 1516 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
    {
      new_reph_pos = start + 1;
      while (new_reph_pos < base && !is_halant_or_coeng (info[new_reph_pos]))
 new_reph_pos++;

      if (new_reph_pos < base && is_halant_or_coeng (info[new_reph_pos]))
      {

 if (new_reph_pos + 1 < base && is_joiner (info[new_reph_pos + 1]))
   new_reph_pos++;
 goto reph_move;
      }
    }





    if (reph_pos == REPH_POS_AFTER_MAIN)
    {
      new_reph_pos = base;
      while (new_reph_pos + 1 < end && info[new_reph_pos + 1].var2.u8[3] <= POS_AFTER_MAIN)
 new_reph_pos++;
      if (new_reph_pos < end)
        goto reph_move;
    }







    if (reph_pos == REPH_POS_AFTER_SUB)
    {
      new_reph_pos = base;
      while (new_reph_pos < end &&
      !( (1<<(info[new_reph_pos + 1].var2.u8[3])) & ((1<<(POS_POST_C)) | (1<<(POS_AFTER_POST)) | (1<<(POS_SMVD)))))
 new_reph_pos++;
      if (new_reph_pos < end)
        goto reph_move;
    }
# 1566 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
    reph_step_5:
    {

      new_reph_pos = start + 1;
      while (new_reph_pos < base && !is_halant_or_coeng (info[new_reph_pos]))
 new_reph_pos++;

      if (new_reph_pos < base && is_halant_or_coeng (info[new_reph_pos]))
      {

 if (new_reph_pos + 1 < base && is_joiner (info[new_reph_pos + 1]))
   new_reph_pos++;
 goto reph_move;
      }
    }



    {
      new_reph_pos = end - 1;
      while (new_reph_pos > start && info[new_reph_pos].var2.u8[3] == POS_SMVD)
 new_reph_pos--;
# 1596 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
      if (!hb_options ().uniscribe_bug_compatible &&
   (is_halant_or_coeng (info[new_reph_pos]))) {
 for (unsigned int i = base + 1; i < new_reph_pos; i++)
   if (info[i].var2.u8[2] == OT_M) {

     new_reph_pos--;
   }
      }
      goto reph_move;
    }

    reph_move:
    {
      buffer->merge_clusters (start, new_reph_pos + 1);


      hb_glyph_info_t reph = info[start];
      memmove (&info[start], &info[start + 1], (new_reph_pos - start) * sizeof (info[0]));
      info[new_reph_pos] = reph;
      if (start < base && base <= new_reph_pos)
 base--;
    }
  }
# 1627 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  if (try_pref && base + 1 < end)
  {
    unsigned int pref_len = indic_plan->config->pref_len;
    for (unsigned int i = base + 1; i < end; i++)
      if ((info[i].mask & indic_plan->mask_array[PREF]) != 0)
      {
# 1642 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
 if (_hb_glyph_info_substituted (&info[i]) &&
     ((pref_len == 1) ^ _hb_glyph_info_ligated_and_didnt_multiply (&info[i])))
 {
# 1653 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
   unsigned int new_pos = base;




   if (buffer->props.script != HB_SCRIPT_MALAYALAM && buffer->props.script != HB_SCRIPT_TAMIL)
   {
     while (new_pos > start &&
     !(is_one_of (info[new_pos - 1], (1<<(OT_M)) | ((1<<(OT_H)) | (1<<(OT_Coeng))))))
       new_pos--;



     if (new_pos > start && info[new_pos - 1].var2.u8[2] == OT_M)
     {
       unsigned int old_pos = i;
       for (unsigned int i = base + 1; i < old_pos; i++)
  if (info[i].var2.u8[2] == OT_M)
  {
    new_pos--;
    break;
  }
     }
   }

   if (new_pos > start && is_halant_or_coeng (info[new_pos - 1]))
   {

     if (new_pos < end && is_joiner (info[new_pos]))
       new_pos++;
   }

   {
     unsigned int old_pos = i;
     buffer->merge_clusters (new_pos, old_pos + 1);
     hb_glyph_info_t tmp = info[old_pos];
     memmove (&info[new_pos + 1], &info[new_pos], (old_pos - new_pos) * sizeof (info[0]));
     info[new_pos] = tmp;
     if (new_pos <= base && base < old_pos)
       base++;
   }
 }

        break;
      }
  }



  if (info[start].var2.u8[3] == POS_PRE_M &&
      (!start ||
       !((1<<(_hb_glyph_info_get_general_category (&info[start - 1]))) &
  ((0 * sizeof (char[((HB_UNICODE_GENERAL_CATEGORY_FORMAT) < (HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK)) ? 1 : -1])) + (1<<(HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK+1)) - (1<<(HB_UNICODE_GENERAL_CATEGORY_FORMAT))))))
    info[start].mask |= indic_plan->mask_array[INIT];





  if (hb_options ().uniscribe_bug_compatible)
  {
    switch ((hb_tag_t) plan->props.script)
    {
      case HB_SCRIPT_TAMIL:
      case HB_SCRIPT_SINHALA:
        break;

      default:




 buffer->merge_clusters (start, end);
 break;
    }
  }
}


static void
final_reordering (const hb_ot_shape_plan_t *plan,
    hb_font_t *font __attribute__((unused)),
    hb_buffer_t *buffer)
{
  unsigned int count = buffer->len;
  if ((!count)) return;

  hb_glyph_info_t *info = buffer->info;
  unsigned int last = 0;
  unsigned int last_syllable = info[0].var1.u8[3];
  for (unsigned int i = 1; i < count; i++)
    if (last_syllable != info[i].var1.u8[3]) {
      final_reordering_syllable (plan, buffer, last, i);
      last = i;
      last_syllable = info[last].var1.u8[3];
    }
  final_reordering_syllable (plan, buffer, last, count);

  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[2]), "indic_category");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[3]), "indic_position");
}


static void
clear_syllables (const hb_ot_shape_plan_t *plan __attribute__((unused)),
   hb_font_t *font __attribute__((unused)),
   hb_buffer_t *buffer)
{
  hb_glyph_info_t *info = buffer->info;
  unsigned int count = buffer->len;
  for (unsigned int i = 0; i < count; i++)
    info[i].var1.u8[3] = 0;
}


static bool
decompose_indic (const hb_ot_shape_normalize_context_t *c,
   hb_codepoint_t ab,
   hb_codepoint_t *a,
   hb_codepoint_t *b)
{
  switch (ab)
  {

    case 0x0931u : return false;
    case 0x0B94u : return false;






    case 0x0F77u : *a = 0x0FB2u; *b= 0x0F81u; return true;
    case 0x0F79u : *a = 0x0FB3u; *b= 0x0F81u; return true;
    case 0x17BEu : *a = 0x17C1u; *b= 0x17BEu; return true;
    case 0x17BFu : *a = 0x17C1u; *b= 0x17BFu; return true;
    case 0x17C0u : *a = 0x17C1u; *b= 0x17C0u; return true;
    case 0x17C4u : *a = 0x17C1u; *b= 0x17C4u; return true;
    case 0x17C5u : *a = 0x17C1u; *b= 0x17C5u; return true;
    case 0x1925u : *a = 0x1920u; *b= 0x1923u; return true;
    case 0x1926u : *a = 0x1920u; *b= 0x1924u; return true;
    case 0x1B3Cu : *a = 0x1B42u; *b= 0x1B3Cu; return true;
    case 0x1112Eu : *a = 0x11127u; *b= 0x11131u; return true;
    case 0x1112Fu : *a = 0x11127u; *b= 0x11132u; return true;
# 1805 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
  }

  if ((ab == 0x0DDAu || hb_in_range (ab, 0x0DDCu, 0x0DDEu)))
  {
# 1835 "../../../libs/harfbuzz-ng/src/hb-ot-shape-complex-indic.cc"
    const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) c->plan->data;

    hb_codepoint_t glyph;

    if (hb_options ().uniscribe_bug_compatible ||
 (c->font->get_glyph (ab, 0, &glyph) &&
  indic_plan->pstf.would_substitute (&glyph, 1, c->font->face)))
    {

      *a = 0x0DD9u;
      *b = ab;
      return true;
    }
  }

  return c->unicode->decompose (ab, a, b);
}

static bool
compose_indic (const hb_ot_shape_normalize_context_t *c,
        hb_codepoint_t a,
        hb_codepoint_t b,
        hb_codepoint_t *ab)
{

  if (((1<<(c->unicode->general_category (a))) & ((1<<(HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK)) | (1<<(HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK)) | (1<<(HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK)))))
    return false;


  if (a == 0x09AFu && b == 0x09BCu) { *ab = 0x09DFu; return true; }

  return c->unicode->compose (a, b, ab);
}


const hb_ot_complex_shaper_t _hb_ot_complex_shaper_indic =
{
  "indic",
  collect_features_indic,
  override_features_indic,
  data_create_indic,
  data_destroy_indic,
  __null,
  HB_OT_SHAPE_NORMALIZATION_MODE_COMPOSED_DIACRITICS_NO_SHORT_CIRCUIT,
  decompose_indic,
  compose_indic,
  setup_masks_indic,
  HB_OT_SHAPE_ZERO_WIDTH_MARKS_NONE,
  false,
};
