# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc"
# 1 "<command-line>"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc"
# 31 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-private.hh" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb.h" 1
# 31 "../../../libs/harfbuzz-ng/src/hb.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-blob.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-blob.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 65 "../../../libs/harfbuzz-ng/src/hb-common.h"
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 1 3 4
# 9 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 1 3 4
# 378 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 385 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 386 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4
# 379 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 402 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 1 3 4
# 10 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs-hard.h" 1 3 4
# 11 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 2 3 4
# 403 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wchar.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 2 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdint.h" 2 3 4
# 66 "../../../libs/harfbuzz-ng/src/hb-common.h" 2




extern "C" {


typedef int hb_bool_t;

typedef uint32_t hb_codepoint_t;
typedef int32_t hb_position_t;
typedef uint32_t hb_mask_t;

typedef union _hb_var_int_t {
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_int_t;




typedef uint32_t hb_tag_t;
# 101 "../../../libs/harfbuzz-ng/src/hb-common.h"
hb_tag_t
hb_tag_from_string (const char *str, int len);


void
hb_tag_to_string (hb_tag_t tag, char *buf);




typedef enum {
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT
} hb_direction_t;


hb_direction_t
hb_direction_from_string (const char *str, int len);

const char *
hb_direction_to_string (hb_direction_t direction);
# 137 "../../../libs/harfbuzz-ng/src/hb-common.h"
typedef const struct hb_language_impl_t *hb_language_t;


hb_language_t
hb_language_from_string (const char *str, int len);

const char *
hb_language_to_string (hb_language_t language);



hb_language_t
hb_language_get_default (void);







typedef enum
{
          HB_SCRIPT_COMMON = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('y')))),
          HB_SCRIPT_INHERITED = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_UNKNOWN = ((hb_tag_t)((((uint8_t)('Z'))<<24)|(((uint8_t)('z'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('z')))),

          HB_SCRIPT_ARABIC = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_ARMENIAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_BENGALI = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_CYRILLIC = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_DEVANAGARI = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_GEORGIAN = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_GREEK = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_GUJARATI = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('j'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_GURMUKHI = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_HANGUL = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_HAN = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_HEBREW = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_HIRAGANA = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KANNADA = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('n'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KATAKANA = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_LAO = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_LATIN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_MALAYALAM = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_ORIYA = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAMIL = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_TELUGU = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_THAI = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_TIBETAN = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('t')))),

          HB_SCRIPT_BOPOMOFO = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_BRAILLE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CANADIAN_SYLLABICS = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('s')))),
          HB_SCRIPT_CHEROKEE = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_ETHIOPIC = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_KHMER = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_MONGOLIAN = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_MYANMAR = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_OGHAM = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_RUNIC = ((hb_tag_t)((((uint8_t)('R'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_SINHALA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_SYRIAC = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_THAANA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_YI = ((hb_tag_t)((((uint8_t)('Y'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_DESERET = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_GOTHIC = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_OLD_ITALIC = ((hb_tag_t)((((uint8_t)('I'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('l')))),

          HB_SCRIPT_BUHID = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_HANUNOO = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_TAGALOG = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_TAGBANWA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('b')))),

          HB_SCRIPT_CYPRIOT = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_LIMBU = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_LINEAR_B = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OSMANYA = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_SHAVIAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('w')))),
          HB_SCRIPT_TAI_LE = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('e')))),
          HB_SCRIPT_UGARITIC = ((hb_tag_t)((((uint8_t)('U'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))),

          HB_SCRIPT_BUGINESE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('g'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_COPTIC = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_GLAGOLITIC = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_KHAROSHTHI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_NEW_TAI_LUE = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_OLD_PERSIAN = ((hb_tag_t)((((uint8_t)('X'))<<24)|(((uint8_t)('p'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_SYLOTI_NAGRI = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_TIFINAGH = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),

          HB_SCRIPT_BALINESE = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CUNEIFORM = ((hb_tag_t)((((uint8_t)('X'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('x')))),
          HB_SCRIPT_NKO = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('k'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_PHAGS_PA = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_PHOENICIAN = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('x')))),

          HB_SCRIPT_CARIAN = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_CHAM = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_KAYAH_LI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LEPCHA = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_LYCIAN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LYDIAN = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('y'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_OL_CHIKI = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('c'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_REJANG = ((hb_tag_t)((((uint8_t)('R'))<<24)|(((uint8_t)('j'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_SAURASHTRA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_SUNDANESE = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_VAI = ((hb_tag_t)((((uint8_t)('V'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('i'))<<8)|((uint8_t)('i')))),

          HB_SCRIPT_AVESTAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('v'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_BAMUM = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('y'))<<8)|((uint8_t)('p')))),
          HB_SCRIPT_IMPERIAL_ARAMAIC = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_JAVANESE = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_KAITHI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_LISU = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('u')))),
          HB_SCRIPT_MEETEI_MAYEK = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('t'))<<16)|(((uint8_t)('e'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_OLD_SOUTH_ARABIAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OLD_TURKIC = ((hb_tag_t)((((uint8_t)('O'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_SAMARITAN = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('m'))<<8)|((uint8_t)('r')))),
          HB_SCRIPT_TAI_THAM = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAI_VIET = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('v'))<<8)|((uint8_t)('t')))),

          HB_SCRIPT_BATAK = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('k')))),
          HB_SCRIPT_BRAHMI = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_MANDAIC = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),

          HB_SCRIPT_CHAKMA = ((hb_tag_t)((((uint8_t)('C'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_MEROITIC_CURSIVE = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_MEROITIC_HIEROGLYPHS = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_MIAO = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_SHARADA = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_SORA_SOMPENG = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_TAKRI = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('k'))<<8)|((uint8_t)('r')))),

          HB_SCRIPT_BASSA_VAH = ((hb_tag_t)((((uint8_t)('B'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('s'))<<8)|((uint8_t)('s')))),
          HB_SCRIPT_CAUCASIAN_ALBANIAN = ((hb_tag_t)((((uint8_t)('A'))<<24)|(((uint8_t)('g'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_DUPLOYAN = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('u'))<<16)|(((uint8_t)('p'))<<8)|((uint8_t)('l')))),
          HB_SCRIPT_ELBASAN = ((hb_tag_t)((((uint8_t)('E'))<<24)|(((uint8_t)('l'))<<16)|(((uint8_t)('b'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_GRANTHA = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('n')))),
          HB_SCRIPT_KHOJKI = ((hb_tag_t)((((uint8_t)('K'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('j')))),
          HB_SCRIPT_KHUDAWADI = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_LINEAR_A = ((hb_tag_t)((((uint8_t)('L'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('a')))),
          HB_SCRIPT_MAHAJANI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('h'))<<8)|((uint8_t)('j')))),
          HB_SCRIPT_MANICHAEAN = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_MENDE_KIKAKUI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_MODI = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('o'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('i')))),
          HB_SCRIPT_MRO = ((hb_tag_t)((((uint8_t)('M'))<<24)|(((uint8_t)('r'))<<16)|(((uint8_t)('o'))<<8)|((uint8_t)('o')))),
          HB_SCRIPT_NABATAEAN = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('b'))<<16)|(((uint8_t)('a'))<<8)|((uint8_t)('t')))),
          HB_SCRIPT_OLD_NORTH_ARABIAN = ((hb_tag_t)((((uint8_t)('N'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('b')))),
          HB_SCRIPT_OLD_PERMIC = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('e'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_PAHAWH_HMONG = ((hb_tag_t)((((uint8_t)('H'))<<24)|(((uint8_t)('m'))<<16)|(((uint8_t)('n'))<<8)|((uint8_t)('g')))),
          HB_SCRIPT_PALMYRENE = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('m')))),
          HB_SCRIPT_PAU_CIN_HAU = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('u'))<<8)|((uint8_t)('c')))),
          HB_SCRIPT_PSALTER_PAHLAVI = ((hb_tag_t)((((uint8_t)('P'))<<24)|(((uint8_t)('h'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('p')))),
          HB_SCRIPT_SIDDHAM = ((hb_tag_t)((((uint8_t)('S'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('d'))<<8)|((uint8_t)('d')))),
          HB_SCRIPT_TIRHUTA = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('h')))),
          HB_SCRIPT_WARANG_CITI = ((hb_tag_t)((((uint8_t)('W'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('r'))<<8)|((uint8_t)('a')))),


  HB_SCRIPT_INVALID = ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0)))),
# 309 "../../../libs/harfbuzz-ng/src/hb-common.h"
  _HB_SCRIPT_MAX_VALUE = ((hb_tag_t)((((uint8_t)(0xff))<<24)|(((uint8_t)(0xff))<<16)|(((uint8_t)(0xff))<<8)|((uint8_t)(0xff)))),
  _HB_SCRIPT_MAX_VALUE_SIGNED = ((hb_tag_t)((((uint8_t)(0x7f))<<24)|(((uint8_t)(0xff))<<16)|(((uint8_t)(0xff))<<8)|((uint8_t)(0xff))))

} hb_script_t;




hb_script_t
hb_script_from_iso15924_tag (hb_tag_t tag);



hb_script_t
hb_script_from_string (const char *s, int len);

hb_tag_t
hb_script_to_iso15924_tag (hb_script_t script);

hb_direction_t
hb_script_get_horizontal_direction (hb_script_t script);




typedef struct hb_user_data_key_t {

  char unused;
} hb_user_data_key_t;

typedef void (*hb_destroy_func_t) (void *user_data);


}
# 35 "../../../libs/harfbuzz-ng/src/hb-blob.h" 2

extern "C" {
# 58 "../../../libs/harfbuzz-ng/src/hb-blob.h"
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;

typedef struct hb_blob_t hb_blob_t;

hb_blob_t *
hb_blob_create (const char *data,
  unsigned int length,
  hb_memory_mode_t mode,
  void *user_data,
  hb_destroy_func_t destroy);







hb_blob_t *
hb_blob_create_sub_blob (hb_blob_t *parent,
    unsigned int offset,
    unsigned int length);

hb_blob_t *
hb_blob_get_empty (void);

hb_blob_t *
hb_blob_reference (hb_blob_t *blob);

void
hb_blob_destroy (hb_blob_t *blob);

hb_bool_t
hb_blob_set_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_blob_get_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key);


void
hb_blob_make_immutable (hb_blob_t *blob);

hb_bool_t
hb_blob_is_immutable (hb_blob_t *blob);


unsigned int
hb_blob_get_length (hb_blob_t *blob);

const char *
hb_blob_get_data (hb_blob_t *blob, unsigned int *length);

char *
hb_blob_get_data_writable (hb_blob_t *blob, unsigned int *length);


}
# 32 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-buffer.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 39 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 2

extern "C" {





typedef enum
{
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
} hb_unicode_general_category_t;
# 87 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef enum
{
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,


  HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26,


  HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35,


  HB_UNICODE_COMBINING_CLASS_CCC36 = 36,


  HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91,


  HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107,


  HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122,


  HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
  HB_UNICODE_COMBINING_CLASS_CCC133 = 132,


  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
  HB_UNICODE_COMBINING_CLASS_BELOW = 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
  HB_UNICODE_COMBINING_CLASS_LEFT = 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,

  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,

  HB_UNICODE_COMBINING_CLASS_INVALID = 255
} hb_unicode_combining_class_t;






typedef struct hb_unicode_funcs_t hb_unicode_funcs_t;





hb_unicode_funcs_t *
hb_unicode_funcs_get_default (void);


hb_unicode_funcs_t *
hb_unicode_funcs_create (hb_unicode_funcs_t *parent);

hb_unicode_funcs_t *
hb_unicode_funcs_get_empty (void);

hb_unicode_funcs_t *
hb_unicode_funcs_reference (hb_unicode_funcs_t *ufuncs);

void
hb_unicode_funcs_destroy (hb_unicode_funcs_t *ufuncs);

hb_bool_t
hb_unicode_funcs_set_user_data (hb_unicode_funcs_t *ufuncs,
           hb_user_data_key_t *key,
           void * data,
           hb_destroy_func_t destroy,
    hb_bool_t replace);


void *
hb_unicode_funcs_get_user_data (hb_unicode_funcs_t *ufuncs,
           hb_user_data_key_t *key);


void
hb_unicode_funcs_make_immutable (hb_unicode_funcs_t *ufuncs);

hb_bool_t
hb_unicode_funcs_is_immutable (hb_unicode_funcs_t *ufuncs);

hb_unicode_funcs_t *
hb_unicode_funcs_get_parent (hb_unicode_funcs_t *ufuncs);
# 222 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef hb_unicode_combining_class_t (*hb_unicode_combining_class_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef unsigned int (*hb_unicode_eastasian_width_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_unicode_general_category_t (*hb_unicode_general_category_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_codepoint_t (*hb_unicode_mirroring_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
typedef hb_script_t (*hb_unicode_script_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);

typedef hb_bool_t (*hb_unicode_compose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t a,
           hb_codepoint_t b,
           hb_codepoint_t *ab,
           void *user_data);
typedef hb_bool_t (*hb_unicode_decompose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t ab,
           hb_codepoint_t *a,
           hb_codepoint_t *b,
           void *user_data);
# 267 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
typedef unsigned int (*hb_unicode_decompose_compatibility_func_t) (hb_unicode_funcs_t *ufuncs,
            hb_codepoint_t u,
            hb_codepoint_t *decomposed,
            void *user_data);
# 288 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_combining_class_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_combining_class_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 304 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_eastasian_width_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_eastasian_width_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 320 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_general_category_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_general_category_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 336 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_mirroring_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_mirroring_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 352 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_script_func (hb_unicode_funcs_t *ufuncs,
      hb_unicode_script_func_t func,
      void *user_data, hb_destroy_func_t destroy);
# 368 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_compose_func (hb_unicode_funcs_t *ufuncs,
       hb_unicode_compose_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 384 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_decompose_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 400 "../../../libs/harfbuzz-ng/src/hb-unicode.h"
void
hb_unicode_funcs_set_decompose_compatibility_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_compatibility_func_t func,
         void *user_data, hb_destroy_func_t destroy);



hb_unicode_combining_class_t
hb_unicode_combining_class (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);

unsigned int
hb_unicode_eastasian_width (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);

hb_unicode_general_category_t
hb_unicode_general_category (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);

hb_codepoint_t
hb_unicode_mirroring (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);

hb_script_t
hb_unicode_script (hb_unicode_funcs_t *ufuncs,
     hb_codepoint_t unicode);

hb_bool_t
hb_unicode_compose (hb_unicode_funcs_t *ufuncs,
      hb_codepoint_t a,
      hb_codepoint_t b,
      hb_codepoint_t *ab);
hb_bool_t
hb_unicode_decompose (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t ab,
        hb_codepoint_t *a,
        hb_codepoint_t *b);

unsigned int
hb_unicode_decompose_compatibility (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t u,
        hb_codepoint_t *decomposed);

}
# 39 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-font.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-font.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-face.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-face.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-blob.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-face.h" 2

extern "C" {






typedef struct hb_face_t hb_face_t;

hb_face_t *
hb_face_create (hb_blob_t *blob,
  unsigned int index);

typedef hb_blob_t * (*hb_reference_table_func_t) (hb_face_t *face, hb_tag_t tag, void *user_data);


hb_face_t *
hb_face_create_for_tables (hb_reference_table_func_t reference_table_func,
      void *user_data,
      hb_destroy_func_t destroy);

hb_face_t *
hb_face_get_empty (void);

hb_face_t *
hb_face_reference (hb_face_t *face);

void
hb_face_destroy (hb_face_t *face);

hb_bool_t
hb_face_set_user_data (hb_face_t *face,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_face_get_user_data (hb_face_t *face,
         hb_user_data_key_t *key);

void
hb_face_make_immutable (hb_face_t *face);

hb_bool_t
hb_face_is_immutable (hb_face_t *face);


hb_blob_t *
hb_face_reference_table (hb_face_t *face,
    hb_tag_t tag);

hb_blob_t *
hb_face_reference_blob (hb_face_t *face);

void
hb_face_set_index (hb_face_t *face,
     unsigned int index);

unsigned int
hb_face_get_index (hb_face_t *face);

void
hb_face_set_upem (hb_face_t *face,
    unsigned int upem);

unsigned int
hb_face_get_upem (hb_face_t *face);

void
hb_face_set_glyph_count (hb_face_t *face,
    unsigned int glyph_count);

unsigned int
hb_face_get_glyph_count (hb_face_t *face);


}
# 36 "../../../libs/harfbuzz-ng/src/hb-font.h" 2

extern "C" {


typedef struct hb_font_t hb_font_t;






typedef struct hb_font_funcs_t hb_font_funcs_t;

hb_font_funcs_t *
hb_font_funcs_create (void);

hb_font_funcs_t *
hb_font_funcs_get_empty (void);

hb_font_funcs_t *
hb_font_funcs_reference (hb_font_funcs_t *ffuncs);

void
hb_font_funcs_destroy (hb_font_funcs_t *ffuncs);

hb_bool_t
hb_font_funcs_set_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);


void *
hb_font_funcs_get_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key);


void
hb_font_funcs_make_immutable (hb_font_funcs_t *ffuncs);

hb_bool_t
hb_font_funcs_is_immutable (hb_font_funcs_t *ffuncs);




typedef struct hb_glyph_extents_t
{
  hb_position_t x_bearing;
  hb_position_t y_bearing;
  hb_position_t width;
  hb_position_t height;
} hb_glyph_extents_t;




typedef hb_bool_t (*hb_font_get_glyph_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t unicode, hb_codepoint_t variation_selector,
            hb_codepoint_t *glyph,
            void *user_data);


typedef hb_position_t (*hb_font_get_glyph_advance_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          void *user_data);
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t;
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t;

typedef hb_bool_t (*hb_font_get_glyph_origin_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t;
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t;

typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
          void *user_data);
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t;


typedef hb_bool_t (*hb_font_get_glyph_extents_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t glyph,
             hb_glyph_extents_t *extents,
             void *user_data);
typedef hb_bool_t (*hb_font_get_glyph_contour_point_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph, unsigned int point_index,
            hb_position_t *x, hb_position_t *y,
            void *user_data);


typedef hb_bool_t (*hb_font_get_glyph_name_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          char *name, unsigned int size,
          void *user_data);
typedef hb_bool_t (*hb_font_get_glyph_from_name_func_t) (hb_font_t *font, void *font_data,
        const char *name, int len,
        hb_codepoint_t *glyph,
        void *user_data);
# 153 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 169 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 185 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 201 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_h_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 217 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_v_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 233 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 249 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_v_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 265 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_extents_func (hb_font_funcs_t *ffuncs,
          hb_font_get_glyph_extents_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 281 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_contour_point_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_contour_point_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 297 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_name_func (hb_font_funcs_t *ffuncs,
       hb_font_get_glyph_name_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 313 "../../../libs/harfbuzz-ng/src/hb-font.h"
void
hb_font_funcs_set_glyph_from_name_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_from_name_func_t func,
     void *user_data, hb_destroy_func_t destroy);




hb_bool_t
hb_font_get_glyph (hb_font_t *font,
     hb_codepoint_t unicode, hb_codepoint_t variation_selector,
     hb_codepoint_t *glyph);

hb_position_t
hb_font_get_glyph_h_advance (hb_font_t *font,
        hb_codepoint_t glyph);
hb_position_t
hb_font_get_glyph_v_advance (hb_font_t *font,
        hb_codepoint_t glyph);

hb_bool_t
hb_font_get_glyph_h_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);
hb_bool_t
hb_font_get_glyph_v_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);

hb_position_t
hb_font_get_glyph_h_kerning (hb_font_t *font,
        hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);
hb_position_t
hb_font_get_glyph_v_kerning (hb_font_t *font,
        hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);

hb_bool_t
hb_font_get_glyph_extents (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_glyph_extents_t *extents);

hb_bool_t
hb_font_get_glyph_contour_point (hb_font_t *font,
     hb_codepoint_t glyph, unsigned int point_index,
     hb_position_t *x, hb_position_t *y);

hb_bool_t
hb_font_get_glyph_name (hb_font_t *font,
   hb_codepoint_t glyph,
   char *name, unsigned int size);
hb_bool_t
hb_font_get_glyph_from_name (hb_font_t *font,
        const char *name, int len,
        hb_codepoint_t *glyph);




void
hb_font_get_glyph_advance_for_direction (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);
void
hb_font_get_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
void
hb_font_add_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
void
hb_font_subtract_glyph_origin_for_direction (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_position_t *x, hb_position_t *y);

void
hb_font_get_glyph_kerning_for_direction (hb_font_t *font,
      hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);

hb_bool_t
hb_font_get_glyph_extents_for_origin (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_glyph_extents_t *extents);

hb_bool_t
hb_font_get_glyph_contour_point_for_origin (hb_font_t *font,
         hb_codepoint_t glyph, unsigned int point_index,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y);


void
hb_font_glyph_to_string (hb_font_t *font,
    hb_codepoint_t glyph,
    char *s, unsigned int size);

hb_bool_t
hb_font_glyph_from_string (hb_font_t *font,
      const char *s, int len,
      hb_codepoint_t *glyph);
# 428 "../../../libs/harfbuzz-ng/src/hb-font.h"
hb_font_t *
hb_font_create (hb_face_t *face);

hb_font_t *
hb_font_create_sub_font (hb_font_t *parent);

hb_font_t *
hb_font_get_empty (void);

hb_font_t *
hb_font_reference (hb_font_t *font);

void
hb_font_destroy (hb_font_t *font);

hb_bool_t
hb_font_set_user_data (hb_font_t *font,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


void *
hb_font_get_user_data (hb_font_t *font,
         hb_user_data_key_t *key);

void
hb_font_make_immutable (hb_font_t *font);

hb_bool_t
hb_font_is_immutable (hb_font_t *font);

hb_font_t *
hb_font_get_parent (hb_font_t *font);

hb_face_t *
hb_font_get_face (hb_font_t *font);


void
hb_font_set_funcs (hb_font_t *font,
     hb_font_funcs_t *klass,
     void *font_data,
     hb_destroy_func_t destroy);


void
hb_font_set_funcs_data (hb_font_t *font,
          void *font_data,
          hb_destroy_func_t destroy);


void
hb_font_set_scale (hb_font_t *font,
     int x_scale,
     int y_scale);

void
hb_font_get_scale (hb_font_t *font,
     int *x_scale,
     int *y_scale);




void
hb_font_set_ppem (hb_font_t *font,
    unsigned int x_ppem,
    unsigned int y_ppem);

void
hb_font_get_ppem (hb_font_t *font,
    unsigned int *x_ppem,
    unsigned int *y_ppem);


}
# 40 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 2

extern "C" {


typedef struct hb_glyph_info_t {
  hb_codepoint_t codepoint;
  hb_mask_t mask;
  uint32_t cluster;


  hb_var_int_t var1;
  hb_var_int_t var2;
} hb_glyph_info_t;

typedef struct hb_glyph_position_t {
  hb_position_t x_advance;
  hb_position_t y_advance;
  hb_position_t x_offset;
  hb_position_t y_offset;


  hb_var_int_t var;
} hb_glyph_position_t;


typedef struct hb_segment_properties_t {
  hb_direction_t direction;
  hb_script_t script;
  hb_language_t language;

  void *reserved1;
  void *reserved2;
} hb_segment_properties_t;







hb_bool_t
hb_segment_properties_equal (const hb_segment_properties_t *a,
        const hb_segment_properties_t *b);

unsigned int
hb_segment_properties_hash (const hb_segment_properties_t *p);







typedef struct hb_buffer_t hb_buffer_t;

hb_buffer_t *
hb_buffer_create (void);

hb_buffer_t *
hb_buffer_get_empty (void);

hb_buffer_t *
hb_buffer_reference (hb_buffer_t *buffer);

void
hb_buffer_destroy (hb_buffer_t *buffer);

hb_bool_t
hb_buffer_set_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);

void *
hb_buffer_get_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key);


typedef enum {
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS
} hb_buffer_content_type_t;

void
hb_buffer_set_content_type (hb_buffer_t *buffer,
       hb_buffer_content_type_t content_type);

hb_buffer_content_type_t
hb_buffer_get_content_type (hb_buffer_t *buffer);


void
hb_buffer_set_unicode_funcs (hb_buffer_t *buffer,
        hb_unicode_funcs_t *unicode_funcs);

hb_unicode_funcs_t *
hb_buffer_get_unicode_funcs (hb_buffer_t *buffer);

void
hb_buffer_set_direction (hb_buffer_t *buffer,
    hb_direction_t direction);

hb_direction_t
hb_buffer_get_direction (hb_buffer_t *buffer);

void
hb_buffer_set_script (hb_buffer_t *buffer,
        hb_script_t script);

hb_script_t
hb_buffer_get_script (hb_buffer_t *buffer);

void
hb_buffer_set_language (hb_buffer_t *buffer,
   hb_language_t language);


hb_language_t
hb_buffer_get_language (hb_buffer_t *buffer);

void
hb_buffer_set_segment_properties (hb_buffer_t *buffer,
      const hb_segment_properties_t *props);

void
hb_buffer_get_segment_properties (hb_buffer_t *buffer,
      hb_segment_properties_t *props);

void
hb_buffer_guess_segment_properties (hb_buffer_t *buffer);


typedef enum {
  HB_BUFFER_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_FLAG_BOT = 0x00000001u,
  HB_BUFFER_FLAG_EOT = 0x00000002u,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 0x00000004u
} hb_buffer_flags_t;

void
hb_buffer_set_flags (hb_buffer_t *buffer,
       hb_buffer_flags_t flags);

hb_buffer_flags_t
hb_buffer_get_flags (hb_buffer_t *buffer);







void
hb_buffer_set_replacement_codepoint (hb_buffer_t *buffer,
         hb_codepoint_t replacement);

hb_codepoint_t
hb_buffer_get_replacement_codepoint (hb_buffer_t *buffer);




void
hb_buffer_reset (hb_buffer_t *buffer);


void
hb_buffer_clear_contents (hb_buffer_t *buffer);


hb_bool_t
hb_buffer_pre_allocate (hb_buffer_t *buffer,
          unsigned int size);



hb_bool_t
hb_buffer_allocation_successful (hb_buffer_t *buffer);

void
hb_buffer_reverse (hb_buffer_t *buffer);

void
hb_buffer_reverse_clusters (hb_buffer_t *buffer);




void
hb_buffer_add (hb_buffer_t *buffer,
        hb_codepoint_t codepoint,
        unsigned int cluster);

void
hb_buffer_add_utf8 (hb_buffer_t *buffer,
      const char *text,
      int text_length,
      unsigned int item_offset,
      int item_length);

void
hb_buffer_add_utf16 (hb_buffer_t *buffer,
       const uint16_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

void
hb_buffer_add_utf32 (hb_buffer_t *buffer,
       const uint32_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);


void
hb_buffer_add_codepoints (hb_buffer_t *buffer,
     const hb_codepoint_t *text,
     int text_length,
     unsigned int item_offset,
     int item_length);



hb_bool_t
hb_buffer_set_length (hb_buffer_t *buffer,
        unsigned int length);


unsigned int
hb_buffer_get_length (hb_buffer_t *buffer);




hb_glyph_info_t *
hb_buffer_get_glyph_infos (hb_buffer_t *buffer,
                           unsigned int *length);


hb_glyph_position_t *
hb_buffer_get_glyph_positions (hb_buffer_t *buffer,
                               unsigned int *length);





void
hb_buffer_normalize_glyphs (hb_buffer_t *buffer);






typedef enum {
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 0x00000001u,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 0x00000002u,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 0x00000004u
} hb_buffer_serialize_flags_t;

typedef enum {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = ((hb_tag_t)((((uint8_t)('T'))<<24)|(((uint8_t)('E'))<<16)|(((uint8_t)('X'))<<8)|((uint8_t)('T')))),
  HB_BUFFER_SERIALIZE_FORMAT_JSON = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('N')))),
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0))))
} hb_buffer_serialize_format_t;


hb_buffer_serialize_format_t
hb_buffer_serialize_format_from_string (const char *str, int len);

const char *
hb_buffer_serialize_format_to_string (hb_buffer_serialize_format_t format);

const char **
hb_buffer_serialize_list_formats (void);


unsigned int
hb_buffer_serialize_glyphs (hb_buffer_t *buffer,
       unsigned int start,
       unsigned int end,
       char *buf,
       unsigned int buf_size,
       unsigned int *buf_consumed,
       hb_font_t *font,
       hb_buffer_serialize_format_t format,
       hb_buffer_serialize_flags_t flags);

hb_bool_t
hb_buffer_deserialize_glyphs (hb_buffer_t *buffer,
         const char *buf,
         int buf_len,
         const char **end_ptr,
         hb_font_t *font,
         hb_buffer_serialize_format_t format);


}
# 33 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-deprecated.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-deprecated.h" 2

extern "C" {
# 49 "../../../libs/harfbuzz-ng/src/hb-deprecated.h"
}
# 35 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-set.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-set.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-set.h" 2

extern "C" {




typedef struct hb_set_t hb_set_t;


hb_set_t *
hb_set_create (void);

hb_set_t *
hb_set_get_empty (void);

hb_set_t *
hb_set_reference (hb_set_t *set);

void
hb_set_destroy (hb_set_t *set);

hb_bool_t
hb_set_set_user_data (hb_set_t *set,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

void *
hb_set_get_user_data (hb_set_t *set,
        hb_user_data_key_t *key);



hb_bool_t
hb_set_allocation_successful (const hb_set_t *set);

void
hb_set_clear (hb_set_t *set);

hb_bool_t
hb_set_is_empty (const hb_set_t *set);

hb_bool_t
hb_set_has (const hb_set_t *set,
     hb_codepoint_t codepoint);



void
hb_set_add (hb_set_t *set,
     hb_codepoint_t codepoint);

void
hb_set_add_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

void
hb_set_del (hb_set_t *set,
     hb_codepoint_t codepoint);

void
hb_set_del_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

hb_bool_t
hb_set_is_equal (const hb_set_t *set,
   const hb_set_t *other);

void
hb_set_set (hb_set_t *set,
     const hb_set_t *other);

void
hb_set_union (hb_set_t *set,
       const hb_set_t *other);

void
hb_set_intersect (hb_set_t *set,
    const hb_set_t *other);

void
hb_set_subtract (hb_set_t *set,
   const hb_set_t *other);

void
hb_set_symmetric_difference (hb_set_t *set,
        const hb_set_t *other);

void
hb_set_invert (hb_set_t *set);

unsigned int
hb_set_get_population (const hb_set_t *set);


hb_codepoint_t
hb_set_get_min (const hb_set_t *set);


hb_codepoint_t
hb_set_get_max (const hb_set_t *set);


hb_bool_t
hb_set_next (const hb_set_t *set,
      hb_codepoint_t *codepoint);


hb_bool_t
hb_set_next_range (const hb_set_t *set,
     hb_codepoint_t *first,
     hb_codepoint_t *last);


}
# 38 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-shape.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer.h" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 39 "../../../libs/harfbuzz-ng/src/hb-shape.h" 2

extern "C" {


typedef struct hb_feature_t {
  hb_tag_t tag;
  uint32_t value;
  unsigned int start;
  unsigned int end;
} hb_feature_t;


hb_bool_t
hb_feature_from_string (const char *str, int len,
   hb_feature_t *feature);



void
hb_feature_to_string (hb_feature_t *feature,
        char *buf, unsigned int size);


void
hb_shape (hb_font_t *font,
   hb_buffer_t *buffer,
   const hb_feature_t *features,
   unsigned int num_features);

hb_bool_t
hb_shape_full (hb_font_t *font,
        hb_buffer_t *buffer,
        const hb_feature_t *features,
        unsigned int num_features,
        const char * const *shaper_list);

const char **
hb_shape_list_shapers (void);


}
# 39 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-font.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-shape-plan.h" 2

extern "C" {

typedef struct hb_shape_plan_t hb_shape_plan_t;

hb_shape_plan_t *
hb_shape_plan_create (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

hb_shape_plan_t *
hb_shape_plan_create_cached (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

hb_shape_plan_t *
hb_shape_plan_get_empty (void);

hb_shape_plan_t *
hb_shape_plan_reference (hb_shape_plan_t *shape_plan);

void
hb_shape_plan_destroy (hb_shape_plan_t *shape_plan);

hb_bool_t
hb_shape_plan_set_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

void *
hb_shape_plan_get_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key);


hb_bool_t
hb_shape_plan_execute (hb_shape_plan_t *shape_plan,
         hb_font_t *font,
         hb_buffer_t *buffer,
         const hb_feature_t *features,
         unsigned int num_features);

const char *
hb_shape_plan_get_shaper (hb_shape_plan_t *shape_plan);


}
# 40 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode.h" 1
# 41 "../../../libs/harfbuzz-ng/src/hb.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-version.h" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-version.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-common.h" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-version.h" 2

extern "C" {
# 50 "../../../libs/harfbuzz-ng/src/hb-version.h"
void
hb_version (unsigned int *major,
     unsigned int *minor,
     unsigned int *micro);

const char *
hb_version_string (void);

hb_bool_t
hb_version_atleast (unsigned int major,
      unsigned int minor,
      unsigned int micro);


}
# 42 "../../../libs/harfbuzz-ng/src/hb.h" 2

extern "C" {
}
# 37 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2


# 1 "../../../libs/harfbuzz-ng/src/hb-ot.h" 1
# 33 "../../../libs/harfbuzz-ng/src/hb-ot.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-font.h" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-font.h"
extern "C" {


void
hb_ot_font_set_funcs (hb_font_t *font);


}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h"
extern "C" {





void
hb_ot_tags_from_script (hb_script_t script,
   hb_tag_t *script_tag_1,
   hb_tag_t *script_tag_2);

hb_script_t
hb_ot_tag_to_script (hb_tag_t tag);

hb_tag_t
hb_ot_tag_from_language (hb_language_t language);

hb_language_t
hb_ot_tag_to_language (hb_tag_t tag);


}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h" 2

extern "C" {
# 51 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_glyph_classes (hb_face_t *face);

typedef enum {
  HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED = 0,
  HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH = 1,
  HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE = 2,
  HB_OT_LAYOUT_GLYPH_CLASS_MARK = 3,
  HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT = 4
} hb_ot_layout_glyph_class_t;

hb_ot_layout_glyph_class_t
hb_ot_layout_get_glyph_class (hb_face_t *face,
         hb_codepoint_t glyph);

void
hb_ot_layout_get_glyphs_in_class (hb_face_t *face,
      hb_ot_layout_glyph_class_t klass,
      hb_set_t *glyphs );




unsigned int
hb_ot_layout_get_attach_points (hb_face_t *face,
    hb_codepoint_t glyph,
    unsigned int start_offset,
    unsigned int *point_count ,
    unsigned int *point_array );


unsigned int
hb_ot_layout_get_ligature_carets (hb_font_t *font,
      hb_direction_t direction,
      hb_codepoint_t glyph,
      unsigned int start_offset,
      unsigned int *caret_count ,
      hb_position_t *caret_array );
# 99 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
unsigned int
hb_ot_layout_table_get_script_tags (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int start_offset,
        unsigned int *script_count ,
        hb_tag_t *script_tags );

hb_bool_t
hb_ot_layout_table_find_script (hb_face_t *face,
    hb_tag_t table_tag,
    hb_tag_t script_tag,
    unsigned int *script_index);


hb_bool_t
hb_ot_layout_table_choose_script (hb_face_t *face,
      hb_tag_t table_tag,
      const hb_tag_t *script_tags,
      unsigned int *script_index,
      hb_tag_t *chosen_script);

unsigned int
hb_ot_layout_table_get_feature_tags (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int start_offset,
         unsigned int *feature_count ,
         hb_tag_t *feature_tags );

unsigned int
hb_ot_layout_script_get_language_tags (hb_face_t *face,
           hb_tag_t table_tag,
           unsigned int script_index,
           unsigned int start_offset,
           unsigned int *language_count ,
           hb_tag_t *language_tags );

hb_bool_t
hb_ot_layout_script_find_language (hb_face_t *face,
       hb_tag_t table_tag,
       unsigned int script_index,
       hb_tag_t language_tag,
       unsigned int *language_index);

hb_bool_t
hb_ot_layout_language_get_required_feature_index (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int *feature_index);

hb_bool_t
hb_ot_layout_language_get_required_feature (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int script_index,
         unsigned int language_index,
         unsigned int *feature_index,
         hb_tag_t *feature_tag);

unsigned int
hb_ot_layout_language_get_feature_indexes (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int start_offset,
        unsigned int *feature_count ,
        unsigned int *feature_indexes );

unsigned int
hb_ot_layout_language_get_feature_tags (hb_face_t *face,
     hb_tag_t table_tag,
     unsigned int script_index,
     unsigned int language_index,
     unsigned int start_offset,
     unsigned int *feature_count ,
     hb_tag_t *feature_tags );

hb_bool_t
hb_ot_layout_language_find_feature (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        hb_tag_t feature_tag,
        unsigned int *feature_index);

unsigned int
hb_ot_layout_feature_get_lookups (hb_face_t *face,
      hb_tag_t table_tag,
      unsigned int feature_index,
      unsigned int start_offset,
      unsigned int *lookup_count ,
      unsigned int *lookup_indexes );

unsigned int
hb_ot_layout_table_get_lookup_count (hb_face_t *face,
         hb_tag_t table_tag);


void
hb_ot_layout_collect_lookups (hb_face_t *face,
         hb_tag_t table_tag,
         const hb_tag_t *scripts,
         const hb_tag_t *languages,
         const hb_tag_t *features,
         hb_set_t *lookup_indexes );

void
hb_ot_layout_lookup_collect_glyphs (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int lookup_index,
        hb_set_t *glyphs_before,
        hb_set_t *glyphs_input,
        hb_set_t *glyphs_after,
        hb_set_t *glyphs_output );
# 244 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_substitution (hb_face_t *face);

hb_bool_t
hb_ot_layout_lookup_would_substitute (hb_face_t *face,
          unsigned int lookup_index,
          const hb_codepoint_t *glyphs,
          unsigned int glyphs_length,
          hb_bool_t zero_context);

void
hb_ot_layout_lookup_substitute_closure (hb_face_t *face,
            unsigned int lookup_index,
            hb_set_t *glyphs
                                     );
# 277 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_has_positioning (hb_face_t *face);
# 291 "../../../libs/harfbuzz-ng/src/hb-ot-layout.h"
hb_bool_t
hb_ot_layout_get_size_params (hb_face_t *face,
         unsigned int *design_size,
         unsigned int *subfamily_id,
         unsigned int *subfamily_name_id,
         unsigned int *range_start,
         unsigned int *range_end );


}
# 35 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-tag.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-shape.h" 1
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-shape.h"
extern "C" {


void
hb_ot_shape_glyphs_closure (hb_font_t *font,
       hb_buffer_t *buffer,
       const hb_feature_t *features,
       unsigned int num_features,
       hb_set_t *glyphs);

void
hb_ot_shape_plan_collect_lookups (hb_shape_plan_t *shape_plan,
      hb_tag_t table_tag,
      hb_set_t *lookup_indexes );

}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot.h" 2

extern "C" {

}
# 40 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 1 3 4
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 212 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4

extern "C" {






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitflags.h" 1 3 4
# 42 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 1 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\endian.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\typesizes.h" 1 3 4
# 122 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap-16.h" 1 3 4
# 35 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 65 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 95 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 235 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 305 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;

typedef __caddr_t caddr_t;







typedef __key_t key_t;
# 135 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 57 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __clock_t clock_t;



# 73 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __time_t time_t;



# 91 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __timer_t timer_t;
# 136 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 150 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 203 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 222 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\select.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 1 3 4
# 22 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 120 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef long int __fd_mask;
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern "C" {
# 106 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
}
# 223 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 58 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
}
# 226 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 265 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;

    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 274 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


}
# 315 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 620 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 812 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 899 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdlib-float.h" 1 3 4
# 956 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 968 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
}
# 44 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 147 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 45 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern "C" {




# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 166 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 234 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 261 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}
# 46 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 47 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 1 3 4
# 29 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 1 3 4
# 15 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 16 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 1 3 4
# 82 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 49 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 40 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  __off64_t _offset;
# 302 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 464 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 526 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
}
# 75 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 108 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdio_lim.h" 1 3 4
# 165 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 205 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 649 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (const char *__s);






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 1 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 873 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 943 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
}
# 53 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\linux\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno.h" 1 3 4



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno-base.h" 1 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm-generic\\errno.h" 2 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\asm\\errno.h" 2 3 4
# 5 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\linux\\errno.h" 2 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 2 3 4
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 68 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\errno.h" 3 4
typedef int error_t;
# 54 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 55 "../../../libs/harfbuzz-ng/src/hb-private.hh" 2
# 181 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename Type>
static inline Type MIN (const Type &a, const Type &b) { return a < b ? a : b; }


template <typename Type>
static inline Type MAX (const Type &a, const Type &b) { return a > b ? a : b; }

static inline unsigned int DIV_CEIL (const unsigned int a, unsigned int b)
{ return (a + (b - 1)) / b; }



template <typename Type, unsigned int n>
static inline unsigned int ARRAY_LENGTH (const Type (&)[n]) { return n; }
# 213 "../../../libs/harfbuzz-ng/src/hb-private.hh"
__attribute__((unused)) typedef int _static_assert_on_line_213_failed[(((sizeof (int8_t) == 1)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_214_failed[(((sizeof (uint8_t) == 1)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_215_failed[(((sizeof (int16_t) == 2)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_216_failed[(((sizeof (uint16_t) == 2)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_217_failed[(((sizeof (int32_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_218_failed[(((sizeof (uint32_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_219_failed[(((sizeof (int64_t) == 8)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_220_failed[(((sizeof (uint64_t) == 8)))?1:-1];

__attribute__((unused)) typedef int _static_assert_on_line_222_failed[(((sizeof (hb_codepoint_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_223_failed[(((sizeof (hb_position_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_224_failed[(((sizeof (hb_mask_t) == 4)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_225_failed[(((sizeof (hb_var_int_t) == 4)))?1:-1];
# 258 "../../../libs/harfbuzz-ng/src/hb-private.hh"
struct _hb_void_t {};
typedef const _hb_void_t &hb_void_t;



static inline __attribute__((const)) unsigned int
_hb_popcount32 (uint32_t mask)
{

  return __builtin_popcount (mask);







}


static inline __attribute__((const)) unsigned int
_hb_bit_storage (unsigned int number)
{



  unsigned int n_bits = 0;
  while (number) {
    n_bits++;
    number >>= 1;
  }
  return n_bits;

}


static inline __attribute__((const)) unsigned int
_hb_ctz (unsigned int number)
{



  unsigned int n_bits = 0;
  if ((!number)) return 0;
  while (!(number & 1)) {
    n_bits++;
    number >>= 1;
  }
  return n_bits;

}

static inline bool
_hb_unsigned_int_mul_overflows (unsigned int count, unsigned int size)
{
  return (size > 0) && (count >= ((unsigned int) -1) / size);
}



typedef int (*hb_compare_func_t) (const void *, const void *);
# 327 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename Type, unsigned int StaticSize=16>
struct hb_prealloced_array_t
{
  unsigned int len;
  unsigned int allocated;
  Type *array;
  Type static_array[StaticSize];

  void init (void) { memset (this, 0, sizeof (*this)); }

  inline Type& operator [] (unsigned int i) { return array[i]; }
  inline const Type& operator [] (unsigned int i) const { return array[i]; }

  inline Type *push (void)
  {
    if (!array) {
      array = static_array;
      allocated = ARRAY_LENGTH (static_array);
    }
    if ((len < allocated))
      return &array[len++];


    unsigned int new_allocated = allocated + (allocated >> 1) + 8;
    Type *new_array = __null;

    if (array == static_array) {
      new_array = (Type *) calloc (new_allocated, sizeof (Type));
      if (new_array)
        memcpy (new_array, array, len * sizeof (Type));
    } else {
      bool overflows = (new_allocated < allocated) || _hb_unsigned_int_mul_overflows (new_allocated, sizeof (Type));
      if ((!overflows)) {
 new_array = (Type *) realloc (array, new_allocated * sizeof (Type));
      }
    }

    if ((!new_array))
      return __null;

    array = new_array;
    allocated = new_allocated;
    return &array[len++];
  }

  inline void pop (void)
  {
    len--;
  }

  inline void remove (unsigned int i)
  {
     if ((i >= len))
       return;
     memmove (static_cast<void *> (&array[i]),
       static_cast<void *> (&array[i + 1]),
       (len - i - 1) * sizeof (Type));
     len--;
  }

  inline void shrink (unsigned int l)
  {
     if (l < len)
       len = l;
  }

  template <typename T>
  inline Type *find (T v) {
    for (unsigned int i = 0; i < len; i++)
      if (array[i] == v)
 return &array[i];
    return __null;
  }
  template <typename T>
  inline const Type *find (T v) const {
    for (unsigned int i = 0; i < len; i++)
      if (array[i] == v)
 return &array[i];
    return __null;
  }

  inline void qsort (void)
  {
    ::qsort (array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  inline void qsort (unsigned int start, unsigned int end)
  {
    ::qsort (array + start, end - start, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  template <typename T>
  inline Type *bsearch (T *key)
  {
    return (Type *) ::bsearch (key, array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }
  template <typename T>
  inline const Type *bsearch (T *key) const
  {
    return (const Type *) ::bsearch (key, array, len, sizeof (Type), (hb_compare_func_t) Type::cmp);
  }

  inline void finish (void)
  {
    if (array != static_array)
      free (array);
    array = __null;
    allocated = len = 0;
  }
};

template <typename Type>
struct hb_auto_array_t : hb_prealloced_array_t <Type>
{
  hb_auto_array_t (void) { hb_prealloced_array_t<Type>::init (); }
  ~hb_auto_array_t (void) { hb_prealloced_array_t<Type>::finish (); }
};



template <typename item_t, typename lock_t>
struct hb_lockable_set_t
{
  hb_prealloced_array_t <item_t, 2> items;

  inline void init (void) { items.init (); }

  template <typename T>
  inline item_t *replace_or_insert (T v, lock_t &l, bool replace)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item) {
      if (replace) {
 item_t old = *item;
 *item = v;
 l.unlock ();
 old.finish ();
      }
      else {
        item = __null;
 l.unlock ();
      }
    } else {
      item = items.push ();
      if ((item))
 *item = v;
      l.unlock ();
    }
    return item;
  }

  template <typename T>
  inline void remove (T v, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item) {
      item_t old = *item;
      *item = items[items.len - 1];
      items.pop ();
      l.unlock ();
      old.finish ();
    } else {
      l.unlock ();
    }
  }

  template <typename T>
  inline bool find (T v, item_t *i, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (item)
      *i = *item;
    l.unlock ();
    return !!item;
  }

  template <typename T>
  inline item_t *find_or_insert (T v, lock_t &l)
  {
    l.lock ();
    item_t *item = items.find (v);
    if (!item) {
      item = items.push ();
      if ((item))
        *item = v;
    }
    l.unlock ();
    return item;
  }

  inline void finish (lock_t &l)
  {
    if (!items.len) {

      items.finish ();
      return;
    }
    l.lock ();
    while (items.len) {
      item_t old = items[items.len - 1];
 items.pop ();
 l.unlock ();
 old.finish ();
 l.lock ();
    }
    items.finish ();
    l.unlock ();
  }

};




static inline bool ISALPHA (unsigned char c)
{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }
static inline bool ISALNUM (unsigned char c)
{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'); }
static inline bool ISSPACE (unsigned char c)
{ return c == ' ' || c =='\f'|| c =='\n'|| c =='\r'|| c =='\t'|| c =='\v'; }
static inline unsigned char TOUPPER (unsigned char c)
{ return (c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c; }
static inline unsigned char TOLOWER (unsigned char c)
{ return (c >= 'A' && c <= 'Z') ? c - 'A' + 'a' : c; }
# 576 "../../../libs/harfbuzz-ng/src/hb-private.hh"
static inline bool
_hb_debug (unsigned int level,
    unsigned int max_level)
{
  return level < max_level;
}




template <int max_level> static inline void
_hb_debug_msg_va (const char *what,
    const void *obj,
    const char *func,
    bool indented,
    unsigned int level,
    int level_dir,
    const char *message,
    va_list ap) __attribute__((__format__ (__printf__, 7, 0)));
template <int max_level> static inline void
_hb_debug_msg_va (const char *what,
    const void *obj,
    const char *func,
    bool indented,
    unsigned int level,
    int level_dir,
    const char *message,
    va_list ap)
{
  if (!_hb_debug (level, max_level))
    return;

  fprintf (stderr, "%-10s", what ? what : "");

  if (obj)
    fprintf (stderr, "(%0*lx) ", (unsigned int) (2 * sizeof (void *)), (unsigned long) obj);
  else
    fprintf (stderr, " %*s  ", (unsigned int) (2 * sizeof (void *)), "");

  if (indented) {







    static const char bars[] = "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202" "\342\224\202";
    fprintf (stderr, "%2u %s" "\342\224\234" "%s",
      level,
      bars + sizeof (bars) - 1 - MIN ((unsigned int) sizeof (bars), (unsigned int) (sizeof ("\342\224\202") - 1) * level),
      level_dir ? (level_dir > 0 ? "\342\225\256" : "\342\225\257") : "\342\225\264");
  } else
    fprintf (stderr, "   " "\342\224\234" "\342\225\264");

  if (func)
  {
    unsigned int func_len = strlen (func);


    if (0 == strncmp (func, "typename ", 9))
      func += 9;

    const char *space = strchr (func, ' ');
    if (space)
      func = space + 1;

    const char *paren = strchr (func, '(');
    if (paren)
      func_len = paren - func;

    fprintf (stderr, "%.*s: ", func_len, func);
  }

  if (message)
    vfprintf (stderr, message, ap);

  fprintf (stderr, "\n");
}
template <> inline void
_hb_debug_msg_va<0> (const char *what __attribute__((unused)),
       const void *obj __attribute__((unused)),
       const char *func __attribute__((unused)),
       bool indented __attribute__((unused)),
       unsigned int level __attribute__((unused)),
       int level_dir __attribute__((unused)),
       const char *message __attribute__((unused)),
       va_list ap __attribute__((unused))) {}

template <int max_level> static inline void
_hb_debug_msg (const char *what,
        const void *obj,
        const char *func,
        bool indented,
        unsigned int level,
        int level_dir,
        const char *message,
        ...) __attribute__((__format__ (__printf__, 7, 8)));
template <int max_level> static inline void
_hb_debug_msg (const char *what,
        const void *obj,
        const char *func,
        bool indented,
        unsigned int level,
        int level_dir,
        const char *message,
        ...)
{
  va_list ap;
  __builtin_va_start(ap,message);
  _hb_debug_msg_va<max_level> (what, obj, func, indented, level, level_dir, message, ap);
  __builtin_va_end(ap);
}
template <> inline void
_hb_debug_msg<0> (const char *what __attribute__((unused)),
    const void *obj __attribute__((unused)),
    const char *func __attribute__((unused)),
    bool indented __attribute__((unused)),
    unsigned int level __attribute__((unused)),
    int level_dir __attribute__((unused)),
    const char *message __attribute__((unused)),
    ...) __attribute__((__format__ (__printf__, 7, 8)));
template <> inline void
_hb_debug_msg<0> (const char *what __attribute__((unused)),
    const void *obj __attribute__((unused)),
    const char *func __attribute__((unused)),
    bool indented __attribute__((unused)),
    unsigned int level __attribute__((unused)),
    int level_dir __attribute__((unused)),
    const char *message __attribute__((unused)),
    ...) {}
# 717 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename T>
struct hb_printer_t {
  const char *print (const T&) { return "something"; }
};

template <>
struct hb_printer_t<bool> {
  const char *print (bool v) { return v ? "true" : "false"; }
};

template <>
struct hb_printer_t<hb_void_t> {
  const char *print (hb_void_t) { return ""; }
};






template <typename T>
static inline void _hb_warn_no_return (bool returned)
{
  if ((!returned)) {
    fprintf (stderr, "OUCH, returned with no call to TRACE_RETURN.  This is a bug, please report.\n");
  }
}
template <>
           inline void _hb_warn_no_return<hb_void_t> (bool returned __attribute__((unused)))
{}

template <int max_level, typename ret_t>
struct hb_auto_trace_t {
  explicit inline hb_auto_trace_t (unsigned int *plevel_,
       const char *what_,
       const void *obj_,
       const char *func,
       const char *message,
       ...) : plevel (plevel_), what (what_), obj (obj_), returned (false)
  {
    if (plevel) ++*plevel;

    va_list ap;
    __builtin_va_start(ap,message);
    _hb_debug_msg_va<max_level> (what, obj, func, true, plevel ? *plevel : 0, +1, message, ap);
    __builtin_va_end(ap);
  }
  inline ~hb_auto_trace_t (void)
  {
    _hb_warn_no_return<ret_t> (returned);
    if (!returned) {
      _hb_debug_msg<max_level> (what, obj, __null, true, plevel ? *plevel : 1, -1, " ");
    }
    if (plevel) --*plevel;
  }

  inline ret_t ret (ret_t v, unsigned int line = 0)
  {
    if ((returned)) {
      fprintf (stderr, "OUCH, double calls to TRACE_RETURN.  This is a bug, please report.\n");
      return v;
    }

    _hb_debug_msg<max_level> (what, obj, __null, true, plevel ? *plevel : 1, -1,
         "return %s (line %d)",
         hb_printer_t<ret_t>().print (v), line);
    if (plevel) --*plevel;
    plevel = __null;
    returned = true;
    return v;
  }

  private:
  unsigned int *plevel;
  const char *what;
  const void *obj;
  bool returned;
};
template <typename ret_t>
struct hb_auto_trace_t<0, ret_t> {
  explicit inline hb_auto_trace_t (unsigned int *plevel_ __attribute__((unused)),
       const char *what __attribute__((unused)),
       const void *obj __attribute__((unused)),
       const char *func __attribute__((unused)),
       const char *message __attribute__((unused)),
       ...) {}

  inline ret_t ret (ret_t v, unsigned int line __attribute__((unused)) = 0) { return v; }
};





template <typename T> class hb_assert_unsigned_t;
template <> class hb_assert_unsigned_t<unsigned char> {};
template <> class hb_assert_unsigned_t<unsigned short> {};
template <> class hb_assert_unsigned_t<unsigned int> {};
template <> class hb_assert_unsigned_t<unsigned long> {};

template <typename T> static inline bool
hb_in_range (T u, T lo, T hi)
{





  __attribute__((unused)) typedef int _static_assert_on_line_825_failed[(((sizeof (hb_assert_unsigned_t<T>) >= 0)))?1:-1];



  return (T)(u - lo) <= (T)(hi - lo);
}

template <typename T> static inline bool
hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2)
{
  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2);
}

template <typename T> static inline bool
hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2, T lo3, T hi3)
{
  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2) || hb_in_range (u, lo3, hi3);
}
# 853 "../../../libs/harfbuzz-ng/src/hb-private.hh"
template <typename T, typename T2> static inline void
hb_bubble_sort (T *array, unsigned int len, int(*compar)(const T *, const T *), T2 *array2)
{
  if ((!len))
    return;

  unsigned int k = len - 1;
  do {
    unsigned int new_k = 0;

    for (unsigned int j = 0; j < k; j++)
      if (compar (&array[j], &array[j+1]) > 0)
      {
        {
   T t;
   t = array[j];
   array[j] = array[j + 1];
   array[j + 1] = t;
 }
        if (array2)
        {
   T2 t;
   t = array2[j];
   array2[j] = array2[j + 1];
   array2[j + 1] = t;
 }

 new_k = j;
      }
    k = new_k;
  } while (k);
}

template <typename T> static inline void
hb_bubble_sort (T *array, unsigned int len, int(*compar)(const T *, const T *))
{
  hb_bubble_sort (array, len, compar, (int *) __null);
}

static inline hb_bool_t
hb_codepoint_parse (const char *s, unsigned int len, int base, hb_codepoint_t *out)
{

  char buf[64];
  len = MIN (ARRAY_LENGTH (buf) - 1, len);
  strncpy (buf, s, len);
  buf[len] = '\0';

  char *end;
  (*__errno_location ()) = 0;
  unsigned long v = strtoul (buf, &end, base);
  if ((*__errno_location ())) return false;
  if (*end) return false;
  *out = v;
  return true;
}




struct hb_options_t
{
  unsigned int initialized : 1;
  unsigned int uniscribe_bug_compatible : 1;
};

union hb_options_union_t {
  unsigned int i;
  hb_options_t opts;
};
__attribute__((unused)) typedef int _static_assert_on_line_923_failed[(((sizeof (int) == sizeof (hb_options_union_t))))?1:-1];

__attribute__((__visibility__("hidden"))) void
_hb_options_init (void);

extern __attribute__((__visibility__("hidden"))) hb_options_union_t _hb_options;

static inline hb_options_t
hb_options (void)
{
  if ((!_hb_options.i))
    _hb_options_init ();

  return _hb_options.opts;
}
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 2

# 1 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-font-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-object-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-atomic-private.hh" 1
# 125 "../../../libs/harfbuzz-ng/src/hb-atomic-private.hh"
typedef int hb_atomic_int_t;
# 38 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh" 1
# 105 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh"
typedef int hb_mutex_impl_t;
# 116 "../../../libs/harfbuzz-ng/src/hb-mutex-private.hh"
struct hb_mutex_t
{


  hb_mutex_impl_t m;

  inline void init (void) { do {} while (0); }
  inline void lock (void) { do {} while (0); }
  inline void unlock (void) { do {} while (0); }
  inline void finish (void) { do {} while (0); }
};
# 39 "../../../libs/harfbuzz-ng/src/hb-object-private.hh" 2
# 52 "../../../libs/harfbuzz-ng/src/hb-object-private.hh"
struct hb_reference_count_t
{
  hb_atomic_int_t ref_count;

  inline void init (int v) { ref_count = v; }
  inline int inc (void) { return (((const_cast<hb_atomic_int_t &> (ref_count)) += (1)) - (1)); }
  inline int dec (void) { return (((const_cast<hb_atomic_int_t &> (ref_count)) += (-1)) - (-1)); }
  inline void finish (void) { ref_count = ((hb_atomic_int_t) -1); }

  inline bool is_invalid (void) const { return ref_count == ((hb_atomic_int_t) -1); }

};





struct hb_user_data_array_t
{
  struct hb_user_data_item_t {
    hb_user_data_key_t *key;
    void *data;
    hb_destroy_func_t destroy;

    inline bool operator == (hb_user_data_key_t *other_key) const { return key == other_key; }
    inline bool operator == (hb_user_data_item_t &other) const { return key == other.key; }

    void finish (void) { if (destroy) destroy (data); }
  };

  hb_mutex_t lock;
  hb_lockable_set_t<hb_user_data_item_t, hb_mutex_t> items;

  inline void init (void) { lock.init (); items.init (); }

  __attribute__((__visibility__("hidden"))) bool set (hb_user_data_key_t *key,
   void * data,
   hb_destroy_func_t destroy,
   hb_bool_t replace);

  __attribute__((__visibility__("hidden"))) void *get (hb_user_data_key_t *key);

  inline void finish (void) { items.finish (lock); lock.finish (); }
};




struct hb_object_header_t
{
  hb_reference_count_t ref_count;
  hb_user_data_array_t user_data;



  private:
  __attribute__((unused)) inline void _static_assertion_on_line_108 (void) const { do { typedef __typeof__(*this) _type_108; union _type__type_108_on_line_108_is_not_POD { _type_108 instance; }; } while (0); };
};




template <typename Type>
static inline void hb_object_trace (const Type *obj, const char *function)
{
  _hb_debug_msg<(0 +0)> ("OBJECT", ((void *) obj), __null, false, 0, 0, "%s refcount=%d", function, obj ? obj->header.ref_count.ref_count : 0)


                                                ;
}

template <typename Type>
static inline Type *hb_object_create (void)
{
  Type *obj = (Type *) calloc (1, sizeof (Type));

  if ((!obj))
    return obj;

  hb_object_init (obj);
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  return obj;
}
template <typename Type>
static inline void hb_object_init (Type *obj)
{
  obj->header.ref_count.init (1);
  obj->header.user_data.init ();
}
template <typename Type>
static inline bool hb_object_is_inert (const Type *obj)
{
  return (obj->header.ref_count.is_invalid ());
}
template <typename Type>
static inline Type *hb_object_reference (Type *obj)
{
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  if ((!obj || hb_object_is_inert (obj)))
    return obj;
  obj->header.ref_count.inc ();
  return obj;
}
template <typename Type>
static inline bool hb_object_destroy (Type *obj)
{
  hb_object_trace (obj, __PRETTY_FUNCTION__);
  if ((!obj || hb_object_is_inert (obj)))
    return false;
  if (obj->header.ref_count.dec () != 1)
    return false;

  obj->header.ref_count.finish ();
  obj->header.user_data.finish ();
  return true;
}
template <typename Type>
static inline bool hb_object_set_user_data (Type *obj,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace)
{
  if ((!obj || hb_object_is_inert (obj)))
    return false;
  return obj->header.user_data.set (key, data, destroy, replace);
}

template <typename Type>
static inline void *hb_object_get_user_data (Type *obj,
          hb_user_data_key_t *key)
{
  if ((!obj || hb_object_is_inert (obj)))
    return __null;
  return obj->header.user_data.get (key);
}
# 35 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-face-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh"
typedef hb_bool_t hb_shape_func_t (hb_shape_plan_t *shape_plan,
       hb_font_t *font,
       hb_buffer_t *buffer,
       const hb_feature_t *features,
       unsigned int num_features);



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
extern "C" __attribute__((__visibility__("hidden"))) hb_shape_func_t _hb_ot_shape;
# 41 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 2


struct hb_shaper_pair_t {
  char name[16];
  hb_shape_func_t *func;
};

__attribute__((__visibility__("hidden"))) const hb_shaper_pair_t *
_hb_shapers_get (void);



struct hb_shaper_data_t {

# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
void *ot;
# 56 "../../../libs/harfbuzz-ng/src/hb-shaper-private.hh" 2

};
# 36 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh"
struct hb_shape_plan_t
{
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_38 (void) const { do { typedef __typeof__(*this) _type_38; union _type__type_38_on_line_38_is_not_POD { _type_38 instance; }; } while (0); };

  hb_bool_t default_shaper_list;
  hb_face_t *face_unsafe;
  hb_segment_properties_t props;

  hb_shape_func_t *shaper_func;
  const char *shaper_name;

  hb_feature_t *user_features;
  unsigned int num_user_features;

  struct hb_shaper_data_t shaper_data;
};





# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_shape_plan_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_shape_plan_data_t * _hb_ot_shaper_shape_plan_data_create (hb_shape_plan_t *shape_plan , const hb_feature_t *user_features , unsigned int num_user_features); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_shape_plan_data_destroy (struct hb_ot_shaper_shape_plan_data_t *data);
# 58 "../../../libs/harfbuzz-ng/src/hb-shape-plan-private.hh" 2
# 37 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2






struct hb_face_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_45 (void) const { do { typedef __typeof__(*this) _type_45; union _type__type_45_on_line_45_is_not_POD { _type_45 instance; }; } while (0); };

  hb_bool_t immutable;

  hb_reference_table_func_t reference_table_func;
  void *user_data;
  hb_destroy_func_t destroy;

  unsigned int index;
  mutable unsigned int upem;
  mutable unsigned int num_glyphs;

  struct hb_shaper_data_t shaper_data;

  struct plan_node_t {
    hb_shape_plan_t *shape_plan;
    plan_node_t *next;
  } *shape_plans;


  inline hb_blob_t *reference_table (hb_tag_t tag) const
  {
    hb_blob_t *blob;

    if ((!reference_table_func))
      return hb_blob_get_empty ();

    blob = reference_table_func ( const_cast<hb_face_t *> (this), tag, user_data);
    if ((!blob))
      return hb_blob_get_empty ();

    return blob;
  }

  inline __attribute__((pure)) unsigned int get_upem (void) const
  {
    if ((!upem))
      load_upem ();
    return upem;
  }

  inline unsigned int get_num_glyphs (void) const
  {
    if ((num_glyphs == (unsigned int) -1))
      load_num_glyphs ();
    return num_glyphs;
  }

  private:
  __attribute__((__visibility__("hidden"))) void load_upem (void) const;
  __attribute__((__visibility__("hidden"))) void load_num_glyphs (void) const;
};

extern __attribute__((__visibility__("hidden"))) const hb_face_t _hb_face_nil;



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_face_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_face_data_t * _hb_ot_shaper_face_data_create (hb_face_t *face ); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_face_data_destroy (struct hb_ot_shaper_face_data_t *data);
# 103 "../../../libs/harfbuzz-ng/src/hb-face-private.hh" 2
# 36 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 58 "../../../libs/harfbuzz-ng/src/hb-font-private.hh"
struct hb_font_funcs_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_60 (void) const { do { typedef __typeof__(*this) _type_60; union _type__type_60_on_line_60_is_not_POD { _type_60 instance; }; } while (0); };

  hb_bool_t immutable;



  struct {

    hb_font_get_glyph_func_t glyph; hb_font_get_glyph_h_advance_func_t glyph_h_advance; hb_font_get_glyph_v_advance_func_t glyph_v_advance; hb_font_get_glyph_h_origin_func_t glyph_h_origin; hb_font_get_glyph_v_origin_func_t glyph_v_origin; hb_font_get_glyph_h_kerning_func_t glyph_h_kerning; hb_font_get_glyph_v_kerning_func_t glyph_v_kerning; hb_font_get_glyph_extents_func_t glyph_extents; hb_font_get_glyph_contour_point_func_t glyph_contour_point; hb_font_get_glyph_name_func_t glyph_name; hb_font_get_glyph_from_name_func_t glyph_from_name;

  } get;

  struct {

    void *glyph; void *glyph_h_advance; void *glyph_v_advance; void *glyph_h_origin; void *glyph_v_origin; void *glyph_h_kerning; void *glyph_v_kerning; void *glyph_extents; void *glyph_contour_point; void *glyph_name; void *glyph_from_name;

  } user_data;

  struct {

    hb_destroy_func_t glyph; hb_destroy_func_t glyph_h_advance; hb_destroy_func_t glyph_v_advance; hb_destroy_func_t glyph_h_origin; hb_destroy_func_t glyph_v_origin; hb_destroy_func_t glyph_h_kerning; hb_destroy_func_t glyph_v_kerning; hb_destroy_func_t glyph_extents; hb_destroy_func_t glyph_contour_point; hb_destroy_func_t glyph_name; hb_destroy_func_t glyph_from_name;

  } destroy;
};







struct hb_font_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_93 (void) const { do { typedef __typeof__(*this) _type_93; union _type__type_93_on_line_93_is_not_POD { _type_93 instance; }; } while (0); };

  hb_bool_t immutable;

  hb_font_t *parent;
  hb_face_t *face;

  int x_scale;
  int y_scale;

  unsigned int x_ppem;
  unsigned int y_ppem;

  hb_font_funcs_t *klass;
  void *user_data;
  hb_destroy_func_t destroy;

  struct hb_shaper_data_t shaper_data;



  inline hb_position_t em_scale_x (int16_t v) { return em_scale (v, this->x_scale); }
  inline hb_position_t em_scale_y (int16_t v) { return em_scale (v, this->y_scale); }


  inline hb_position_t parent_scale_x_distance (hb_position_t v) {
    if ((parent && parent->x_scale != x_scale))
      return (hb_position_t) (v * (int64_t) this->x_scale / this->parent->x_scale);
    return v;
  }
  inline hb_position_t parent_scale_y_distance (hb_position_t v) {
    if ((parent && parent->y_scale != y_scale))
      return (hb_position_t) (v * (int64_t) this->y_scale / this->parent->y_scale);
    return v;
  }
  inline hb_position_t parent_scale_x_position (hb_position_t v) {
    return parent_scale_x_distance (v);
  }
  inline hb_position_t parent_scale_y_position (hb_position_t v) {
    return parent_scale_y_distance (v);
  }

  inline void parent_scale_distance (hb_position_t *x, hb_position_t *y) {
    *x = parent_scale_x_distance (*x);
    *y = parent_scale_y_distance (*y);
  }
  inline void parent_scale_position (hb_position_t *x, hb_position_t *y) {
    *x = parent_scale_x_position (*x);
    *y = parent_scale_y_position (*y);
  }




  inline hb_bool_t has_glyph (hb_codepoint_t unicode)
  {
    hb_codepoint_t glyph;
    return get_glyph (unicode, 0, &glyph);
  }

  inline hb_bool_t get_glyph (hb_codepoint_t unicode, hb_codepoint_t variation_selector,
         hb_codepoint_t *glyph)
  {
    *glyph = 0;
    return klass->get.glyph (this, user_data,
        unicode, variation_selector, glyph,
        klass->user_data.glyph);
  }

  inline hb_position_t get_glyph_h_advance (hb_codepoint_t glyph)
  {
    return klass->get.glyph_h_advance (this, user_data,
           glyph,
           klass->user_data.glyph_h_advance);
  }

  inline hb_position_t get_glyph_v_advance (hb_codepoint_t glyph)
  {
    return klass->get.glyph_v_advance (this, user_data,
           glyph,
           klass->user_data.glyph_v_advance);
  }

  inline hb_bool_t get_glyph_h_origin (hb_codepoint_t glyph,
           hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_h_origin (this, user_data,
          glyph, x, y,
          klass->user_data.glyph_h_origin);
  }

  inline hb_bool_t get_glyph_v_origin (hb_codepoint_t glyph,
           hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_v_origin (this, user_data,
          glyph, x, y,
          klass->user_data.glyph_v_origin);
  }

  inline hb_position_t get_glyph_h_kerning (hb_codepoint_t left_glyph, hb_codepoint_t right_glyph)
  {
    return klass->get.glyph_h_kerning (this, user_data,
           left_glyph, right_glyph,
           klass->user_data.glyph_h_kerning);
  }

  inline hb_position_t get_glyph_v_kerning (hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph)
  {
    return klass->get.glyph_v_kerning (this, user_data,
           top_glyph, bottom_glyph,
           klass->user_data.glyph_v_kerning);
  }

  inline hb_bool_t get_glyph_extents (hb_codepoint_t glyph,
          hb_glyph_extents_t *extents)
  {
    memset (extents, 0, sizeof (*extents));
    return klass->get.glyph_extents (this, user_data,
         glyph,
         extents,
         klass->user_data.glyph_extents);
  }

  inline hb_bool_t get_glyph_contour_point (hb_codepoint_t glyph, unsigned int point_index,
         hb_position_t *x, hb_position_t *y)
  {
    *x = *y = 0;
    return klass->get.glyph_contour_point (this, user_data,
        glyph, point_index,
        x, y,
        klass->user_data.glyph_contour_point);
  }

  inline hb_bool_t get_glyph_name (hb_codepoint_t glyph,
       char *name, unsigned int size)
  {
    if (size) *name = '\0';
    return klass->get.glyph_name (this, user_data,
      glyph,
      name, size,
      klass->user_data.glyph_name);
  }

  inline hb_bool_t get_glyph_from_name (const char *name, int len,
     hb_codepoint_t *glyph)
  {
    *glyph = 0;
    if (len == -1) len = strlen (name);
    return klass->get.glyph_from_name (this, user_data,
           name, len,
           glyph,
           klass->user_data.glyph_from_name);
  }




  inline void get_glyph_advance_for_direction (hb_codepoint_t glyph,
            hb_direction_t direction,
            hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4))) {
      *x = get_glyph_h_advance (glyph);
      *y = 0;
    } else {
      *x = 0;
      *y = get_glyph_v_advance (glyph);
    }
  }


  inline void guess_v_origin_minus_h_origin (hb_codepoint_t glyph,
          hb_position_t *x, hb_position_t *y)
  {
    *x = get_glyph_h_advance (glyph) / 2;


    *y = y_scale;
  }

  inline void get_glyph_origin_for_direction (hb_codepoint_t glyph,
           hb_direction_t direction,
           hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4)))
    {
      if (!get_glyph_h_origin (glyph, x, y) &&
    get_glyph_v_origin (glyph, x, y))
      {
 hb_position_t dx, dy;
 guess_v_origin_minus_h_origin (glyph, &dx, &dy);
 *x -= dx; *y -= dy;
      }
    }
    else
    {
      if (!get_glyph_v_origin (glyph, x, y) &&
    get_glyph_h_origin (glyph, x, y))
      {
 hb_position_t dx, dy;
 guess_v_origin_minus_h_origin (glyph, &dx, &dy);
 *x += dx; *y += dy;
      }
    }
  }

  inline void add_glyph_origin_for_direction (hb_codepoint_t glyph,
           hb_direction_t direction,
           hb_position_t *x, hb_position_t *y)
  {
    hb_position_t origin_x, origin_y;

    get_glyph_origin_for_direction (glyph, direction, &origin_x, &origin_y);

    *x += origin_x;
    *y += origin_y;
  }

  inline void subtract_glyph_origin_for_direction (hb_codepoint_t glyph,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y)
  {
    hb_position_t origin_x, origin_y;

    get_glyph_origin_for_direction (glyph, direction, &origin_x, &origin_y);

    *x -= origin_x;
    *y -= origin_y;
  }

  inline void get_glyph_kerning_for_direction (hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
            hb_direction_t direction,
            hb_position_t *x, hb_position_t *y)
  {
    if ((((((unsigned int) (direction)) & ~1U) == 4))) {
      *x = get_glyph_h_kerning (first_glyph, second_glyph);
      *y = 0;
    } else {
      *x = 0;
      *y = get_glyph_v_kerning (first_glyph, second_glyph);
    }
  }

  inline hb_bool_t get_glyph_extents_for_origin (hb_codepoint_t glyph,
       hb_direction_t direction,
       hb_glyph_extents_t *extents)
  {
    hb_bool_t ret = get_glyph_extents (glyph, extents);

    if (ret)
      subtract_glyph_origin_for_direction (glyph, direction, &extents->x_bearing, &extents->y_bearing);

    return ret;
  }

  inline hb_bool_t get_glyph_contour_point_for_origin (hb_codepoint_t glyph, unsigned int point_index,
             hb_direction_t direction,
             hb_position_t *x, hb_position_t *y)
  {
    hb_bool_t ret = get_glyph_contour_point (glyph, point_index, x, y);

    if (ret)
      subtract_glyph_origin_for_direction (glyph, direction, x, y);

    return ret;
  }


  inline void
  glyph_to_string (hb_codepoint_t glyph,
     char *s, unsigned int size)
  {
    if (get_glyph_name (glyph, s, size)) return;

    if (size && snprintf (s, size, "gid%u", glyph) < 0)
      *s = '\0';
  }


  inline hb_bool_t
  glyph_from_string (const char *s, int len,
       hb_codepoint_t *glyph)
  {
    if (get_glyph_from_name (s, len, glyph)) return true;

    if (len == -1) len = strlen (s);


    if (hb_codepoint_parse (s, len, 10, glyph))
      return true;

    if (len > 3)
    {

      if (0 == strncmp (s, "gid", 3) &&
   hb_codepoint_parse (s + 3, len - 3, 10, glyph))
 return true;


      hb_codepoint_t unichar;
      if (0 == strncmp (s, "uni", 3) &&
   hb_codepoint_parse (s + 3, len - 3, 16, &unichar) &&
   get_glyph (unichar, 0, glyph))
 return true;
    }

    return false;
  }

  private:
  inline hb_position_t em_scale (int16_t v, int scale) { return (hb_position_t) (v * (int64_t) scale / face->get_upem ()); }
};



# 1 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh" 1
# 43 "../../../libs/harfbuzz-ng/src/hb-shaper-list.hh"
struct hb_ot_shaper_font_data_t; extern "C" __attribute__((__visibility__("hidden"))) struct hb_ot_shaper_font_data_t * _hb_ot_shaper_font_data_create (hb_font_t *font ); extern "C" __attribute__((__visibility__("hidden"))) void _hb_ot_shaper_font_data_destroy (struct hb_ot_shaper_font_data_t *data);
# 411 "../../../libs/harfbuzz-ng/src/hb-font-private.hh" 2
# 35 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh" 1
# 38 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh"
extern __attribute__((__visibility__("hidden"))) const uint8_t _hb_modified_combining_class[256];
# 64 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh"
struct hb_unicode_funcs_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_66 (void) const { do { typedef __typeof__(*this) _type_66; union _type__type_66_on_line_66_is_not_POD { _type_66 instance; }; } while (0); };

  hb_unicode_funcs_t *parent;

  bool immutable;



inline hb_unicode_combining_class_t combining_class (hb_codepoint_t unicode) { return func.combining_class (this, unicode, user_data.combining_class); } inline unsigned int eastasian_width (hb_codepoint_t unicode) { return func.eastasian_width (this, unicode, user_data.eastasian_width); } inline hb_unicode_general_category_t general_category (hb_codepoint_t unicode) { return func.general_category (this, unicode, user_data.general_category); } inline hb_codepoint_t mirroring (hb_codepoint_t unicode) { return func.mirroring (this, unicode, user_data.mirroring); } inline hb_script_t script (hb_codepoint_t unicode) { return func.script (this, unicode, user_data.script); }


  inline hb_bool_t compose (hb_codepoint_t a, hb_codepoint_t b,
       hb_codepoint_t *ab)
  {
    *ab = 0;
    if ((!a || !b)) return false;
    return func.compose (this, a, b, ab, user_data.compose);
  }

  inline hb_bool_t decompose (hb_codepoint_t ab,
         hb_codepoint_t *a, hb_codepoint_t *b)
  {
    *a = ab; *b = 0;
    return func.decompose (this, ab, a, b, user_data.decompose);
  }

  inline unsigned int decompose_compatibility (hb_codepoint_t u,
            hb_codepoint_t *decomposed)
  {
    unsigned int ret = func.decompose_compatibility (this, u, decomposed, user_data.decompose_compatibility);
    if (ret == 1 && u == decomposed[0]) {
      decomposed[0] = 0;
      return 0;
    }
    decomposed[ret] = 0;
    return ret;
  }


  inline unsigned int
  modified_combining_class (hb_codepoint_t unicode)
  {

    if ((unicode == 0x1037u)) unicode = 0x103Au;



    if ((unicode == 0x1A60u)) return 254;



    if ((unicode == 0x0FC6u)) return 254;

    return _hb_modified_combining_class[combining_class (unicode)];
  }

  static inline hb_bool_t
  is_variation_selector (hb_codepoint_t unicode)
  {


    return (hb_in_ranges (unicode, 0xFE00u, 0xFE0Fu, 0xE0100u, 0xE01EFu))

                           ;
  }
# 168 "../../../libs/harfbuzz-ng/src/hb-unicode-private.hh"
  static inline hb_bool_t
  is_default_ignorable (hb_codepoint_t ch)
  {
    hb_codepoint_t plane = ch >> 16;
    if ((plane == 0))
    {

      hb_codepoint_t page = ch >> 8;
      switch (page) {
 case 0x00: return (ch == 0x00ADu);
 case 0x03: return (ch == 0x034Fu);
 case 0x06: return (ch == 0x061Cu);
 case 0x17: return hb_in_range (ch, 0x17B4u, 0x17B5u);
 case 0x18: return hb_in_range (ch, 0x180Bu, 0x180Eu);
 case 0x20: return hb_in_ranges (ch, 0x200Bu, 0x200Fu,
           0x202Au, 0x202Eu,
           0x2060u, 0x206Fu);
 case 0xFE: return hb_in_range (ch, 0xFE00u, 0xFE0Fu) || ch == 0xFEFFu;
 case 0xFF: return hb_in_range (ch, 0xFFF0u, 0xFFF8u);
 default: return false;
      }
    }
    else
    {

      switch (plane) {
 case 0x01: return hb_in_ranges (ch, 0x1BCA0u, 0x1BCA3u,
         0x1D173u, 0x1D17Au);
 case 0x0E: return hb_in_range (ch, 0xE0000u, 0xE0FFFu);
 default: return false;
      }
    }
  }


  struct {

    hb_unicode_combining_class_func_t combining_class; hb_unicode_eastasian_width_func_t eastasian_width; hb_unicode_general_category_func_t general_category; hb_unicode_mirroring_func_t mirroring; hb_unicode_script_func_t script; hb_unicode_compose_func_t compose; hb_unicode_decompose_func_t decompose; hb_unicode_decompose_compatibility_func_t decompose_compatibility;

  } func;

  struct {

    void *combining_class; void *eastasian_width; void *general_category; void *mirroring; void *script; void *compose; void *decompose; void *decompose_compatibility;

  } user_data;

  struct {

    hb_destroy_func_t combining_class; hb_destroy_func_t eastasian_width; hb_destroy_func_t general_category; hb_destroy_func_t mirroring; hb_destroy_func_t script; hb_destroy_func_t compose; hb_destroy_func_t decompose; hb_destroy_func_t decompose_compatibility;

  } destroy;
};


extern __attribute__((__visibility__("hidden"))) const hb_unicode_funcs_t _hb_unicode_funcs_nil;
# 36 "../../../libs/harfbuzz-ng/src/hb-buffer-private.hh" 2


__attribute__((unused)) typedef int _static_assert_on_line_38_failed[(((sizeof (hb_glyph_info_t) == 20)))?1:-1];
__attribute__((unused)) typedef int _static_assert_on_line_39_failed[(((sizeof (hb_glyph_info_t) == sizeof (hb_glyph_position_t))))?1:-1];






struct hb_buffer_t {
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_48 (void) const { do { typedef __typeof__(*this) _type_48; union _type__type_48_on_line_48_is_not_POD { _type_48 instance; }; } while (0); };


  hb_unicode_funcs_t *unicode;
  hb_buffer_flags_t flags;
  hb_codepoint_t replacement;


  hb_buffer_content_type_t content_type;
  hb_segment_properties_t props;

  bool in_error;
  bool have_output;
  bool have_positions;

  unsigned int idx;
  unsigned int len;
  unsigned int out_len;

  unsigned int allocated;
  hb_glyph_info_t *info;
  hb_glyph_info_t *out_info;
  hb_glyph_position_t *pos;

  inline hb_glyph_info_t &cur (unsigned int i = 0) { return info[idx + i]; }
  inline hb_glyph_info_t cur (unsigned int i = 0) const { return info[idx + i]; }

  inline hb_glyph_position_t &cur_pos (unsigned int i = 0) { return pos[idx + i]; }
  inline hb_glyph_position_t cur_pos (unsigned int i = 0) const { return pos[idx + i]; }

  inline hb_glyph_info_t &prev (void) { return out_info[out_len - 1]; }
  inline hb_glyph_info_t prev (void) const { return info[out_len - 1]; }

  inline bool has_separate_output (void) const { return info != out_info; }

  unsigned int serial;


  uint8_t allocated_var_bytes[8];
  const char *allocated_var_owner[8];




  static const unsigned int CONTEXT_LENGTH = 5;
  hb_codepoint_t context[2][CONTEXT_LENGTH];
  unsigned int context_len[2];




  __attribute__((__visibility__("hidden"))) void reset (void);
  __attribute__((__visibility__("hidden"))) void clear (void);

  inline unsigned int backtrack_len (void) const
  { return have_output? out_len : idx; }
  inline unsigned int lookahead_len (void) const
  { return len - idx; }
  inline unsigned int next_serial (void) { return serial++; }

  __attribute__((__visibility__("hidden"))) void allocate_var (unsigned int byte_i, unsigned int count, const char *owner);
  __attribute__((__visibility__("hidden"))) void deallocate_var (unsigned int byte_i, unsigned int count, const char *owner);
  __attribute__((__visibility__("hidden"))) void assert_var (unsigned int byte_i, unsigned int count, const char *owner);
  __attribute__((__visibility__("hidden"))) void deallocate_var_all (void);

  __attribute__((__visibility__("hidden"))) void add (hb_codepoint_t codepoint,
   unsigned int cluster);
  __attribute__((__visibility__("hidden"))) void add_info (const hb_glyph_info_t &glyph_info);

  __attribute__((__visibility__("hidden"))) void reverse_range (unsigned int start, unsigned int end);
  __attribute__((__visibility__("hidden"))) void reverse (void);
  __attribute__((__visibility__("hidden"))) void reverse_clusters (void);
  __attribute__((__visibility__("hidden"))) void guess_segment_properties (void);

  __attribute__((__visibility__("hidden"))) void swap_buffers (void);
  __attribute__((__visibility__("hidden"))) void remove_output (void);
  __attribute__((__visibility__("hidden"))) void clear_output (void);
  __attribute__((__visibility__("hidden"))) void clear_positions (void);

  __attribute__((__visibility__("hidden"))) void replace_glyphs (unsigned int num_in,
       unsigned int num_out,
       const hb_codepoint_t *glyph_data);

  __attribute__((__visibility__("hidden"))) void replace_glyph (hb_codepoint_t glyph_index);

  __attribute__((__visibility__("hidden"))) void output_glyph (hb_codepoint_t glyph_index);
  __attribute__((__visibility__("hidden"))) void output_info (const hb_glyph_info_t &glyph_info);

  __attribute__((__visibility__("hidden"))) void copy_glyph (void);
  __attribute__((__visibility__("hidden"))) bool move_to (unsigned int i);


  inline void
  next_glyph (void)
  {
    if (have_output)
    {
      if ((out_info != info || out_len != idx)) {
 if ((!make_room_for (1, 1))) return;
 out_info[out_len] = info[idx];
      }
      out_len++;
    }

    idx++;
  }


  inline void skip_glyph (void) { idx++; }

  inline void reset_masks (hb_mask_t mask)
  {
    for (unsigned int j = 0; j < len; j++)
      info[j].mask = mask;
  }
  inline void add_masks (hb_mask_t mask)
  {
    for (unsigned int j = 0; j < len; j++)
      info[j].mask |= mask;
  }
  __attribute__((__visibility__("hidden"))) void set_masks (hb_mask_t value,
         hb_mask_t mask,
         unsigned int cluster_start,
         unsigned int cluster_end);

  __attribute__((__visibility__("hidden"))) void merge_clusters (unsigned int start,
       unsigned int end);
  __attribute__((__visibility__("hidden"))) void merge_out_clusters (unsigned int start,
           unsigned int end);


  __attribute__((__visibility__("hidden"))) bool enlarge (unsigned int size);

  inline bool ensure (unsigned int size)
  { return (!size || size < allocated) ? true : enlarge (size); }

  inline bool ensure_inplace (unsigned int size)
  { return (!size || size < allocated); }

  __attribute__((__visibility__("hidden"))) bool make_room_for (unsigned int num_in, unsigned int num_out);
  __attribute__((__visibility__("hidden"))) bool shift_forward (unsigned int count);

  typedef long scratch_buffer_t;
  __attribute__((__visibility__("hidden"))) scratch_buffer_t *get_scratch_buffer (unsigned int *size);

  inline void clear_context (unsigned int side) { context_len[side] = 0; }
};
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-set-private.hh" 1
# 42 "../../../libs/harfbuzz-ng/src/hb-set-private.hh"
template <typename mask_t, unsigned int shift>
struct hb_set_digest_lowest_bits_t
{
  __attribute__((unused)) inline void _static_assertion_on_line_45 (void) const { do { typedef __typeof__(*this) _type_45; union _type__type_45_on_line_45_is_not_POD { _type_45 instance; }; } while (0); };

  static const unsigned int mask_bytes = sizeof (mask_t);
  static const unsigned int mask_bits = sizeof (mask_t) * 8;
  static const unsigned int num_bits = 0
         + (mask_bytes >= 1 ? 3 : 0)
         + (mask_bytes >= 2 ? 1 : 0)
         + (mask_bytes >= 4 ? 1 : 0)
         + (mask_bytes >= 8 ? 1 : 0)
         + (mask_bytes >= 16? 1 : 0)
         + 0;

  __attribute__((unused)) typedef int _static_assert_on_line_57_failed[(((shift < sizeof (hb_codepoint_t) * 8)))?1:-1];
  __attribute__((unused)) typedef int _static_assert_on_line_58_failed[(((shift + num_bits <= sizeof (hb_codepoint_t) * 8)))?1:-1];

  inline void init (void) {
    mask = 0;
  }

  inline void add (hb_codepoint_t g) {
    mask |= mask_for (g);
  }

  inline void add_range (hb_codepoint_t a, hb_codepoint_t b) {
    if ((b >> shift) - (a >> shift) >= mask_bits - 1)
      mask = (mask_t) -1;
    else {
      mask_t ma = mask_for (a);
      mask_t mb = mask_for (b);
      mask |= mb + (mb - ma) - (mb < ma);
    }
  }

  inline bool may_have (hb_codepoint_t g) const {
    return !!(mask & mask_for (g));
  }

  private:

  static inline mask_t mask_for (hb_codepoint_t g) {
    return ((mask_t) 1) << ((g >> shift) & (mask_bits - 1));
  }
  mask_t mask;
};

template <typename head_t, typename tail_t>
struct hb_set_digest_combiner_t
{
  __attribute__((unused)) inline void _static_assertion_on_line_93 (void) const { do { typedef __typeof__(*this) _type_93; union _type__type_93_on_line_93_is_not_POD { _type_93 instance; }; } while (0); };

  inline void init (void) {
    head.init ();
    tail.init ();
  }

  inline void add (hb_codepoint_t g) {
    head.add (g);
    tail.add (g);
  }

  inline void add_range (hb_codepoint_t a, hb_codepoint_t b) {
    head.add_range (a, b);
    tail.add_range (a, b);
  }

  inline bool may_have (hb_codepoint_t g) const {
    return head.may_have (g) && tail.may_have (g);
  }

  private:
  head_t head;
  tail_t tail;
};
# 127 "../../../libs/harfbuzz-ng/src/hb-set-private.hh"
typedef hb_set_digest_combiner_t
<
  hb_set_digest_lowest_bits_t<unsigned long, 4>,
  hb_set_digest_combiner_t
  <
    hb_set_digest_lowest_bits_t<unsigned long, 0>,
    hb_set_digest_lowest_bits_t<unsigned long, 9>
  >
> hb_set_digest_t;
# 146 "../../../libs/harfbuzz-ng/src/hb-set-private.hh"
struct hb_set_t
{
  hb_object_header_t header;
  __attribute__((unused)) inline void _static_assertion_on_line_149 (void) const { do { typedef __typeof__(*this) _type_149; union _type__type_149_on_line_149_is_not_POD { _type_149 instance; }; } while (0); };
  bool in_error;

  inline void init (void) {
    hb_object_init (this);
    clear ();
  }
  inline void fini (void) {
  }
  inline void clear (void) {
    if ((hb_object_is_inert (this)))
      return;
    in_error = false;
    memset (elts, 0, sizeof elts);
  }
  inline bool is_empty (void) const {
    for (unsigned int i = 0; i < ARRAY_LENGTH (elts); i++)
      if (elts[i])
        return false;
    return true;
  }
  inline void add (hb_codepoint_t g)
  {
    if ((in_error)) return;
    if ((g == INVALID)) return;
    if ((g > MAX_G)) return;
    elt (g) |= mask (g);
  }
  inline void add_range (hb_codepoint_t a, hb_codepoint_t b)
  {
    if ((in_error)) return;

    for (unsigned int i = a; i < b + 1; i++)
      add (i);
  }
  inline void del (hb_codepoint_t g)
  {
    if ((in_error)) return;
    if ((g > MAX_G)) return;
    elt (g) &= ~mask (g);
  }
  inline void del_range (hb_codepoint_t a, hb_codepoint_t b)
  {
    if ((in_error)) return;

    for (unsigned int i = a; i < b + 1; i++)
      del (i);
  }
  inline bool has (hb_codepoint_t g) const
  {
    if ((g > MAX_G)) return false;
    return !!(elt (g) & mask (g));
  }
  inline bool intersects (hb_codepoint_t first,
     hb_codepoint_t last) const
  {
    if ((first > MAX_G)) return false;
    if ((last > MAX_G)) last = MAX_G;
    unsigned int end = last + 1;
    for (hb_codepoint_t i = first; i < end; i++)
      if (has (i))
        return true;
    return false;
  }
  inline bool is_equal (const hb_set_t *other) const
  {
    for (unsigned int i = 0; i < ELTS; i++)
      if (elts[i] != other->elts[i])
        return false;
    return true;
  }
  inline void set (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] = other->elts[i];
  }
  inline void union_ (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] |= other->elts[i];
  }
  inline void intersect (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] &= other->elts[i];
  }
  inline void subtract (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] &= ~other->elts[i];
  }
  inline void symmetric_difference (const hb_set_t *other)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] ^= other->elts[i];
  }
  inline void invert (void)
  {
    if ((in_error)) return;
    for (unsigned int i = 0; i < ELTS; i++)
      elts[i] = ~elts[i];
  }
  inline bool next (hb_codepoint_t *codepoint) const
  {
    if ((*codepoint == INVALID)) {
      hb_codepoint_t i = get_min ();
      if (i != INVALID) {
        *codepoint = i;
 return true;
      } else {
 *codepoint = INVALID;
        return false;
      }
    }
    for (hb_codepoint_t i = *codepoint + 1; i < MAX_G + 1; i++)
      if (has (i)) {
        *codepoint = i;
 return true;
      }
    *codepoint = INVALID;
    return false;
  }
  inline bool next_range (hb_codepoint_t *first, hb_codepoint_t *last) const
  {
    hb_codepoint_t i;

    i = *last;
    if (!next (&i))
    {
      *last = *first = INVALID;
      return false;
    }

    *last = *first = i;
    while (next (&i) && i == *last + 1)
      (*last)++;

    return true;
  }

  inline unsigned int get_population (void) const
  {
    unsigned int count = 0;
    for (unsigned int i = 0; i < ELTS; i++)
      count += _hb_popcount32 (elts[i]);
    return count;
  }
  inline hb_codepoint_t get_min (void) const
  {
    for (unsigned int i = 0; i < ELTS; i++)
      if (elts[i])
 for (unsigned int j = 0; j < BITS; j++)
   if (elts[i] & (1 << j))
     return i * BITS + j;
    return INVALID;
  }
  inline hb_codepoint_t get_max (void) const
  {
    for (unsigned int i = ELTS; i; i--)
      if (elts[i - 1])
 for (unsigned int j = BITS; j; j--)
   if (elts[i - 1] & (1 << (j - 1)))
     return (i - 1) * BITS + (j - 1);
    return INVALID;
  }

  typedef uint32_t elt_t;
  static const unsigned int MAX_G = 65536 - 1;
  static const unsigned int SHIFT = 5;
  static const unsigned int BITS = (1 << SHIFT);
  static const unsigned int MASK = BITS - 1;
  static const unsigned int ELTS = (MAX_G + 1 + (BITS - 1)) / BITS;
  static const hb_codepoint_t INVALID = ((hb_codepoint_t) -1);

  elt_t &elt (hb_codepoint_t g) { return elts[g >> SHIFT]; }
  elt_t elt (hb_codepoint_t g) const { return elts[g >> SHIFT]; }
  elt_t mask (hb_codepoint_t g) const { return elt_t (1) << (g & MASK); }

  elt_t elts[ELTS];

  __attribute__((unused)) typedef int _static_assert_on_line_334_failed[(((sizeof (elt_t) * 8 == BITS)))?1:-1];
  __attribute__((unused)) typedef int _static_assert_on_line_335_failed[(((sizeof (elt_t) * 8 * ELTS > MAX_G)))?1:-1];
};
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh" 2






typedef enum
{

  HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH = 0x02u,
  HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE = 0x04u,
  HB_OT_LAYOUT_GLYPH_PROPS_MARK = 0x08u,


  HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED = 0x10u,
  HB_OT_LAYOUT_GLYPH_PROPS_LIGATED = 0x20u,
  HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED = 0x40u,

  HB_OT_LAYOUT_GLYPH_PROPS_PRESERVE = HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED |
       HB_OT_LAYOUT_GLYPH_PROPS_LIGATED |
       HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED
} hb_ot_layout_glyph_class_mask_t;






__attribute__((__visibility__("hidden"))) hb_bool_t
hb_ot_layout_lookup_would_substitute_fast (hb_face_t *face,
        unsigned int lookup_index,
        const hb_codepoint_t *glyphs,
        unsigned int glyphs_length,
        hb_bool_t zero_context);



__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_start (hb_font_t *font,
          hb_buffer_t *buffer);


struct hb_ot_layout_lookup_accelerator_t;

namespace OT {
  struct hb_apply_context_t;
  struct SubstLookup;
}

__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_lookup (OT::hb_apply_context_t *c,
    const OT::SubstLookup &lookup,
    const hb_ot_layout_lookup_accelerator_t &accel);



__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_finish (hb_font_t *font,
    hb_buffer_t *buffer);



__attribute__((__visibility__("hidden"))) void
hb_ot_layout_position_start (hb_font_t *font,
        hb_buffer_t *buffer);


__attribute__((__visibility__("hidden"))) void
hb_ot_layout_position_finish (hb_font_t *font,
         hb_buffer_t *buffer);







namespace OT {
  struct GDEF;
  struct GSUB;
  struct GPOS;
}

struct hb_ot_layout_lookup_accelerator_t
{
  template <typename TLookup>
  inline void init (const TLookup &lookup)
  {
    digest.init ();
    lookup.add_coverage (&digest);
  }

  inline void fini (void)
  {
  }

  hb_set_digest_t digest;
};

struct hb_ot_layout_t
{
  hb_blob_t *gdef_blob;
  hb_blob_t *gsub_blob;
  hb_blob_t *gpos_blob;

  const struct OT::GDEF *gdef;
  const struct OT::GSUB *gsub;
  const struct OT::GPOS *gpos;

  unsigned int gsub_lookup_count;
  unsigned int gpos_lookup_count;

  hb_ot_layout_lookup_accelerator_t *gsub_accels;
  hb_ot_layout_lookup_accelerator_t *gpos_accels;
};


__attribute__((__visibility__("hidden"))) hb_ot_layout_t *
_hb_ot_layout_create (hb_face_t *face);

__attribute__((__visibility__("hidden"))) void
_hb_ot_layout_destroy (hb_ot_layout_t *layout);
# 179 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh"
enum {
  MASK0_ZWJ = 0x20u,
  MASK0_ZWNJ = 0x40u,
  MASK0_IGNORABLE = 0x80u,
  MASK0_GEN_CAT = 0x1Fu
};

static inline void
_hb_glyph_info_set_unicode_props (hb_glyph_info_t *info, hb_unicode_funcs_t *unicode)
{

  info->var2.u8[0] = ((unsigned int) unicode->general_category (info->codepoint)) |
      (unicode->is_default_ignorable (info->codepoint) ? MASK0_IGNORABLE : 0) |
      (info->codepoint == 0x200Cu ? MASK0_ZWNJ : 0) |
      (info->codepoint == 0x200Du ? MASK0_ZWJ : 0);
  info->var2.u8[1] = unicode->modified_combining_class (info->codepoint);
}

static inline void
_hb_glyph_info_set_general_category (hb_glyph_info_t *info,
         hb_unicode_general_category_t gen_cat)
{
  info->var2.u8[0] = (unsigned int) gen_cat | ((info->var2.u8[0]) & ~MASK0_GEN_CAT);
}

static inline hb_unicode_general_category_t
_hb_glyph_info_get_general_category (const hb_glyph_info_t *info)
{
  return (hb_unicode_general_category_t) (info->var2.u8[0] & MASK0_GEN_CAT);
}

static inline void
_hb_glyph_info_set_modified_combining_class (hb_glyph_info_t *info,
          unsigned int modified_class)
{
  info->var2.u8[1] = modified_class;
}

static inline unsigned int
_hb_glyph_info_get_modified_combining_class (const hb_glyph_info_t *info)
{
  return info->var2.u8[1];
}

static inline hb_bool_t
_hb_glyph_info_is_default_ignorable (const hb_glyph_info_t *info)
{
  return !!(info->var2.u8[0] & MASK0_IGNORABLE);
}

static inline hb_bool_t
_hb_glyph_info_is_zwnj (const hb_glyph_info_t *info)
{
  return !!(info->var2.u8[0] & MASK0_ZWNJ);
}

static inline hb_bool_t
_hb_glyph_info_is_zwj (const hb_glyph_info_t *info)
{
  return !!(info->var2.u8[0] & MASK0_ZWJ);
}

static inline void
_hb_glyph_info_flip_joiners (hb_glyph_info_t *info)
{
  info->var2.u8[0] ^= MASK0_ZWNJ | MASK0_ZWJ;
}
# 272 "../../../libs/harfbuzz-ng/src/hb-ot-layout-private.hh"
static inline void
_hb_glyph_info_clear_lig_props (hb_glyph_info_t *info)
{
  info->var1.u8[2] = 0;
}



static inline void
_hb_glyph_info_set_lig_props_for_ligature (hb_glyph_info_t *info,
        unsigned int lig_id,
        unsigned int lig_num_comps)
{
  info->var1.u8[2] = (lig_id << 5) | 0x10 | (lig_num_comps & 0x0F);
}

static inline void
_hb_glyph_info_set_lig_props_for_mark (hb_glyph_info_t *info,
           unsigned int lig_id,
           unsigned int lig_comp)
{
  info->var1.u8[2] = (lig_id << 5) | (lig_comp & 0x0F);
}

static inline void
_hb_glyph_info_set_lig_props_for_component (hb_glyph_info_t *info, unsigned int comp)
{
  _hb_glyph_info_set_lig_props_for_mark (info, 0, comp);
}

static inline unsigned int
_hb_glyph_info_get_lig_id (const hb_glyph_info_t *info)
{
  return info->var1.u8[2] >> 5;
}

static inline bool
_hb_glyph_info_ligated_internal (const hb_glyph_info_t *info)
{
  return !!(info->var1.u8[2] & 0x10);
}

static inline unsigned int
_hb_glyph_info_get_lig_comp (const hb_glyph_info_t *info)
{
  if (_hb_glyph_info_ligated_internal (info))
    return 0;
  else
    return info->var1.u8[2] & 0x0F;
}

static inline unsigned int
_hb_glyph_info_get_lig_num_comps (const hb_glyph_info_t *info)
{
  if ((info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE) &&
      _hb_glyph_info_ligated_internal (info))
    return info->var1.u8[2] & 0x0F;
  else
    return 1;
}

static inline uint8_t
_hb_allocate_lig_id (hb_buffer_t *buffer) {
  uint8_t lig_id = buffer->next_serial () & 0x07;
  if ((!lig_id))
    lig_id = _hb_allocate_lig_id (buffer);
  return lig_id;
}



static inline void
_hb_glyph_info_set_glyph_props (hb_glyph_info_t *info, unsigned int props)
{
  info->var1.u16[0] = props;
}

static inline unsigned int
_hb_glyph_info_get_glyph_props (const hb_glyph_info_t *info)
{
  return info->var1.u16[0];
}

static inline bool
_hb_glyph_info_is_base_glyph (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH);
}

static inline bool
_hb_glyph_info_is_ligature (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE);
}

static inline bool
_hb_glyph_info_is_mark (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_MARK);
}

static inline bool
_hb_glyph_info_substituted (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED);
}

static inline bool
_hb_glyph_info_ligated (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_LIGATED);
}

static inline bool
_hb_glyph_info_multiplied (const hb_glyph_info_t *info)
{
  return !!(info->var1.u16[0] & HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED);
}

static inline bool
_hb_glyph_info_ligated_and_didnt_multiply (const hb_glyph_info_t *info)
{
  return _hb_glyph_info_ligated (info) && !_hb_glyph_info_multiplied (info);
}

static inline void
_hb_glyph_info_clear_ligated_and_multiplied (hb_glyph_info_t *info)
{
  info->var1.u16[0] &= ~(HB_OT_LAYOUT_GLYPH_PROPS_LIGATED |
      HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED);
}




static inline void
_hb_buffer_allocate_unicode_vars (hb_buffer_t *buffer)
{
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[0]), "unicode_props0");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[1]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[1]), "unicode_props1");
}

static inline void
_hb_buffer_deallocate_unicode_vars (hb_buffer_t *buffer)
{
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[0]), "unicode_props0");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[1]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[1]), "unicode_props1");
}

static inline void
_hb_buffer_assert_unicode_vars (hb_buffer_t *buffer)
{
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[0]), "unicode_props0");
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var2.u8[1]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var2.u8[1]), "unicode_props1");
}

static inline void
_hb_buffer_allocate_gsubgpos_vars (hb_buffer_t *buffer)
{
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u16[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u16[0]), "glyph_props");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[2]), "lig_props");
  buffer->allocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[3]), "syllable");
}

static inline void
_hb_buffer_deallocate_gsubgpos_vars (hb_buffer_t *buffer)
{
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[3]), "syllable");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[2]), "lig_props");
  buffer->deallocate_var (__builtin_offsetof (hb_glyph_info_t, var1.u16[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u16[0]), "glyph_props");
}

static inline void
_hb_buffer_assert_gsubgpos_vars (hb_buffer_t *buffer)
{
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var1.u16[0]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u16[0]), "glyph_props");
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[2]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[2]), "lig_props");
  buffer->assert_var (__builtin_offsetof (hb_glyph_info_t, var1.u8[3]) - __builtin_offsetof (hb_glyph_info_t, var1), sizeof (buffer->info[0].var1.u8[3]), "syllable");
}
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc" 2

# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gdef-table.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gdef-table.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh" 1
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
namespace OT {
# 44 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
template<typename Type, typename TObject>
static inline const Type& CastR(const TObject &X)
{ return reinterpret_cast<const Type&> (X); }
template<typename Type, typename TObject>
static inline Type& CastR(TObject &X)
{ return reinterpret_cast<Type&> (X); }


template<typename Type, typename TObject>
static inline const Type* CastP(const TObject *X)
{ return reinterpret_cast<const Type*> (X); }
template<typename Type, typename TObject>
static inline Type* CastP(TObject *X)
{ return reinterpret_cast<Type*> (X); }



template<typename Type>
static inline const Type& StructAtOffset(const void *P, unsigned int offset)
{ return * reinterpret_cast<const Type*> ((const char *) P + offset); }
template<typename Type>
static inline Type& StructAtOffset(void *P, unsigned int offset)
{ return * reinterpret_cast<Type*> ((char *) P + offset); }



template<typename Type, typename TObject>
static inline const Type& StructAfter(const TObject &X)
{ return StructAtOffset<Type>(&X, X.get_size()); }
template<typename Type, typename TObject>
static inline Type& StructAfter(TObject &X)
{ return StructAtOffset<Type>(&X, X.get_size()); }
# 135 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
static const void *_NullPool[(256+8) / sizeof (void *)];


template <typename Type>
static inline const Type& Null (void) {
  __attribute__((unused)) typedef int _static_assert_on_line_140_failed[(((sizeof (Type) <= sizeof (_NullPool))))?1:-1];
  return *CastP<Type> (_NullPool);
}
# 177 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
struct hb_sanitize_context_t
{
  inline const char *get_name (void) { return "SANITIZE"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef bool return_t;
  template <typename T>
  inline return_t dispatch (const T &obj) { return obj.sanitize (this); }
  static return_t default_return_value (void) { return true; }
  bool stop_sublookup_iteration (const return_t r __attribute__((unused))) const { return false; }

  inline void init (hb_blob_t *b)
  {
    this->blob = hb_blob_reference (b);
    this->writable = false;
  }

  inline void start_processing (void)
  {
    this->start = hb_blob_get_data (this->blob, __null);
    this->end = this->start + hb_blob_get_length (this->blob);
    ((this->start <= this->end) ? static_cast<void> (0) : __assert_fail ("this->start <= this->end", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 197, __PRETTY_FUNCTION__));
    this->edit_count = 0;
    this->debug_depth = 0;

    _hb_debug_msg<(0 +0)> ("SANITIZE", (start), __null, true, (0), (+1), "start [%p..%p] (%lu bytes)", this->start, this->end, (unsigned long) (this->end - this->start))


                                                 ;
  }

  inline void end_processing (void)
  {
    _hb_debug_msg<(0 +0)> ("SANITIZE", (this->start), __null, true, (0), (-1), "end [%p..%p] %u edit requests", this->start, this->end, this->edit_count)

                                                ;

    hb_blob_destroy (this->blob);
    this->blob = __null;
    this->start = this->end = __null;
  }

  inline bool check_range (const void *base, unsigned int len) const
  {
    const char *p = (const char *) base;
    bool ok = this->start <= p && p <= this->end && (unsigned int) (this->end - p) >= len;

    _hb_debug_msg<(0 +0)> ("SANITIZE", (p), __null, true, (this->debug_depth+1), (0), "check_range [%p..%p] (%d bytes) in [%p..%p] -> %s", p, p + len, len, this->start, this->end, ok ? "OK" : "OUT-OF-RANGE")



                                  ;

    return (ok);
  }

  inline bool check_array (const void *base, unsigned int record_size, unsigned int len) const
  {
    const char *p = (const char *) base;
    bool overflows = _hb_unsigned_int_mul_overflows (len, record_size);
    unsigned int array_size = record_size * len;
    bool ok = !overflows && this->check_range (base, array_size);

    _hb_debug_msg<(0 +0)> ("SANITIZE", (p), __null, true, (this->debug_depth+1), (0), "check_array [%p..%p] (%d*%d=%d bytes) in [%p..%p] -> %s", p, p + (record_size * len), record_size, len, (unsigned int) array_size, this->start, this->end, overflows ? "OVERFLOWS" : ok ? "OK" : "OUT-OF-RANGE")



                                                            ;

    return (ok);
  }

  template <typename Type>
  inline bool check_struct (const Type *obj) const
  {
    return (this->check_range (obj, obj->min_size));
  }

  inline bool may_edit (const void *base __attribute__((unused)), unsigned int len __attribute__((unused)))
  {
    if (this->edit_count >= 100)
      return false;

    const char *p = (const char *) base;
    this->edit_count++;

    _hb_debug_msg<(0 +0)> ("SANITIZE", (p), __null, true, (this->debug_depth+1), (0), "may_edit(%u) [%p..%p] (%d bytes) in [%p..%p] -> %s", this->edit_count, p, p + len, len, this->start, this->end, this->writable ? "GRANTED" : "DENIED")




                                             ;

    return this->writable;
  }

  template <typename Type, typename ValueType>
  inline bool try_set (Type *obj, const ValueType &v) {
    if (this->may_edit (obj, obj->static_size)) {
      obj->set (v);
      return true;
    }
    return false;
  }

  mutable unsigned int debug_depth;
  const char *start, *end;
  bool writable;
  unsigned int edit_count;
  hb_blob_t *blob;
};




template <typename Type>
struct Sanitizer
{
  static hb_blob_t *sanitize (hb_blob_t *blob) {
    hb_sanitize_context_t c[1] = {{0, __null, __null, false, 0, __null}};
    bool sane;



    c->init (blob);

  retry:
    _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "start");

    c->start_processing ();

    if ((!c->start)) {
      c->end_processing ();
      return blob;
    }

    Type *t = CastP<Type> (const_cast<char *> (c->start));

    sane = t->sanitize (c);
    if (sane) {
      if (c->edit_count) {
 _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "passed first round with %d edits; going for second round", c->edit_count);


        c->edit_count = 0;
 sane = t->sanitize (c);
 if (c->edit_count) {
   _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "requested %d edits in second round; FAILLING", c->edit_count);
   sane = false;
 }
      }
    } else {
      unsigned int edit_count = c->edit_count;
      if (edit_count && !c->writable) {
        c->start = hb_blob_get_data_writable (blob, __null);
 c->end = c->start + hb_blob_get_length (blob);

 if (c->start) {
   c->writable = true;

   _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, "retry");
   goto retry;
 }
      }
    }

    c->end_processing ();

    _hb_debug_msg<(0 +0)> ("SANITIZE", (c->start), __PRETTY_FUNCTION__, false, 0, 0, sane ? "PASSED" : "FAILED");
    if (sane)
      return blob;
    else {
      hb_blob_destroy (blob);
      return hb_blob_get_empty ();
    }
  }

  static const Type* lock_instance (hb_blob_t *blob) {
    hb_blob_make_immutable (blob);
    const char *base = hb_blob_get_data (blob, __null);
    return (!base) ? &Null<Type>() : CastP<Type> (base);
  }
};
# 377 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
struct hb_serialize_context_t
{
  inline hb_serialize_context_t (void *start, unsigned int size)
  {
    this->start = (char *) start;
    this->end = this->start + size;

    this->ran_out_of_room = false;
    this->head = this->start;
    this->debug_depth = 0;
  }

  template <typename Type>
  inline Type *start_serialize (void)
  {
    _hb_debug_msg<(0 +0)> ("SERIALIZE", (this->start), __null, true, (0), (+1), "start [%p..%p] (%lu bytes)", this->start, this->end, (unsigned long) (this->end - this->start))


                                                 ;

    return start_embed<Type> ();
  }

  inline void end_serialize (void)
  {
    _hb_debug_msg<(0 +0)> ("SERIALIZE", (this->start), __null, true, (0), (-1), "end [%p..%p] serialized %d bytes; %s", this->start, this->end, (int) (this->head - this->start), this->ran_out_of_room ? "RAN OUT OF ROOM" : "did not ran out of room")



                                                                             ;

  }

  template <typename Type>
  inline Type *copy (void)
  {
    ((!this->ran_out_of_room) ? static_cast<void> (0) : __assert_fail ("!this->ran_out_of_room", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 413, __PRETTY_FUNCTION__));
    unsigned int len = this->head - this->start;
    void *p = malloc (len);
    if (p)
      memcpy (p, this->start, len);
    return reinterpret_cast<Type *> (p);
  }

  template <typename Type>
  inline Type *allocate_size (unsigned int size)
  {
    if ((this->ran_out_of_room || this->end - this->head < ptrdiff_t (size))) {
      this->ran_out_of_room = true;
      return __null;
    }
    memset (this->head, 0, size);
    char *ret = this->head;
    this->head += size;
    return reinterpret_cast<Type *> (ret);
  }

  template <typename Type>
  inline Type *allocate_min (void)
  {
    return this->allocate_size<Type> (Type::min_size);
  }

  template <typename Type>
  inline Type *start_embed (void)
  {
    Type *ret = reinterpret_cast<Type *> (this->head);
    return ret;
  }

  template <typename Type>
  inline Type *embed (const Type &obj)
  {
    unsigned int size = obj.get_size ();
    Type *ret = this->allocate_size<Type> (size);
    if ((!ret)) return __null;
    memcpy (ret, obj, size);
    return ret;
  }

  template <typename Type>
  inline Type *extend_min (Type &obj)
  {
    unsigned int size = obj.min_size;
    ((this->start <= (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head) ? static_cast<void> (0) : __assert_fail ("this->start <= (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 461, __PRETTY_FUNCTION__));
    if ((!this->allocate_size<Type> (((char *) &obj) + size - this->head))) return __null;
    return reinterpret_cast<Type *> (&obj);
  }

  template <typename Type>
  inline Type *extend (Type &obj)
  {
    unsigned int size = obj.get_size ();
    ((this->start < (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head) ? static_cast<void> (0) : __assert_fail ("this->start < (char *) &obj && (char *) &obj <= this->head && (char *) &obj + size >= this->head", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 470, __PRETTY_FUNCTION__));
    if ((!this->allocate_size<Type> (((char *) &obj) + size - this->head))) return __null;
    return reinterpret_cast<Type *> (&obj);
  }

  inline void truncate (void *head)
  {
    ((this->start < head && head <= this->head) ? static_cast<void> (0) : __assert_fail ("this->start < head && head <= this->head", "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh", 477, __PRETTY_FUNCTION__));
    this->head = (char *) head;
  }

  unsigned int debug_depth;
  char *start, *end, *head;
  bool ran_out_of_room;
};

template <typename Type>
struct Supplier
{
  inline Supplier (const Type *array, unsigned int len_)
  {
    head = array;
    len = len_;
  }
  inline const Type operator [] (unsigned int i) const
  {
    if ((i >= len)) return Type ();
    return head[i];
  }

  inline void advance (unsigned int count)
  {
    if ((count > len))
      count = len;
    len -= count;
    head += count;
  }

  private:
  inline Supplier (const Supplier<Type> &);
  inline Supplier<Type>& operator= (const Supplier<Type> &);

  unsigned int len;
  const Type *head;
};
# 533 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
template <typename Type, int Bytes> struct BEInt;

template <typename Type>
struct BEInt<Type, 2>
{
  public:
  inline void set (Type V)
  {
    v[0] = (V >> 8) & 0xFF;
    v[1] = (V ) & 0xFF;
  }
  inline operator Type (void) const
  {
    return (v[0] << 8)
         + (v[1] );
  }
  inline bool operator == (const BEInt<Type, 2>& o) const
  {
    return v[0] == o.v[0]
        && v[1] == o.v[1];
  }
  inline bool operator != (const BEInt<Type, 2>& o) const { return !(*this == o); }
  private: uint8_t v[2];
};
template <typename Type>
struct BEInt<Type, 3>
{
  public:
  inline void set (Type V)
  {
    v[0] = (V >> 16) & 0xFF;
    v[1] = (V >> 8) & 0xFF;
    v[2] = (V ) & 0xFF;
  }
  inline operator Type (void) const
  {
    return (v[0] << 16)
         + (v[1] << 8)
         + (v[2] );
  }
  inline bool operator == (const BEInt<Type, 3>& o) const
  {
    return v[0] == o.v[0]
        && v[1] == o.v[1]
        && v[2] == o.v[2];
  }
  inline bool operator != (const BEInt<Type, 3>& o) const { return !(*this == o); }
  private: uint8_t v[3];
};
template <typename Type>
struct BEInt<Type, 4>
{
  public:
  inline void set (Type V)
  {
    v[0] = (V >> 24) & 0xFF;
    v[1] = (V >> 16) & 0xFF;
    v[2] = (V >> 8) & 0xFF;
    v[3] = (V ) & 0xFF;
  }
  inline operator Type (void) const
  {
    return (v[0] << 24)
         + (v[1] << 16)
         + (v[2] << 8)
         + (v[3] );
  }
  inline bool operator == (const BEInt<Type, 4>& o) const
  {
    return v[0] == o.v[0]
        && v[1] == o.v[1]
        && v[2] == o.v[2]
        && v[3] == o.v[3];
  }
  inline bool operator != (const BEInt<Type, 4>& o) const { return !(*this == o); }
  private: uint8_t v[4];
};


template <typename Type, unsigned int Size>
struct IntType
{
  inline void set (Type i) { v.set (i); }
  inline operator Type(void) const { return v; }
  inline bool operator == (const IntType<Type,Size> &o) const { return v == o.v; }
  inline bool operator != (const IntType<Type,Size> &o) const { return v != o.v; }
  static inline int cmp (const IntType<Type,Size> *a, const IntType<Type,Size> *b) { return b->cmp (*a); }
  inline int cmp (IntType<Type,Size> va) const { Type a = va; Type b = v; return a < b ? -1 : a == b ? 0 : +1; }
  inline int cmp (Type a) const { Type b = v; return a < b ? -1 : a == b ? 0 : +1; }
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret ((c->check_struct (this)), 624);
  }
  protected:
  BEInt<Type, Size> v;
  public:
  inline void _instance_assertion_on_line_629 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_629_failed[(((sizeof (*this) == (Size))))?1:-1]; do { typedef __typeof__(*this) _type_629; union _type__type_629_on_line_629_is_not_POD { _type_629 instance; }; } while (0); }; static const unsigned int static_size = (Size); static const unsigned int min_size = (Size);
};

typedef uint8_t BYTE;
typedef IntType<uint16_t, 2> USHORT;
typedef IntType<int16_t, 2> SHORT;
typedef IntType<uint32_t, 4> ULONG;
typedef IntType<int32_t, 4> LONG;
typedef IntType<uint32_t, 3> UINT24;


typedef SHORT FWORD;


typedef USHORT UFWORD;



struct LONGDATETIME
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret ((c->check_struct (this)), 651);
  }
  protected:
  LONG major;
  ULONG minor;
  public:
  inline void _instance_assertion_on_line_657 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_657_failed[(((sizeof (*this) == (8))))?1:-1]; do { typedef __typeof__(*this) _type_657; union _type__type_657_on_line_657_is_not_POD { _type_657 instance; }; } while (0); }; static const unsigned int static_size = (8); static const unsigned int min_size = (8);
};



struct Tag : ULONG
{

  inline operator const char* (void) const { return reinterpret_cast<const char *> (&this->v); }
  inline operator char* (void) { return reinterpret_cast<char *> (&this->v); }
  public:
  inline void _instance_assertion_on_line_668 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_668_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_668; union _type__type_668_on_line_668_is_not_POD { _type_668 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};
static const char _NullTag[sizeof (Tag) + 1] = "    "; template <> inline const Tag& Null<Tag> (void) { return *CastP<Tag> (_NullTag); } __attribute__((unused)) typedef int _static_assert_on_line_670_failed[(((Tag::min_size + 1 <= sizeof (_NullTag))))?1:-1];


typedef USHORT GlyphID;


struct Index : USHORT {
  static const unsigned int NOT_FOUND_INDEX = 0xFFFFu;
};
static const char _NullIndex[sizeof (Index) + 1] = "\xff\xff"; template <> inline const Index& Null<Index> (void) { return *CastP<Index> (_NullIndex); } __attribute__((unused)) typedef int _static_assert_on_line_679_failed[(((Index::min_size + 1 <= sizeof (_NullIndex))))?1:-1];


template <typename Type=USHORT>
struct Offset : Type
{
  inline bool is_null (void) const { return 0 == *this; }
  public:
  inline void _instance_assertion_on_line_687 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_687_failed[(((sizeof (*this) == (sizeof(Type)))))?1:-1]; do { typedef __typeof__(*this) _type_687; union _type__type_687_on_line_687_is_not_POD { _type_687 instance; }; } while (0); }; static const unsigned int static_size = (sizeof(Type)); static const unsigned int min_size = (sizeof(Type));
};



struct CheckSum : ULONG
{

  static inline uint32_t CalcTableChecksum (const ULONG *Table, uint32_t Length)
  {
    uint32_t Sum = 0L;
    const ULONG *EndPtr = Table+((Length+3) & ~3) / ULONG::static_size;

    while (Table < EndPtr)
      Sum += *Table++;
    return Sum;
  }


  inline void set_for_data (const void *data, unsigned int length)
  { set (CalcTableChecksum ((const ULONG *) data, length)); }

  public:
  inline void _instance_assertion_on_line_710 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_710_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_710; union _type__type_710_on_line_710_is_not_POD { _type_710 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};






struct FixedVersion
{
  inline uint32_t to_int (void) const { return (major << 16) + minor; }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 724);
  }

  USHORT major;
  USHORT minor;
  public:
  inline void _instance_assertion_on_line_730 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_730_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_730; union _type__type_730_on_line_730_is_not_POD { _type_730 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};
# 740 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
template <typename Type, typename OffsetType=USHORT>
struct OffsetTo : Offset<OffsetType>
{
  inline const Type& operator () (const void *base) const
  {
    unsigned int offset = *this;
    if ((!offset)) return Null<Type>();
    return StructAtOffset<Type> (base, offset);
  }

  inline Type& serialize (hb_serialize_context_t *c, void *base)
  {
    Type *t = c->start_embed<Type> ();
    this->set ((char *) t - (char *) base);
    return *t;
  }

  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!c->check_struct (this))) return trace.ret (false, 759);
    unsigned int offset = *this;
    if ((!offset)) return trace.ret (true, 761);
    Type &obj = StructAtOffset<Type> (base, offset);
    return trace.ret ((obj.sanitize (c)) || neuter (c), 763);
  }
  template <typename T>
  inline bool sanitize (hb_sanitize_context_t *c, void *base, T user_data) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!c->check_struct (this))) return trace.ret (false, 768);
    unsigned int offset = *this;
    if ((!offset)) return trace.ret (true, 770);
    Type &obj = StructAtOffset<Type> (base, offset);
    return trace.ret ((obj.sanitize (c, user_data)) || neuter (c), 772);
  }


  inline bool neuter (hb_sanitize_context_t *c) {
    return c->try_set (this, 0);
  }
  inline void _instance_assertion_on_line_779 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_779_failed[(((sizeof (*this) == (sizeof(OffsetType)))))?1:-1]; do { typedef __typeof__(*this) _type_779; union _type__type_779_on_line_779_is_not_POD { _type_779 instance; }; } while (0); }; static const unsigned int static_size = (sizeof(OffsetType)); static const unsigned int min_size = (sizeof(OffsetType));
};
template <typename Base, typename OffsetType, typename Type>
static inline const Type& operator + (const Base &base, const OffsetTo<Type, OffsetType> &offset) { return offset (base); }
template <typename Base, typename OffsetType, typename Type>
static inline Type& operator + (Base &base, OffsetTo<Type, OffsetType> &offset) { return offset (base); }







template <typename Type, typename LenType=USHORT>
struct ArrayOf
{
  const Type *sub_array (unsigned int start_offset, unsigned int *pcount ) const
  {
    unsigned int count = len;
    if ((start_offset > count))
      count = 0;
    else
      count -= start_offset;
    count = MIN (count, *pcount);
    *pcount = count;
    return array + start_offset;
  }

  inline const Type& operator [] (unsigned int i) const
  {
    if ((i >= len)) return Null<Type>();
    return array[i];
  }
  inline Type& operator [] (unsigned int i)
  {
    return array[i];
  }
  inline unsigned int get_size (void) const
  { return len.static_size + len * Type::static_size; }

  inline bool serialize (hb_serialize_context_t *c,
    unsigned int items_len)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 823);
    len.set (items_len);
    if ((!c->extend (*this))) return trace.ret (false, 825);
    return trace.ret (true, 826);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<Type> &items,
    unsigned int items_len)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!serialize (c, items_len))) return trace.ret (false, 834);
    for (unsigned int i = 0; i < items_len; i++)
      array[i] = items[i];
    items.advance (items_len);
    return trace.ret (true, 838);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 843);
# 852 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
    (void) (false && array[0].sanitize (c));

    return trace.ret (true, 854);
  }
  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 858);
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
      if ((!array[i].sanitize (c, base)))
        return trace.ret (false, 862);
    return trace.ret (true, 863);
  }
  template <typename T>
  inline bool sanitize (hb_sanitize_context_t *c, void *base, T user_data) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 868);
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
      if ((!array[i].sanitize (c, base, user_data)))
        return trace.ret (false, 872);
    return trace.ret (true, 873);
  }

  template <typename SearchType>
  inline int lsearch (const SearchType &x) const
  {
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
      if (!this->array[i].cmp (x))
        return i;
    return -1;
  }

  private:
  inline bool sanitize_shallow (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && c->check_array (this, Type::static_size, len), 889);
  }

  public:
  LenType len;
  Type array[1];
  public:
  inline void _instance_assertion_on_line_896 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_896_failed[(((sizeof (*this) == (sizeof (LenType)) + sizeof (array[0]))))?1:-1]; do { typedef __typeof__(*this) _type_896; union _type__type_896_on_line_896_is_not_POD { _type_896 instance; }; } while (0); }; inline void _compiles_assertion_on_line_896 (void) const { (void) array[0].static_size; } static const unsigned int min_size = (sizeof (LenType));
};


template <typename Type>
struct OffsetArrayOf : ArrayOf<OffsetTo<Type> > {};


template <typename Type>
struct OffsetListOf : OffsetArrayOf<Type>
{
  inline const Type& operator [] (unsigned int i) const
  {
    if ((i >= this->len)) return Null<Type>();
    return this+this->array[i];
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (OffsetArrayOf<Type>::sanitize (c, this), 915);
  }
  template <typename T>
  inline bool sanitize (hb_sanitize_context_t *c, T user_data) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (OffsetArrayOf<Type>::sanitize (c, this, user_data), 920);
  }
};



template <typename Type, typename LenType=USHORT>
struct HeadlessArrayOf
{
  inline const Type& operator [] (unsigned int i) const
  {
    if ((i >= len || !i)) return Null<Type>();
    return array[i-1];
  }
  inline unsigned int get_size (void) const
  { return len.static_size + (len ? len - 1 : 0) * Type::static_size; }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<Type> &items,
    unsigned int items_len)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 942);
    len.set (items_len);
    if ((!items_len)) return trace.ret (true, 944);
    if ((!c->extend (*this))) return trace.ret (false, 945);
    for (unsigned int i = 0; i < items_len - 1; i++)
      array[i] = items[i];
    items.advance (items_len - 1);
    return trace.ret (true, 949);
  }

  inline bool sanitize_shallow (hb_sanitize_context_t *c) {
    return c->check_struct (this)
 && c->check_array (this, Type::static_size, len);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!sanitize_shallow (c))) return trace.ret (false, 959);
# 968 "../../../libs/harfbuzz-ng/src/hb-open-type-private.hh"
    (void) (false && array[0].sanitize (c));

    return trace.ret (true, 970);
  }

  LenType len;
  Type array[1];
  public:
  inline void _instance_assertion_on_line_976 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_976_failed[(((sizeof (*this) == (sizeof (LenType)) + sizeof (array[0]))))?1:-1]; do { typedef __typeof__(*this) _type_976; union _type__type_976_on_line_976_is_not_POD { _type_976 instance; }; } while (0); }; inline void _compiles_assertion_on_line_976 (void) const { (void) array[0].static_size; } static const unsigned int min_size = (sizeof (LenType));
};



template <typename Type, typename LenType=USHORT>
struct SortedArrayOf : ArrayOf<Type, LenType>
{
  template <typename SearchType>
  inline int bsearch (const SearchType &x) const
  {

    int min = 0, max = (int) this->len - 1;
    while (min <= max)
    {
      int mid = (min + max) / 2;
      int c = this->array[mid].cmp (x);
      if (c < 0)
        max = mid - 1;
      else if (c > 0)
        min = mid + 1;
      else
        return mid;
    }
    return -1;
  }
};


}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh" 2



namespace OT {
# 57 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
template <typename Type>
struct Record
{
  inline int cmp (hb_tag_t a) const {
    return tag.cmp (a);
  }

  struct sanitize_closure_t {
    hb_tag_t tag;
    void *list_base;
  };
  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const sanitize_closure_t closure = {tag, base};
    return trace.ret (c->check_struct (this) && offset.sanitize (c, base, &closure), 71);
  }

  Tag tag;
  OffsetTo<Type>
  offset;

  public:
  inline void _instance_assertion_on_line_79 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_79_failed[(((sizeof (*this) == (6))))?1:-1]; do { typedef __typeof__(*this) _type_79; union _type__type_79_on_line_79_is_not_POD { _type_79 instance; }; } while (0); }; static const unsigned int static_size = (6); static const unsigned int min_size = (6);
};

template <typename Type>
struct RecordArrayOf : SortedArrayOf<Record<Type> > {
  inline const Tag& get_tag (unsigned int i) const
  {



    if ((i >= this->len)) return Null<Tag>();
    return (*this)[i].tag;
  }
  inline unsigned int get_tags (unsigned int start_offset,
    unsigned int *record_count ,
    hb_tag_t *record_tags ) const
  {
    if (record_count) {
      const Record<Type> *arr = this->sub_array (start_offset, record_count);
      unsigned int count = *record_count;
      for (unsigned int i = 0; i < count; i++)
 record_tags[i] = arr[i].tag;
    }
    return this->len;
  }
  inline bool find_index (hb_tag_t tag, unsigned int *index) const
  {

    int i = this-> bsearch (tag);
    if (i != -1) {
        if (index) *index = i;
        return true;
    } else {
      if (index) *index = Index::NOT_FOUND_INDEX;
      return false;
    }
  }
};

template <typename Type>
struct RecordListOf : RecordArrayOf<Type>
{
  inline const Type& operator [] (unsigned int i) const
  { return this+RecordArrayOf<Type>::operator [](i).offset; }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (RecordArrayOf<Type>::sanitize (c, this), 126);
  }
};


struct RangeRecord
{
  inline int cmp (hb_codepoint_t g) const {
    return g < start ? -1 : g <= end ? 0 : +1 ;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 139);
  }

  inline bool intersects (const hb_set_t *glyphs) const {
    return glyphs->intersects (start, end);
  }

  template <typename set_t>
  inline void add_coverage (set_t *glyphs) const {
    glyphs->add_range (start, end);
  }

  GlyphID start;
  GlyphID end;
  USHORT value;
  public:
  inline void _instance_assertion_on_line_155 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_155_failed[(((sizeof (*this) == (6))))?1:-1]; do { typedef __typeof__(*this) _type_155; union _type__type_155_on_line_155_is_not_POD { _type_155 instance; }; } while (0); }; static const unsigned int static_size = (6); static const unsigned int min_size = (6);
};
static const char _NullRangeRecord[sizeof (RangeRecord) + 1] = "\000\001"; template <> inline const RangeRecord& Null<RangeRecord> (void) { return *CastP<RangeRecord> (_NullRangeRecord); } __attribute__((unused)) typedef int _static_assert_on_line_157_failed[(((RangeRecord::min_size + 1 <= sizeof (_NullRangeRecord))))?1:-1];


struct IndexArray : ArrayOf<Index>
{
  inline unsigned int get_indexes (unsigned int start_offset,
       unsigned int *_count ,
       unsigned int *_indexes ) const
  {
    if (_count) {
      const USHORT *arr = this->sub_array (start_offset, _count);
      unsigned int count = *_count;
      for (unsigned int i = 0; i < count; i++)
 _indexes[i] = arr[i];
    }
    return this->len;
  }
};


struct Script;
struct LangSys;
struct Feature;


struct LangSys
{
  inline unsigned int get_feature_count (void) const
  { return featureIndex.len; }
  inline hb_tag_t get_feature_index (unsigned int i) const
  { return featureIndex[i]; }
  inline unsigned int get_feature_indexes (unsigned int start_offset,
        unsigned int *feature_count ,
        unsigned int *feature_indexes ) const
  { return featureIndex.get_indexes (start_offset, feature_count, feature_indexes); }

  inline bool has_required_feature (void) const { return reqFeatureIndex != 0xFFFFu; }
  inline unsigned int get_required_feature_index (void) const
  {
    if (reqFeatureIndex == 0xFFFFu)
      return Index::NOT_FOUND_INDEX;
   return reqFeatureIndex;;
  }

  inline bool sanitize (hb_sanitize_context_t *c,
   const Record<LangSys>::sanitize_closure_t * = __null) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && featureIndex.sanitize (c), 204);
  }

  Offset<> lookupOrderZ;

  USHORT reqFeatureIndex;


  IndexArray featureIndex;
  public:
  inline void _instance_assertion_on_line_214 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_214_failed[(((sizeof (*this) == (6) + sizeof (featureIndex[0]))))?1:-1]; do { typedef __typeof__(*this) _type_214; union _type__type_214_on_line_214_is_not_POD { _type_214 instance; }; } while (0); }; inline void _compiles_assertion_on_line_214 (void) const { (void) featureIndex[0].static_size; } static const unsigned int min_size = (6);
};
static const char _NullLangSys[sizeof (LangSys) + 1] = "\0\0\xFF\xFF"; template <> inline const LangSys& Null<LangSys> (void) { return *CastP<LangSys> (_NullLangSys); } __attribute__((unused)) typedef int _static_assert_on_line_216_failed[(((LangSys::min_size + 1 <= sizeof (_NullLangSys))))?1:-1];


struct Script
{
  inline unsigned int get_lang_sys_count (void) const
  { return langSys.len; }
  inline const Tag& get_lang_sys_tag (unsigned int i) const
  { return langSys.get_tag (i); }
  inline unsigned int get_lang_sys_tags (unsigned int start_offset,
      unsigned int *lang_sys_count ,
      hb_tag_t *lang_sys_tags ) const
  { return langSys.get_tags (start_offset, lang_sys_count, lang_sys_tags); }
  inline const LangSys& get_lang_sys (unsigned int i) const
  {
    if (i == Index::NOT_FOUND_INDEX) return get_default_lang_sys ();
    return this+langSys[i].offset;
  }
  inline bool find_lang_sys_index (hb_tag_t tag, unsigned int *index) const
  { return langSys.find_index (tag, index); }

  inline bool has_default_lang_sys (void) const { return defaultLangSys != 0; }
  inline const LangSys& get_default_lang_sys (void) const { return this+defaultLangSys; }

  inline bool sanitize (hb_sanitize_context_t *c,
   const Record<Script>::sanitize_closure_t * = __null) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (defaultLangSys.sanitize (c, this) && langSys.sanitize (c, this), 243);
  }

  protected:
  OffsetTo<LangSys>
  defaultLangSys;

  RecordArrayOf<LangSys>
  langSys;

  public:
  inline void _instance_assertion_on_line_254 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_254_failed[(((sizeof (*this) == (4) + sizeof (langSys[0]))))?1:-1]; do { typedef __typeof__(*this) _type_254; union _type__type_254_on_line_254_is_not_POD { _type_254 instance; }; } while (0); }; inline void _compiles_assertion_on_line_254 (void) const { (void) langSys[0].static_size; } static const unsigned int min_size = (4);
};

typedef RecordListOf<Script> ScriptList;



struct FeatureParamsSize
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!c->check_struct (this))) return trace.ret (false, 265);
# 316 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
    if (!designSize)
      return trace.ret (false, 317);
    else if (subfamilyID == 0 &&
      subfamilyNameID == 0 &&
      rangeStart == 0 &&
      rangeEnd == 0)
      return trace.ret (true, 322);
    else if (designSize < rangeStart ||
      designSize > rangeEnd ||
      subfamilyNameID < 256 ||
      subfamilyNameID > 32767)
      return trace.ret (false, 327);
    else
      return trace.ret (true, 329);
  }

  USHORT designSize;




  USHORT subfamilyID;
# 347 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
  USHORT subfamilyNameID;
# 361 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
  USHORT rangeStart;


  USHORT rangeEnd;


  public:
  inline void _instance_assertion_on_line_368 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_368_failed[(((sizeof (*this) == (10))))?1:-1]; do { typedef __typeof__(*this) _type_368; union _type__type_368_on_line_368_is_not_POD { _type_368 instance; }; } while (0); }; static const unsigned int static_size = (10); static const unsigned int min_size = (10);
};


struct FeatureParamsStylisticSet
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;


    return trace.ret (c->check_struct (this), 378);
  }

  USHORT version;




  USHORT uiNameID;
# 400 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
  public:
  inline void _instance_assertion_on_line_401 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_401_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_401; union _type__type_401_on_line_401_is_not_POD { _type_401 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};


struct FeatureParamsCharacterVariants
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && characters.sanitize (c),
 410
# 409 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
           )
                            ;
  }

  USHORT format;
  USHORT featUILableNameID;




  USHORT featUITooltipTextNameID;





  USHORT sampleTextNameID;



  USHORT numNamedParameters;

  USHORT firstParamUILabelNameID;




  ArrayOf<UINT24>
  characters;



  public:
  inline void _instance_assertion_on_line_442 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_442_failed[(((sizeof (*this) == (14) + sizeof (characters[0]))))?1:-1]; do { typedef __typeof__(*this) _type_442; union _type__type_442_on_line_442_is_not_POD { _type_442 instance; }; } while (0); }; inline void _compiles_assertion_on_line_442 (void) const { (void) characters[0].static_size; } static const unsigned int min_size = (14);
};

struct FeatureParams
{
  inline bool sanitize (hb_sanitize_context_t *c, hb_tag_t tag) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (tag == ((hb_tag_t)((((uint8_t)('s'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('e')))))
      return trace.ret (u.size.sanitize (c), 450);
    if ((tag & 0xFFFF0000u) == ((hb_tag_t)((((uint8_t)('s'))<<24)|(((uint8_t)('s'))<<16)|(((uint8_t)('\0'))<<8)|((uint8_t)('\0')))))
      return trace.ret (u.stylisticSet.sanitize (c), 452);
    if ((tag & 0xFFFF0000u) == ((hb_tag_t)((((uint8_t)('c'))<<24)|(((uint8_t)('v'))<<16)|(((uint8_t)('\0'))<<8)|((uint8_t)('\0')))))
      return trace.ret (u.characterVariants.sanitize (c), 454);
    return trace.ret (true, 455);
  }

  inline const FeatureParamsSize& get_size_params (hb_tag_t tag) const
  {
    if (tag == ((hb_tag_t)((((uint8_t)('s'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('e')))))
      return u.size;
    return Null<FeatureParamsSize>();
  }

  private:
  union {
  FeatureParamsSize size;
  FeatureParamsStylisticSet stylisticSet;
  FeatureParamsCharacterVariants characterVariants;
  } u;
  inline void _instance_assertion_on_line_471 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_471_failed[(((sizeof (*this) == (17))))?1:-1]; do { typedef __typeof__(*this) _type_471; union _type__type_471_on_line_471_is_not_POD { _type_471 instance; }; } while (0); }; static const unsigned int static_size = (17); static const unsigned int min_size = (17);
};

struct Feature
{
  inline unsigned int get_lookup_count (void) const
  { return lookupIndex.len; }
  inline hb_tag_t get_lookup_index (unsigned int i) const
  { return lookupIndex[i]; }
  inline unsigned int get_lookup_indexes (unsigned int start_index,
       unsigned int *lookup_count ,
       unsigned int *lookup_tags ) const
  { return lookupIndex.get_indexes (start_index, lookup_count, lookup_tags); }

  inline const FeatureParams &get_feature_params (void) const
  { return this+featureParams; }

  inline bool sanitize (hb_sanitize_context_t *c,
   const Record<Feature>::sanitize_closure_t *closure) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!(c->check_struct (this) && lookupIndex.sanitize (c))))
      return trace.ret (false, 492);
# 505 "../../../libs/harfbuzz-ng/src/hb-ot-layout-common-private.hh"
    OffsetTo<FeatureParams> orig_offset = featureParams;
    if ((!featureParams.sanitize (c, this, closure ? closure->tag : ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0)))))))
      return trace.ret (false, 507);

    if ((orig_offset.is_null ()))
      return trace.ret (true, 510);

    if (featureParams == 0 && closure &&
 closure->tag == ((hb_tag_t)((((uint8_t)('s'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('e')))) &&
 closure->list_base && closure->list_base < this)
    {
      unsigned int new_offset_int = (unsigned int) orig_offset -
        (((char *) this) - ((char *) closure->list_base));

      OffsetTo<FeatureParams> new_offset;

      new_offset.set (new_offset_int);
      if (new_offset == new_offset_int &&
   c->try_set (&featureParams, new_offset) &&
   !featureParams.sanitize (c, this, closure ? closure->tag : ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0))))))
 return trace.ret (false, 525);
    }

    return trace.ret (true, 528);
  }

  OffsetTo<FeatureParams>
   featureParams;



  IndexArray lookupIndex;
  public:
  inline void _instance_assertion_on_line_538 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_538_failed[(((sizeof (*this) == (4) + sizeof (lookupIndex[0]))))?1:-1]; do { typedef __typeof__(*this) _type_538; union _type__type_538_on_line_538_is_not_POD { _type_538 instance; }; } while (0); }; inline void _compiles_assertion_on_line_538 (void) const { (void) lookupIndex[0].static_size; } static const unsigned int min_size = (4);
};

typedef RecordListOf<Feature> FeatureList;


struct LookupFlag : USHORT
{
  enum Flags {
    RightToLeft = 0x0001u,
    IgnoreBaseGlyphs = 0x0002u,
    IgnoreLigatures = 0x0004u,
    IgnoreMarks = 0x0008u,
    IgnoreFlags = 0x000Eu,
    UseMarkFilteringSet = 0x0010u,
    Reserved = 0x00E0u,
    MarkAttachmentType = 0xFF00u
  };
  public:
  inline void _instance_assertion_on_line_557 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_557_failed[(((sizeof (*this) == (2))))?1:-1]; do { typedef __typeof__(*this) _type_557; union _type__type_557_on_line_557_is_not_POD { _type_557 instance; }; } while (0); }; static const unsigned int static_size = (2); static const unsigned int min_size = (2);
};

struct Lookup
{
  inline unsigned int get_subtable_count (void) const { return subTable.len; }

  inline unsigned int get_type (void) const { return lookupType; }




  inline uint32_t get_props (void) const
  {
    unsigned int flag = lookupFlag;
    if ((flag & LookupFlag::UseMarkFilteringSet))
    {
      const USHORT &markFilteringSet = StructAfter<USHORT> (subTable);
      flag += (markFilteringSet << 16);
    }
    return flag;
  }

  inline bool serialize (hb_serialize_context_t *c,
    unsigned int lookup_type,
    uint32_t lookup_props,
    unsigned int num_subtables)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 586);
    lookupType.set (lookup_type);
    lookupFlag.set (lookup_props & 0xFFFFu);
    if ((!subTable.serialize (c, num_subtables))) return trace.ret (false, 589);
    if (lookupFlag & LookupFlag::UseMarkFilteringSet)
    {
      USHORT &markFilteringSet = StructAfter<USHORT> (subTable);
      markFilteringSet.set (lookup_props >> 16);
    }
    return trace.ret (true, 595);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;

    if (!(c->check_struct (this) && subTable.sanitize (c))) return trace.ret (false, 601);
    if (lookupFlag & LookupFlag::UseMarkFilteringSet)
    {
      USHORT &markFilteringSet = StructAfter<USHORT> (subTable);
      if (!markFilteringSet.sanitize (c)) return trace.ret (false, 605);
    }
    return trace.ret (true, 607);
  }

  USHORT lookupType;
  USHORT lookupFlag;
  ArrayOf<Offset<> >
  subTable;
  USHORT markFilteringSetX[1];


  public:
  inline void _instance_assertion_on_line_618 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_618_failed[(((sizeof (*this) == (6) + sizeof (this->subTable[0]) + sizeof (this->markFilteringSetX[0]))))?1:-1]; do { typedef __typeof__(*this) _type_618; union _type__type_618_on_line_618_is_not_POD { _type_618 instance; }; } while (0); }; inline void _compiles_assertion_on_line_618 (void) const { (void) subTable[0].static_size; (void) markFilteringSetX[0].static_size; } static const unsigned int min_size = (6);
};

typedef OffsetListOf<Lookup> LookupList;






struct CoverageFormat1
{
  friend struct Coverage;

  private:
  inline unsigned int get_coverage (hb_codepoint_t glyph_id) const
  {
    int i = glyphArray.bsearch (glyph_id);
    __attribute__((unused)) typedef int _static_assert_on_line_636_failed[(((((unsigned int) -1) == ((unsigned int) -1))))?1:-1];
    return i;
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 645);
    glyphArray.len.set (num_glyphs);
    if ((!c->extend (glyphArray))) return trace.ret (false, 647);
    for (unsigned int i = 0; i < num_glyphs; i++)
      glyphArray[i] = glyphs[i];
    glyphs.advance (num_glyphs);
    return trace.ret (true, 651);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (glyphArray.sanitize (c), 656);
  }

  inline bool intersects_coverage (const hb_set_t *glyphs, unsigned int index) const {
    return glyphs->has (glyphArray[index]);
  }

  template <typename set_t>
  inline void add_coverage (set_t *glyphs) const {
    unsigned int count = glyphArray.len;
    for (unsigned int i = 0; i < count; i++)
      glyphs->add (glyphArray[i]);
  }

  public:

  struct Iter {
    inline void init (const struct CoverageFormat1 &c_) { c = &c_; i = 0; };
    inline bool more (void) { return i < c->glyphArray.len; }
    inline void next (void) { i++; }
    inline uint16_t get_glyph (void) { return c->glyphArray[i]; }
    inline uint16_t get_coverage (void) { return i; }

    private:
    const struct CoverageFormat1 *c;
    unsigned int i;
  };
  private:

  protected:
  USHORT coverageFormat;
  SortedArrayOf<GlyphID>
  glyphArray;
  public:
  inline void _instance_assertion_on_line_690 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_690_failed[(((sizeof (*this) == (4) + sizeof (glyphArray[0]))))?1:-1]; do { typedef __typeof__(*this) _type_690; union _type__type_690_on_line_690_is_not_POD { _type_690 instance; }; } while (0); }; inline void _compiles_assertion_on_line_690 (void) const { (void) glyphArray[0].static_size; } static const unsigned int min_size = (4);
};

struct CoverageFormat2
{
  friend struct Coverage;

  private:
  inline unsigned int get_coverage (hb_codepoint_t glyph_id) const
  {
    int i = rangeRecord.bsearch (glyph_id);
    if (i != -1) {
      const RangeRecord &range = rangeRecord[i];
      return (unsigned int) range.value + (glyph_id - range.start);
    }
    return ((unsigned int) -1);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 713);

    if ((!num_glyphs)) return trace.ret (true, 715);

    unsigned int num_ranges = 1;
    for (unsigned int i = 1; i < num_glyphs; i++)
      if (glyphs[i - 1] + 1 != glyphs[i])
        num_ranges++;
    rangeRecord.len.set (num_ranges);
    if ((!c->extend (rangeRecord))) return trace.ret (false, 722);

    unsigned int range = 0;
    rangeRecord[range].start = glyphs[0];
    rangeRecord[range].value.set (0);
    for (unsigned int i = 1; i < num_glyphs; i++)
      if (glyphs[i - 1] + 1 != glyphs[i]) {
 range++;
 rangeRecord[range].start = glyphs[i];
 rangeRecord[range].value.set (i);
        rangeRecord[range].end = glyphs[i];
      } else {
        rangeRecord[range].end = glyphs[i];
      }
    glyphs.advance (num_glyphs);
    return trace.ret (true, 737);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (rangeRecord.sanitize (c), 742);
  }

  inline bool intersects_coverage (const hb_set_t *glyphs, unsigned int index) const {
    unsigned int i;
    unsigned int count = rangeRecord.len;
    for (i = 0; i < count; i++) {
      const RangeRecord &range = rangeRecord[i];
      if (range.value <= index &&
   index < (unsigned int) range.value + (range.end - range.start) &&
   range.intersects (glyphs))
        return true;
      else if (index < range.value)
        return false;
    }
    return false;
  }

  template <typename set_t>
  inline void add_coverage (set_t *glyphs) const {
    unsigned int count = rangeRecord.len;
    for (unsigned int i = 0; i < count; i++)
      rangeRecord[i].add_coverage (glyphs);
  }

  public:

  struct Iter {
    inline void init (const CoverageFormat2 &c_) {
      c = &c_;
      coverage = 0;
      i = 0;
      j = c->rangeRecord.len ? c_.rangeRecord[0].start : 0;
    }
    inline bool more (void) { return i < c->rangeRecord.len; }
    inline void next (void) {
      coverage++;
      if (j == c->rangeRecord[i].end) {
        i++;
 if (more ())
   j = c->rangeRecord[i].start;
 return;
      }
      j++;
    }
    inline uint16_t get_glyph (void) { return j; }
    inline uint16_t get_coverage (void) { return coverage; }

    private:
    const struct CoverageFormat2 *c;
    unsigned int i, j, coverage;
  };
  private:

  protected:
  USHORT coverageFormat;
  SortedArrayOf<RangeRecord>
  rangeRecord;


  public:
  inline void _instance_assertion_on_line_803 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_803_failed[(((sizeof (*this) == (4) + sizeof (rangeRecord[0]))))?1:-1]; do { typedef __typeof__(*this) _type_803; union _type__type_803_on_line_803_is_not_POD { _type_803 instance; }; } while (0); }; inline void _compiles_assertion_on_line_803 (void) const { (void) rangeRecord[0].static_size; } static const unsigned int min_size = (4);
};

struct Coverage
{
  inline unsigned int get_coverage (hb_codepoint_t glyph_id) const
  {
    switch (u.format) {
    case 1: return u.format1.get_coverage(glyph_id);
    case 2: return u.format2.get_coverage(glyph_id);
    default:return ((unsigned int) -1);
    }
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 822);
    unsigned int num_ranges = 1;
    for (unsigned int i = 1; i < num_glyphs; i++)
      if (glyphs[i - 1] + 1 != glyphs[i])
        num_ranges++;
    u.format.set (num_glyphs * 2 < num_ranges * 3 ? 1 : 2);
    switch (u.format) {
    case 1: return trace.ret (u.format1.serialize (c, glyphs, num_glyphs), 829);
    case 2: return trace.ret (u.format2.serialize (c, glyphs, num_glyphs), 830);
    default:return trace.ret (false, 831);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 837);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 839);
    case 2: return trace.ret (u.format2.sanitize (c), 840);
    default:return trace.ret (true, 841);
    }
  }

  inline bool intersects (const hb_set_t *glyphs) const {

    Coverage::Iter iter;
    for (iter.init (*this); iter.more (); iter.next ()) {
      if (glyphs->has (iter.get_glyph ()))
        return true;
    }
    return false;
  }

  inline bool intersects_coverage (const hb_set_t *glyphs, unsigned int index) const {
    switch (u.format) {
    case 1: return u.format1.intersects_coverage (glyphs, index);
    case 2: return u.format2.intersects_coverage (glyphs, index);
    default:return false;
    }
  }

  template <typename set_t>
  inline void add_coverage (set_t *glyphs) const {
    switch (u.format) {
    case 1: u.format1.add_coverage (glyphs); break;
    case 2: u.format2.add_coverage (glyphs); break;
    default: break;
    }
  }

  struct Iter {
    Iter (void) : format (0) {};
    inline void init (const Coverage &c_) {
      format = c_.u.format;
      switch (format) {
      case 1: u.format1.init (c_.u.format1); return;
      case 2: u.format2.init (c_.u.format2); return;
      default: return;
      }
    }
    inline bool more (void) {
      switch (format) {
      case 1: return u.format1.more ();
      case 2: return u.format2.more ();
      default:return false;
      }
    }
    inline void next (void) {
      switch (format) {
      case 1: u.format1.next (); break;
      case 2: u.format2.next (); break;
      default: break;
      }
    }
    inline uint16_t get_glyph (void) {
      switch (format) {
      case 1: return u.format1.get_glyph ();
      case 2: return u.format2.get_glyph ();
      default:return 0;
      }
    }
    inline uint16_t get_coverage (void) {
      switch (format) {
      case 1: return u.format1.get_coverage ();
      case 2: return u.format2.get_coverage ();
      default:return -1;
      }
    }

    private:
    unsigned int format;
    union {
    CoverageFormat1::Iter format1;
    CoverageFormat2::Iter format2;
    } u;
  };

  protected:
  union {
  USHORT format;
  CoverageFormat1 format1;
  CoverageFormat2 format2;
  } u;
  public:
  inline void _instance_assertion_on_line_926 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_926_failed[(((this->u.format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_926; union _type__type_926_on_line_926_is_not_POD { _type_926 instance; }; } while (0); }; static const unsigned int min_size = (2);
};






struct ClassDefFormat1
{
  friend struct ClassDef;

  private:
  inline unsigned int get_class (hb_codepoint_t glyph_id) const
  {
    if (((unsigned int) (glyph_id - startGlyph) < classValue.len))
      return classValue[glyph_id - startGlyph];
    return 0;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && classValue.sanitize (c), 948);
  }

  template <typename set_t>
  inline void add_class (set_t *glyphs, unsigned int klass) const {
    unsigned int count = classValue.len;
    for (unsigned int i = 0; i < count; i++)
      if (classValue[i] == klass)
        glyphs->add (startGlyph + i);
  }

  inline bool intersects_class (const hb_set_t *glyphs, unsigned int klass) const {
    unsigned int count = classValue.len;
    if (klass == 0)
    {

      hb_codepoint_t g = -1;
      if (!hb_set_next (glyphs, &g))
        return false;
      if (g < startGlyph)
        return true;
      g = startGlyph + count - 1;
      if (hb_set_next (glyphs, &g))
        return true;

    }
    for (unsigned int i = 0; i < count; i++)
      if (classValue[i] == klass && glyphs->has (startGlyph + i))
        return true;
    return false;
  }

  protected:
  USHORT classFormat;
  GlyphID startGlyph;
  ArrayOf<USHORT>
  classValue;
  public:
  inline void _instance_assertion_on_line_986 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_986_failed[(((sizeof (*this) == (6) + sizeof (classValue[0]))))?1:-1]; do { typedef __typeof__(*this) _type_986; union _type__type_986_on_line_986_is_not_POD { _type_986 instance; }; } while (0); }; inline void _compiles_assertion_on_line_986 (void) const { (void) classValue[0].static_size; } static const unsigned int min_size = (6);
};

struct ClassDefFormat2
{
  friend struct ClassDef;

  private:
  inline unsigned int get_class (hb_codepoint_t glyph_id) const
  {
    int i = rangeRecord.bsearch (glyph_id);
    if (i != -1)
      return rangeRecord[i].value;
    return 0;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (rangeRecord.sanitize (c), 1004);
  }

  template <typename set_t>
  inline void add_class (set_t *glyphs, unsigned int klass) const {
    unsigned int count = rangeRecord.len;
    for (unsigned int i = 0; i < count; i++)
      if (rangeRecord[i].value == klass)
        rangeRecord[i].add_coverage (glyphs);
  }

  inline bool intersects_class (const hb_set_t *glyphs, unsigned int klass) const {
    unsigned int count = rangeRecord.len;
    if (klass == 0)
    {

      hb_codepoint_t g = (hb_codepoint_t) -1;
      for (unsigned int i = 0; i < count; i++)
      {
 if (!hb_set_next (glyphs, &g))
   break;
 if (g < rangeRecord[i].start)
   return true;
 g = rangeRecord[i].end;
      }
      if (g != (hb_codepoint_t) -1 && hb_set_next (glyphs, &g))
        return true;

    }
    for (unsigned int i = 0; i < count; i++)
      if (rangeRecord[i].value == klass && rangeRecord[i].intersects (glyphs))
        return true;
    return false;
  }

  protected:
  USHORT classFormat;
  SortedArrayOf<RangeRecord>
  rangeRecord;

  public:
  inline void _instance_assertion_on_line_1045 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1045_failed[(((sizeof (*this) == (4) + sizeof (rangeRecord[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1045; union _type__type_1045_on_line_1045_is_not_POD { _type_1045 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1045 (void) const { (void) rangeRecord[0].static_size; } static const unsigned int min_size = (4);
};

struct ClassDef
{
  inline unsigned int get_class (hb_codepoint_t glyph_id) const
  {
    switch (u.format) {
    case 1: return u.format1.get_class(glyph_id);
    case 2: return u.format2.get_class(glyph_id);
    default:return 0;
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1061);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1063);
    case 2: return trace.ret (u.format2.sanitize (c), 1064);
    default:return trace.ret (true, 1065);
    }
  }

  inline void add_class (hb_set_t *glyphs, unsigned int klass) const {
    switch (u.format) {
    case 1: u.format1.add_class (glyphs, klass); return;
    case 2: u.format2.add_class (glyphs, klass); return;
    default:return;
    }
  }

  inline bool intersects_class (const hb_set_t *glyphs, unsigned int klass) const {
    switch (u.format) {
    case 1: return u.format1.intersects_class (glyphs, klass);
    case 2: return u.format2.intersects_class (glyphs, klass);
    default:return false;
    }
  }

  protected:
  union {
  USHORT format;
  ClassDefFormat1 format1;
  ClassDefFormat2 format2;
  } u;
  public:
  inline void _instance_assertion_on_line_1092 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1092_failed[(((this->u.format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_1092; union _type__type_1092_on_line_1092_is_not_POD { _type_1092 instance; }; } while (0); }; static const unsigned int min_size = (2);
};






struct Device
{

  inline hb_position_t get_x_delta (hb_font_t *font) const
  { return get_delta (font->x_ppem, font->x_scale); }

  inline hb_position_t get_y_delta (hb_font_t *font) const
  { return get_delta (font->y_ppem, font->y_scale); }

  inline int get_delta (unsigned int ppem, int scale) const
  {
    if (!ppem) return 0;

    int pixels = get_delta_pixels (ppem);

    if (!pixels) return 0;

    return (int) (pixels * (int64_t) scale / ppem);
  }


  inline int get_delta_pixels (unsigned int ppem_size) const
  {
    unsigned int f = deltaFormat;
    if ((f < 1 || f > 3))
      return 0;

    if (ppem_size < startSize || ppem_size > endSize)
      return 0;

    unsigned int s = ppem_size - startSize;

    unsigned int byte = deltaValue[s >> (4 - f)];
    unsigned int bits = (byte >> (16 - (((s & ((1 << (4 - f)) - 1)) + 1) << f)));
    unsigned int mask = (0xFFFFu >> (16 - (1 << f)));

    int delta = bits & mask;

    if ((unsigned int) delta >= ((mask + 1) >> 1))
      delta -= mask + 1;

    return delta;
  }

  inline unsigned int get_size (void) const
  {
    unsigned int f = deltaFormat;
    if ((f < 1 || f > 3 || startSize > endSize)) return 3 * USHORT::static_size;
    return USHORT::static_size * (4 + ((endSize - startSize) >> (4 - f)));
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && c->check_range (this, this->get_size ()), 1153);
  }

  protected:
  USHORT startSize;
  USHORT endSize;
  USHORT deltaFormat;




  USHORT deltaValue[1];
  public:
  inline void _instance_assertion_on_line_1166 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1166_failed[(((sizeof (*this) == (6) + sizeof (deltaValue[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1166; union _type__type_1166_on_line_1166_is_not_POD { _type_1166 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1166 (void) const { (void) deltaValue[0].static_size; } static const unsigned int min_size = (6);
};


}
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gdef-table.hh" 2




namespace OT {






typedef ArrayOf<USHORT> AttachPoint;


struct AttachList
{
  inline unsigned int get_attach_points (hb_codepoint_t glyph_id,
      unsigned int start_offset,
      unsigned int *point_count ,
      unsigned int *point_array ) const
  {
    unsigned int index = (this+coverage).get_coverage (glyph_id);
    if (index == ((unsigned int) -1))
    {
      if (point_count)
 *point_count = 0;
      return 0;
    }

    const AttachPoint &points = this+attachPoint[index];

    if (point_count) {
      const USHORT *array = points.sub_array (start_offset, point_count);
      unsigned int count = *point_count;
      for (unsigned int i = 0; i < count; i++)
 point_array[i] = array[i];
    }

    return points.len;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && attachPoint.sanitize (c, this), 76);
  }

  protected:
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<AttachPoint>
  attachPoint;

  public:
  inline void _instance_assertion_on_line_87 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_87_failed[(((sizeof (*this) == (4) + sizeof (attachPoint[0]))))?1:-1]; do { typedef __typeof__(*this) _type_87; union _type__type_87_on_line_87_is_not_POD { _type_87 instance; }; } while (0); }; inline void _compiles_assertion_on_line_87 (void) const { (void) attachPoint[0].static_size; } static const unsigned int min_size = (4);
};





struct CaretValueFormat1
{
  friend struct CaretValue;

  private:
  inline hb_position_t get_caret_value (hb_font_t *font, hb_direction_t direction, hb_codepoint_t glyph_id __attribute__((unused))) const
  {
    return ((((unsigned int) (direction)) & ~1U) == 4) ? font->em_scale_x (coordinate) : font->em_scale_y (coordinate);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 106);
  }

  protected:
  USHORT caretValueFormat;
  SHORT coordinate;
  public:
  inline void _instance_assertion_on_line_113 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_113_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_113; union _type__type_113_on_line_113_is_not_POD { _type_113 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};

struct CaretValueFormat2
{
  friend struct CaretValue;

  private:
  inline hb_position_t get_caret_value (hb_font_t *font, hb_direction_t direction, hb_codepoint_t glyph_id) const
  {
    hb_position_t x, y;
    if (font->get_glyph_contour_point_for_origin (glyph_id, caretValuePoint, direction, &x, &y))
      return ((((unsigned int) (direction)) & ~1U) == 4) ? x : y;
    else
      return 0;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 132);
  }

  protected:
  USHORT caretValueFormat;
  USHORT caretValuePoint;
  public:
  inline void _instance_assertion_on_line_139 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_139_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_139; union _type__type_139_on_line_139_is_not_POD { _type_139 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};

struct CaretValueFormat3
{
  friend struct CaretValue;

  inline hb_position_t get_caret_value (hb_font_t *font, hb_direction_t direction, hb_codepoint_t glyph_id __attribute__((unused))) const
  {
    return ((((unsigned int) (direction)) & ~1U) == 4) ?
           font->em_scale_x (coordinate) + (this+deviceTable).get_x_delta (font) :
           font->em_scale_y (coordinate) + (this+deviceTable).get_y_delta (font);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && deviceTable.sanitize (c, this), 155);
  }

  protected:
  USHORT caretValueFormat;
  SHORT coordinate;
  OffsetTo<Device>
  deviceTable;


  public:
  inline void _instance_assertion_on_line_166 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_166_failed[(((sizeof (*this) == (6))))?1:-1]; do { typedef __typeof__(*this) _type_166; union _type__type_166_on_line_166_is_not_POD { _type_166 instance; }; } while (0); }; static const unsigned int static_size = (6); static const unsigned int min_size = (6);
};

struct CaretValue
{
  inline hb_position_t get_caret_value (hb_font_t *font, hb_direction_t direction, hb_codepoint_t glyph_id) const
  {
    switch (u.format) {
    case 1: return u.format1.get_caret_value (font, direction, glyph_id);
    case 2: return u.format2.get_caret_value (font, direction, glyph_id);
    case 3: return u.format3.get_caret_value (font, direction, glyph_id);
    default:return 0;
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 183);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 185);
    case 2: return trace.ret (u.format2.sanitize (c), 186);
    case 3: return trace.ret (u.format3.sanitize (c), 187);
    default:return trace.ret (true, 188);
    }
  }

  protected:
  union {
  USHORT format;
  CaretValueFormat1 format1;
  CaretValueFormat2 format2;
  CaretValueFormat3 format3;
  } u;
  public:
  inline void _instance_assertion_on_line_200 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_200_failed[(((this->u.format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_200; union _type__type_200_on_line_200_is_not_POD { _type_200 instance; }; } while (0); }; static const unsigned int min_size = (2);
};

struct LigGlyph
{
  inline unsigned int get_lig_carets (hb_font_t *font,
          hb_direction_t direction,
          hb_codepoint_t glyph_id,
          unsigned int start_offset,
          unsigned int *caret_count ,
          hb_position_t *caret_array ) const
  {
    if (caret_count) {
      const OffsetTo<CaretValue> *array = carets.sub_array (start_offset, caret_count);
      unsigned int count = *caret_count;
      for (unsigned int i = 0; i < count; i++)
 caret_array[i] = (this+array[i]).get_caret_value (font, direction, glyph_id);
    }

    return carets.len;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (carets.sanitize (c, this), 224);
  }

  protected:
  OffsetArrayOf<CaretValue>
  carets;


  public:
  inline void _instance_assertion_on_line_233 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_233_failed[(((sizeof (*this) == (2) + sizeof (carets[0]))))?1:-1]; do { typedef __typeof__(*this) _type_233; union _type__type_233_on_line_233_is_not_POD { _type_233 instance; }; } while (0); }; inline void _compiles_assertion_on_line_233 (void) const { (void) carets[0].static_size; } static const unsigned int min_size = (2);
};

struct LigCaretList
{
  inline unsigned int get_lig_carets (hb_font_t *font,
          hb_direction_t direction,
          hb_codepoint_t glyph_id,
          unsigned int start_offset,
          unsigned int *caret_count ,
          hb_position_t *caret_array ) const
  {
    unsigned int index = (this+coverage).get_coverage (glyph_id);
    if (index == ((unsigned int) -1))
    {
      if (caret_count)
 *caret_count = 0;
      return 0;
    }
    const LigGlyph &lig_glyph = this+ligGlyph[index];
    return lig_glyph.get_lig_carets (font, direction, glyph_id, start_offset, caret_count, caret_array);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && ligGlyph.sanitize (c, this), 258);
  }

  protected:
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<LigGlyph>
  ligGlyph;

  public:
  inline void _instance_assertion_on_line_269 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_269_failed[(((sizeof (*this) == (4) + sizeof (ligGlyph[0]))))?1:-1]; do { typedef __typeof__(*this) _type_269; union _type__type_269_on_line_269_is_not_POD { _type_269 instance; }; } while (0); }; inline void _compiles_assertion_on_line_269 (void) const { (void) ligGlyph[0].static_size; } static const unsigned int min_size = (4);
};


struct MarkGlyphSetsFormat1
{
  inline bool covers (unsigned int set_index, hb_codepoint_t glyph_id) const
  { return (this+coverage[set_index]).get_coverage (glyph_id) != ((unsigned int) -1); }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this), 280);
  }

  protected:
  USHORT format;
  ArrayOf<OffsetTo<Coverage, ULONG> >
  coverage;

  public:
  inline void _instance_assertion_on_line_289 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_289_failed[(((sizeof (*this) == (4) + sizeof (coverage[0]))))?1:-1]; do { typedef __typeof__(*this) _type_289; union _type__type_289_on_line_289_is_not_POD { _type_289 instance; }; } while (0); }; inline void _compiles_assertion_on_line_289 (void) const { (void) coverage[0].static_size; } static const unsigned int min_size = (4);
};

struct MarkGlyphSets
{
  inline bool covers (unsigned int set_index, hb_codepoint_t glyph_id) const
  {
    switch (u.format) {
    case 1: return u.format1.covers (set_index, glyph_id);
    default:return false;
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 304);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 306);
    default:return trace.ret (true, 307);
    }
  }

  protected:
  union {
  USHORT format;
  MarkGlyphSetsFormat1 format1;
  } u;
  public:
  inline void _instance_assertion_on_line_317 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_317_failed[(((this->u.format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_317; union _type__type_317_on_line_317_is_not_POD { _type_317 instance; }; } while (0); }; static const unsigned int min_size = (2);
};






struct GDEF
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('D'))<<16)|(((uint8_t)('E'))<<8)|((uint8_t)('F'))));

  enum GlyphClasses {
    UnclassifiedGlyph = 0,
    BaseGlyph = 1,
    LigatureGlyph = 2,
    MarkGlyph = 3,
    ComponentGlyph = 4
  };

  inline bool has_glyph_classes (void) const { return glyphClassDef != 0; }
  inline unsigned int get_glyph_class (hb_codepoint_t glyph) const
  { return (this+glyphClassDef).get_class (glyph); }
  inline void get_glyphs_in_class (unsigned int klass, hb_set_t *glyphs) const
  { (this+glyphClassDef).add_class (glyphs, klass); }

  inline bool has_mark_attachment_types (void) const { return markAttachClassDef != 0; }
  inline unsigned int get_mark_attachment_type (hb_codepoint_t glyph) const
  { return (this+markAttachClassDef).get_class (glyph); }

  inline bool has_attach_points (void) const { return attachList != 0; }
  inline unsigned int get_attach_points (hb_codepoint_t glyph_id,
      unsigned int start_offset,
      unsigned int *point_count ,
      unsigned int *point_array ) const
  { return (this+attachList).get_attach_points (glyph_id, start_offset, point_count, point_array); }

  inline bool has_lig_carets (void) const { return ligCaretList != 0; }
  inline unsigned int get_lig_carets (hb_font_t *font,
          hb_direction_t direction,
          hb_codepoint_t glyph_id,
          unsigned int start_offset,
          unsigned int *caret_count ,
          hb_position_t *caret_array ) const
  { return (this+ligCaretList).get_lig_carets (font, direction, glyph_id, start_offset, caret_count, caret_array); }

  inline bool has_mark_sets (void) const { return version.to_int () >= 0x00010002u && markGlyphSetsDef[0] != 0; }
  inline bool mark_set_covers (unsigned int set_index, hb_codepoint_t glyph_id) const
  { return version.to_int () >= 0x00010002u && (this+markGlyphSetsDef[0]).covers (set_index, glyph_id); }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (version.sanitize (c) && (version.major == 1) && glyphClassDef.sanitize (c, this) && attachList.sanitize (c, this) && ligCaretList.sanitize (c, this) && markAttachClassDef.sanitize (c, this) && (version.to_int () < 0x00010002u || markGlyphSetsDef[0].sanitize (c, this)),





 375
# 369 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gdef-table.hh"
           )





                                                                                ;
  }





  inline unsigned int get_glyph_props (hb_codepoint_t glyph) const
  {
    unsigned int klass = get_glyph_class (glyph);

    __attribute__((unused)) typedef int _static_assert_on_line_386_failed[((((unsigned int) HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH == (unsigned int) LookupFlag::IgnoreBaseGlyphs)))?1:-1];
    __attribute__((unused)) typedef int _static_assert_on_line_387_failed[((((unsigned int) HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE == (unsigned int) LookupFlag::IgnoreLigatures)))?1:-1];
    __attribute__((unused)) typedef int _static_assert_on_line_388_failed[((((unsigned int) HB_OT_LAYOUT_GLYPH_PROPS_MARK == (unsigned int) LookupFlag::IgnoreMarks)))?1:-1];

    switch (klass) {
    default: return 0;
    case BaseGlyph: return HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH;
    case LigatureGlyph: return HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE;
    case MarkGlyph:
   klass = get_mark_attachment_type (glyph);
   return HB_OT_LAYOUT_GLYPH_PROPS_MARK | (klass << 8);
    }
  }


  protected:
  FixedVersion version;

  OffsetTo<ClassDef>
  glyphClassDef;


  OffsetTo<AttachList>
  attachList;


  OffsetTo<LigCaretList>
  ligCaretList;


  OffsetTo<ClassDef>
  markAttachClassDef;


  OffsetTo<MarkGlyphSets>
  markGlyphSetsDef[1];



  public:
  inline void _instance_assertion_on_line_426 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_426_failed[(((sizeof (*this) == (12) + sizeof (markGlyphSetsDef[0]))))?1:-1]; do { typedef __typeof__(*this) _type_426; union _type__type_426_on_line_426_is_not_POD { _type_426 instance; }; } while (0); }; inline void _compiles_assertion_on_line_426 (void) const { (void) markGlyphSetsDef[0].static_size; } static const unsigned int min_size = (12);
};


}
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh" 1
# 32 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh"
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh" 1
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
namespace OT {
# 55 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
struct hb_closure_context_t
{
  inline const char *get_name (void) { return "CLOSURE"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef hb_void_t return_t;
  typedef return_t (*recurse_func_t) (hb_closure_context_t *c, unsigned int lookup_index);
  template <typename T>
  inline return_t dispatch (const T &obj) { obj.closure (this); return (* (const _hb_void_t *) __null); }
  static return_t default_return_value (void) { return (* (const _hb_void_t *) __null); }
  bool stop_sublookup_iteration (return_t r __attribute__((unused))) const { return false; }
  return_t recurse (unsigned int lookup_index)
  {
    if ((nesting_level_left == 0 || !recurse_func))
      return default_return_value ();

    nesting_level_left--;
    recurse_func (this, lookup_index);
    nesting_level_left++;
    return (* (const _hb_void_t *) __null);
  }

  hb_face_t *face;
  hb_set_t *glyphs;
  recurse_func_t recurse_func;
  unsigned int nesting_level_left;
  unsigned int debug_depth;

  hb_closure_context_t (hb_face_t *face_,
   hb_set_t *glyphs_,
          unsigned int nesting_level_left_ = 8) :
     face (face_),
     glyphs (glyphs_),
     recurse_func (__null),
     nesting_level_left (nesting_level_left_),
     debug_depth (0) {}

  void set_recurse_func (recurse_func_t func) { recurse_func = func; }
};
# 105 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
struct hb_would_apply_context_t
{
  inline const char *get_name (void) { return "WOULD_APPLY"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef bool return_t;
  template <typename T>
  inline return_t dispatch (const T &obj) { return obj.would_apply (this); }
  static return_t default_return_value (void) { return false; }
  bool stop_sublookup_iteration (return_t r) const { return r; }

  hb_face_t *face;
  const hb_codepoint_t *glyphs;
  unsigned int len;
  bool zero_context;
  unsigned int debug_depth;

  hb_would_apply_context_t (hb_face_t *face_,
       const hb_codepoint_t *glyphs_,
       unsigned int len_,
       bool zero_context_) :
         face (face_),
         glyphs (glyphs_),
         len (len_),
         zero_context (zero_context_),
         debug_depth (0) {}
};
# 143 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
struct hb_collect_glyphs_context_t
{
  inline const char *get_name (void) { return "COLLECT_GLYPHS"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef hb_void_t return_t;
  typedef return_t (*recurse_func_t) (hb_collect_glyphs_context_t *c, unsigned int lookup_index);
  template <typename T>
  inline return_t dispatch (const T &obj) { obj.collect_glyphs (this); return (* (const _hb_void_t *) __null); }
  static return_t default_return_value (void) { return (* (const _hb_void_t *) __null); }
  bool stop_sublookup_iteration (return_t r __attribute__((unused))) const { return false; }
  return_t recurse (unsigned int lookup_index)
  {
    if ((nesting_level_left == 0 || !recurse_func))
      return default_return_value ();
# 168 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
    if (output == hb_set_get_empty ())
      return (* (const _hb_void_t *) __null);


    if (recursed_lookups.has (lookup_index))
      return (* (const _hb_void_t *) __null);

    hb_set_t *old_before = before;
    hb_set_t *old_input = input;
    hb_set_t *old_after = after;
    before = input = after = hb_set_get_empty ();

    nesting_level_left--;
    recurse_func (this, lookup_index);
    nesting_level_left++;

    before = old_before;
    input = old_input;
    after = old_after;

    recursed_lookups.add (lookup_index);

    return (* (const _hb_void_t *) __null);
  }

  hb_face_t *face;
  hb_set_t *before;
  hb_set_t *input;
  hb_set_t *after;
  hb_set_t *output;
  recurse_func_t recurse_func;
  hb_set_t recursed_lookups;
  unsigned int nesting_level_left;
  unsigned int debug_depth;

  hb_collect_glyphs_context_t (hb_face_t *face_,
          hb_set_t *glyphs_before,
          hb_set_t *glyphs_input,
          hb_set_t *glyphs_after,
          hb_set_t *glyphs_output,
          unsigned int nesting_level_left_ = 8) :
         face (face_),
         before (glyphs_before ? glyphs_before : hb_set_get_empty ()),
         input (glyphs_input ? glyphs_input : hb_set_get_empty ()),
         after (glyphs_after ? glyphs_after : hb_set_get_empty ()),
         output (glyphs_output ? glyphs_output : hb_set_get_empty ()),
         recurse_func (__null),
         recursed_lookups (),
         nesting_level_left (nesting_level_left_),
         debug_depth (0)
  {
    recursed_lookups.init ();
  }
  ~hb_collect_glyphs_context_t (void)
  {
    recursed_lookups.fini ();
  }

  void set_recurse_func (recurse_func_t func) { recurse_func = func; }
};







struct hb_get_coverage_context_t
{
  inline const char *get_name (void) { return "GET_COVERAGE"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef const Coverage &return_t;
  template <typename T>
  inline return_t dispatch (const T &obj) { return obj.get_coverage (); }
  static return_t default_return_value (void) { return Null<Coverage>(); }

  hb_get_coverage_context_t (void) :
       debug_depth (0) {}

  unsigned int debug_depth;
};
# 261 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
struct hb_apply_context_t
{
  inline const char *get_name (void) { return "APPLY"; }
  static const unsigned int max_debug_depth = (0 +0);
  typedef bool return_t;
  typedef return_t (*recurse_func_t) (hb_apply_context_t *c, unsigned int lookup_index);
  template <typename T>
  inline return_t dispatch (const T &obj) { return obj.apply (this); }
  static return_t default_return_value (void) { return false; }
  bool stop_sublookup_iteration (return_t r) const { return r; }
  return_t recurse (unsigned int lookup_index)
  {
    if ((nesting_level_left == 0 || !recurse_func))
      return default_return_value ();

    nesting_level_left--;
    bool ret = recurse_func (this, lookup_index);
    nesting_level_left++;
    return ret;
  }

  unsigned int table_index;
  hb_font_t *font;
  hb_face_t *face;
  hb_buffer_t *buffer;
  hb_direction_t direction;
  hb_mask_t lookup_mask;
  bool auto_zwj;
  recurse_func_t recurse_func;
  unsigned int nesting_level_left;
  unsigned int lookup_props;
  const GDEF &gdef;
  bool has_glyph_classes;
  unsigned int debug_depth;


  hb_apply_context_t (unsigned int table_index_,
        hb_font_t *font_,
        hb_buffer_t *buffer_) :
   table_index (table_index_),
   font (font_), face (font->face), buffer (buffer_),
   direction (buffer_->props.direction),
   lookup_mask (1),
   auto_zwj (true),
   recurse_func (__null),
   nesting_level_left (8),
   lookup_props (0),
   gdef (*((hb_ot_layout_t *) face->shaper_data.ot)->gdef),
   has_glyph_classes (gdef.has_glyph_classes ()),
   debug_depth (0) {}

  inline void set_lookup_mask (hb_mask_t mask) { lookup_mask = mask; }
  inline void set_auto_zwj (bool auto_zwj_) { auto_zwj = auto_zwj_; }
  inline void set_recurse_func (recurse_func_t func) { recurse_func = func; }
  inline void set_lookup_props (unsigned int lookup_props_) { lookup_props = lookup_props_; }
  inline void set_lookup (const Lookup &l) { lookup_props = l.get_props (); }

  struct matcher_t
  {
    inline matcher_t (void) :
      lookup_props (0),
      ignore_zwnj (false),
      ignore_zwj (false),
      mask (-1),

      syllable (0),

      match_func (__null),
      match_data (__null) {};

    typedef bool (*match_func_t) (hb_codepoint_t glyph_id, const USHORT &value, const void *data);

    inline void set_ignore_zwnj (bool ignore_zwnj_) { ignore_zwnj = ignore_zwnj_; }
    inline void set_ignore_zwj (bool ignore_zwj_) { ignore_zwj = ignore_zwj_; }
    inline void set_lookup_props (unsigned int lookup_props_) { lookup_props = lookup_props_; }
    inline void set_mask (hb_mask_t mask_) { mask = mask_; }
    inline void set_syllable (uint8_t syllable_) { syllable = syllable_; }
    inline void set_match_func (match_func_t match_func_,
    const void *match_data_)
    { match_func = match_func_; match_data = match_data_; }

    enum may_match_t {
      MATCH_NO,
      MATCH_YES,
      MATCH_MAYBE
    };

    inline may_match_t may_match (const hb_glyph_info_t &info,
      const USHORT *glyph_data) const
    {
      if (!(info.mask & mask) ||
   (syllable && syllable != info.var1.u8[3]))
 return MATCH_NO;

      if (match_func)
        return match_func (info.codepoint, *glyph_data, match_data) ? MATCH_YES : MATCH_NO;

      return MATCH_MAYBE;
    }

    enum may_skip_t {
      SKIP_NO,
      SKIP_YES,
      SKIP_MAYBE
    };

    inline may_skip_t
    may_skip (const hb_apply_context_t *c,
       const hb_glyph_info_t &info) const
    {
      if (!c->check_glyph_property (&info, lookup_props))
 return SKIP_YES;

      if ((_hb_glyph_info_is_default_ignorable (&info) && (ignore_zwnj || !_hb_glyph_info_is_zwnj (&info)) && (ignore_zwj || !_hb_glyph_info_is_zwj (&info)) && !_hb_glyph_info_ligated (&info))


                                      )
 return SKIP_MAYBE;

      return SKIP_NO;
    }

    protected:
    unsigned int lookup_props;
    bool ignore_zwnj;
    bool ignore_zwj;
    hb_mask_t mask;
    uint8_t syllable;
    match_func_t match_func;
    const void *match_data;
  };

  struct skipping_forward_iterator_t
  {
    inline skipping_forward_iterator_t (hb_apply_context_t *c_,
     unsigned int start_index_,
     unsigned int num_items_,
     bool context_match = false) :
      idx (start_index_),
      c (c_),
      match_glyph_data (__null),
      num_items (num_items_),
      end (c->buffer->len)
    {
      matcher.set_lookup_props (c->lookup_props);

      matcher.set_ignore_zwnj (context_match || c->table_index == 1);

      matcher.set_ignore_zwj (context_match || c->table_index == 1 || c->auto_zwj);
      if (!context_match)
 matcher.set_mask (c->lookup_mask);
      matcher.set_syllable (start_index_ == c->buffer->idx ? c->buffer->cur().var1.u8[3] : 0);
    }
    inline void set_lookup_props (unsigned int lookup_props) { matcher.set_lookup_props (lookup_props); }
    inline void set_syllable (unsigned int syllable) { matcher.set_syllable (syllable); }
    inline void set_match_func (matcher_t::match_func_t match_func,
    const void *match_data,
    const USHORT glyph_data[])
    {
      matcher.set_match_func (match_func, match_data);
      match_glyph_data = glyph_data;
    }

    inline bool has_no_chance (void) const { return (num_items && idx + num_items >= end); }
    inline void reject (void) { num_items++; match_glyph_data--; }
    inline bool next (void)
    {
      ((num_items > 0) ? static_cast<void> (0) : __assert_fail ("num_items > 0", "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh", 428, __PRETTY_FUNCTION__));
      while (!has_no_chance ())
      {
 idx++;
 const hb_glyph_info_t &info = c->buffer->info[idx];

 matcher_t::may_skip_t skip = matcher.may_skip (c, info);
 if ((skip == matcher_t::SKIP_YES))
   continue;

 matcher_t::may_match_t match = matcher.may_match (info, match_glyph_data);
 if (match == matcher_t::MATCH_YES ||
     (match == matcher_t::MATCH_MAYBE &&
      skip == matcher_t::SKIP_NO))
 {
   num_items--;
   match_glyph_data++;
   return true;
 }

 if (skip == matcher_t::SKIP_NO)
   return false;
      }
      return false;
    }

    unsigned int idx;
    protected:
    hb_apply_context_t *c;
    matcher_t matcher;
    const USHORT *match_glyph_data;

    unsigned int num_items;
    unsigned int end;
  };

  struct skipping_backward_iterator_t
  {
    inline skipping_backward_iterator_t (hb_apply_context_t *c_,
      unsigned int start_index_,
      unsigned int num_items_,
      bool context_match = false) :
       idx (start_index_),
       c (c_),
       match_glyph_data (__null),
       num_items (num_items_)
    {
      matcher.set_lookup_props (c->lookup_props);

      matcher.set_ignore_zwnj (context_match || c->table_index == 1);

      matcher.set_ignore_zwj (context_match || c->table_index == 1 || c->auto_zwj);
      if (!context_match)
 matcher.set_mask (c->lookup_mask);
      matcher.set_syllable (start_index_ == c->buffer->idx ? c->buffer->cur().var1.u8[3] : 0);
    }
    inline void set_lookup_props (unsigned int lookup_props) { matcher.set_lookup_props (lookup_props); }
    inline void set_syllable (unsigned int syllable) { matcher.set_syllable (syllable); }
    inline void set_match_func (matcher_t::match_func_t match_func,
    const void *match_data,
    const USHORT glyph_data[])
    {
      matcher.set_match_func (match_func, match_data);
      match_glyph_data = glyph_data;
    }

    inline bool has_no_chance (void) const { return (idx < num_items); }
    inline void reject (void) { num_items++; }
    inline bool prev (void)
    {
      ((num_items > 0) ? static_cast<void> (0) : __assert_fail ("num_items > 0", "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh", 498, __PRETTY_FUNCTION__));
      while (!has_no_chance ())
      {
 idx--;
 const hb_glyph_info_t &info = c->buffer->out_info[idx];

 matcher_t::may_skip_t skip = matcher.may_skip (c, info);
 if ((skip == matcher_t::SKIP_YES))
   continue;

 matcher_t::may_match_t match = matcher.may_match (info, match_glyph_data);
 if (match == matcher_t::MATCH_YES ||
     (match == matcher_t::MATCH_MAYBE &&
      skip == matcher_t::SKIP_NO))
 {
   num_items--;
   match_glyph_data++;
   return true;
 }

 if (skip == matcher_t::SKIP_NO)
   return false;
      }
      return false;
    }

    unsigned int idx;
    protected:
    hb_apply_context_t *c;
    matcher_t matcher;
    const USHORT *match_glyph_data;

    unsigned int num_items;
  };

  inline bool
  match_properties_mark (hb_codepoint_t glyph,
    unsigned int glyph_props,
    unsigned int lookup_props) const
  {



    if (lookup_props & LookupFlag::UseMarkFilteringSet)
      return gdef.mark_set_covers (lookup_props >> 16, glyph);





    if (lookup_props & LookupFlag::MarkAttachmentType)
      return (lookup_props & LookupFlag::MarkAttachmentType) == (glyph_props & LookupFlag::MarkAttachmentType);

    return true;
  }

  inline bool
  check_glyph_property (const hb_glyph_info_t *info,
   unsigned int lookup_props) const
  {
    hb_codepoint_t glyph = info->codepoint;
    unsigned int glyph_props = _hb_glyph_info_get_glyph_props (info);




    if (glyph_props & lookup_props & LookupFlag::IgnoreFlags)
      return false;

    if ((glyph_props & HB_OT_LAYOUT_GLYPH_PROPS_MARK))
      return match_properties_mark (glyph, glyph_props, lookup_props);

    return true;
  }

  inline void _set_glyph_props (hb_codepoint_t glyph_index,
     unsigned int class_guess = 0,
     bool ligature = false,
     bool component = false) const
  {
    unsigned int add_in = _hb_glyph_info_get_glyph_props (&buffer->cur()) &
     HB_OT_LAYOUT_GLYPH_PROPS_PRESERVE;
    add_in |= HB_OT_LAYOUT_GLYPH_PROPS_SUBSTITUTED;
    if (ligature)
    {
      add_in |= HB_OT_LAYOUT_GLYPH_PROPS_LIGATED;






      add_in &= ~HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED;
    }
    if (component)
      add_in |= HB_OT_LAYOUT_GLYPH_PROPS_MULTIPLIED;
    if ((has_glyph_classes))
      _hb_glyph_info_set_glyph_props (&buffer->cur(), add_in | gdef.get_glyph_props (glyph_index));
    else if (class_guess)
      _hb_glyph_info_set_glyph_props (&buffer->cur(), add_in | class_guess);
  }

  inline void replace_glyph (hb_codepoint_t glyph_index) const
  {
    _set_glyph_props (glyph_index);
    buffer->replace_glyph (glyph_index);
  }
  inline void replace_glyph_inplace (hb_codepoint_t glyph_index) const
  {
    _set_glyph_props (glyph_index);
    buffer->cur().codepoint = glyph_index;
  }
  inline void replace_glyph_with_ligature (hb_codepoint_t glyph_index,
        unsigned int class_guess) const
  {
    _set_glyph_props (glyph_index, class_guess, true);
    buffer->replace_glyph (glyph_index);
  }
  inline void output_glyph_for_component (hb_codepoint_t glyph_index,
       unsigned int class_guess) const
  {
    _set_glyph_props (glyph_index, class_guess, false, true);
    buffer->output_glyph (glyph_index);
  }
};



typedef bool (*intersects_func_t) (hb_set_t *glyphs, const USHORT &value, const void *data);
typedef void (*collect_glyphs_func_t) (hb_set_t *glyphs, const USHORT &value, const void *data);
typedef bool (*match_func_t) (hb_codepoint_t glyph_id, const USHORT &value, const void *data);

struct ContextClosureFuncs
{
  intersects_func_t intersects;
};
struct ContextCollectGlyphsFuncs
{
  collect_glyphs_func_t collect;
};
struct ContextApplyFuncs
{
  match_func_t match;
};


static inline bool intersects_glyph (hb_set_t *glyphs, const USHORT &value, const void *data __attribute__((unused)))
{
  return glyphs->has (value);
}
static inline bool intersects_class (hb_set_t *glyphs, const USHORT &value, const void *data)
{
  const ClassDef &class_def = *reinterpret_cast<const ClassDef *>(data);
  return class_def.intersects_class (glyphs, value);
}
static inline bool intersects_coverage (hb_set_t *glyphs, const USHORT &value, const void *data)
{
  const OffsetTo<Coverage> &coverage = (const OffsetTo<Coverage>&)value;
  return (data+coverage).intersects (glyphs);
}

static inline bool intersects_array (hb_closure_context_t *c,
         unsigned int count,
         const USHORT values[],
         intersects_func_t intersects_func,
         const void *intersects_data)
{
  for (unsigned int i = 0; i < count; i++)
    if ((!intersects_func (c->glyphs, values[i], intersects_data)))
      return false;
  return true;
}


static inline void collect_glyph (hb_set_t *glyphs, const USHORT &value, const void *data __attribute__((unused)))
{
  glyphs->add (value);
}
static inline void collect_class (hb_set_t *glyphs, const USHORT &value, const void *data)
{
  const ClassDef &class_def = *reinterpret_cast<const ClassDef *>(data);
  class_def.add_class (glyphs, value);
}
static inline void collect_coverage (hb_set_t *glyphs, const USHORT &value, const void *data)
{
  const OffsetTo<Coverage> &coverage = (const OffsetTo<Coverage>&)value;
  (data+coverage).add_coverage (glyphs);
}
static inline void collect_array (hb_collect_glyphs_context_t *c __attribute__((unused)),
      hb_set_t *glyphs,
      unsigned int count,
      const USHORT values[],
      collect_glyphs_func_t collect_func,
      const void *collect_data)
{
  for (unsigned int i = 0; i < count; i++)
    collect_func (glyphs, values[i], collect_data);
}


static inline bool match_glyph (hb_codepoint_t glyph_id, const USHORT &value, const void *data __attribute__((unused)))
{
  return glyph_id == value;
}
static inline bool match_class (hb_codepoint_t glyph_id, const USHORT &value, const void *data)
{
  const ClassDef &class_def = *reinterpret_cast<const ClassDef *>(data);
  return class_def.get_class (glyph_id) == value;
}
static inline bool match_coverage (hb_codepoint_t glyph_id, const USHORT &value, const void *data)
{
  const OffsetTo<Coverage> &coverage = (const OffsetTo<Coverage>&)value;
  return (data+coverage).get_coverage (glyph_id) != ((unsigned int) -1);
}

static inline bool would_match_input (hb_would_apply_context_t *c,
          unsigned int count,
          const USHORT input[],
          match_func_t match_func,
          const void *match_data)
{
  if (count != c->len)
    return false;

  for (unsigned int i = 1; i < count; i++)
    if ((!match_func (c->glyphs[i], input[i - 1], match_data)))
      return false;

  return true;
}
static inline bool match_input (hb_apply_context_t *c,
    unsigned int count,
    const USHORT input[],
    match_func_t match_func,
    const void *match_data,
    unsigned int *end_offset,
    unsigned int match_positions[64],
    bool *p_is_mark_ligature = __null,
    unsigned int *p_total_component_count = __null)
{
  hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), __null, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;

  if ((count > 64)) trace.ret (false, 740);

  hb_buffer_t *buffer = c->buffer;

  hb_apply_context_t::skipping_forward_iterator_t skippy_iter (c, buffer->idx, count - 1);
  skippy_iter.set_match_func (match_func, match_data, input);
  if (skippy_iter.has_no_chance ()) return trace.ret (false, 746);
# 766 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
  bool is_mark_ligature = _hb_glyph_info_is_mark (&buffer->cur());

  unsigned int total_component_count = 0;
  total_component_count += _hb_glyph_info_get_lig_num_comps (&buffer->cur());

  unsigned int first_lig_id = _hb_glyph_info_get_lig_id (&buffer->cur());
  unsigned int first_lig_comp = _hb_glyph_info_get_lig_comp (&buffer->cur());

  match_positions[0] = buffer->idx;
  for (unsigned int i = 1; i < count; i++)
  {
    if (!skippy_iter.next ()) return trace.ret (false, 777);

    match_positions[i] = skippy_iter.idx;

    unsigned int this_lig_id = _hb_glyph_info_get_lig_id (&buffer->info[skippy_iter.idx]);
    unsigned int this_lig_comp = _hb_glyph_info_get_lig_comp (&buffer->info[skippy_iter.idx]);

    if (first_lig_id && first_lig_comp) {



      if (first_lig_id != this_lig_id || first_lig_comp != this_lig_comp)
 return trace.ret (false, 789);
    } else {



      if (this_lig_id && this_lig_comp && (this_lig_id != first_lig_id))
 return trace.ret (false, 795);
    }

    is_mark_ligature = is_mark_ligature && _hb_glyph_info_is_mark (&buffer->info[skippy_iter.idx]);
    total_component_count += _hb_glyph_info_get_lig_num_comps (&buffer->info[skippy_iter.idx]);
  }

  *end_offset = skippy_iter.idx - buffer->idx + 1;

  if (p_is_mark_ligature)
    *p_is_mark_ligature = is_mark_ligature;

  if (p_total_component_count)
    *p_total_component_count = total_component_count;

  return trace.ret (true, 810);
}
static inline void ligate_input (hb_apply_context_t *c,
     unsigned int count,
     unsigned int match_positions[64],
     unsigned int match_length,
     hb_codepoint_t lig_glyph,
     bool is_mark_ligature,
     unsigned int total_component_count)
{
  hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), __null, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;

  hb_buffer_t *buffer = c->buffer;

  buffer->merge_clusters (buffer->idx, buffer->idx + match_length);
# 854 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
  unsigned int klass = is_mark_ligature ? 0 : HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE;
  unsigned int lig_id = is_mark_ligature ? 0 : _hb_allocate_lig_id (buffer);
  unsigned int last_lig_id = _hb_glyph_info_get_lig_id (&buffer->cur());
  unsigned int last_num_components = _hb_glyph_info_get_lig_num_comps (&buffer->cur());
  unsigned int components_so_far = last_num_components;

  if (!is_mark_ligature)
  {
    _hb_glyph_info_set_lig_props_for_ligature (&buffer->cur(), lig_id, total_component_count);
    if (_hb_glyph_info_get_general_category (&buffer->cur()) == HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK)
    {
      _hb_glyph_info_set_general_category (&buffer->cur(), HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER);
      _hb_glyph_info_set_modified_combining_class (&buffer->cur(), 0);
    }
  }
  c->replace_glyph_with_ligature (lig_glyph, klass);

  for (unsigned int i = 1; i < count; i++)
  {
    while (buffer->idx < match_positions[i])
    {
      if (!is_mark_ligature) {
 unsigned int new_lig_comp = components_so_far - last_num_components +
        MIN (MAX (_hb_glyph_info_get_lig_comp (&buffer->cur()), 1u), last_num_components);
 _hb_glyph_info_set_lig_props_for_mark (&buffer->cur(), lig_id, new_lig_comp);
      }
      buffer->next_glyph ();
    }

    last_lig_id = _hb_glyph_info_get_lig_id (&buffer->cur());
    last_num_components = _hb_glyph_info_get_lig_num_comps (&buffer->cur());
    components_so_far += last_num_components;


    buffer->idx++;
  }

  if (!is_mark_ligature && last_lig_id) {

    for (unsigned int i = buffer->idx; i < buffer->len; i++) {
      if (last_lig_id == _hb_glyph_info_get_lig_id (&buffer->info[i])) {
 unsigned int new_lig_comp = components_so_far - last_num_components +
        MIN (MAX (_hb_glyph_info_get_lig_comp (&buffer->info[i]), 1u), last_num_components);
 _hb_glyph_info_set_lig_props_for_mark (&buffer->info[i], lig_id, new_lig_comp);
      } else
 break;
    }
  }
  trace.ret (true, 902);
}

static inline bool match_backtrack (hb_apply_context_t *c,
        unsigned int count,
        const USHORT backtrack[],
        match_func_t match_func,
        const void *match_data)
{
  hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), __null, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;

  hb_apply_context_t::skipping_backward_iterator_t skippy_iter (c, c->buffer->backtrack_len (), count, true);
  skippy_iter.set_match_func (match_func, match_data, backtrack);
  if (skippy_iter.has_no_chance ()) return trace.ret (false, 915);

  for (unsigned int i = 0; i < count; i++)
    if (!skippy_iter.prev ())
      return trace.ret (false, 919);

  return trace.ret (true, 921);
}

static inline bool match_lookahead (hb_apply_context_t *c,
        unsigned int count,
        const USHORT lookahead[],
        match_func_t match_func,
        const void *match_data,
        unsigned int offset)
{
  hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), __null, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;

  hb_apply_context_t::skipping_forward_iterator_t skippy_iter (c, c->buffer->idx + offset - 1, count, true);
  skippy_iter.set_match_func (match_func, match_data, lookahead);
  if (skippy_iter.has_no_chance ()) return trace.ret (false, 935);

  for (unsigned int i = 0; i < count; i++)
    if (!skippy_iter.next ())
      return trace.ret (false, 939);

  return trace.ret (true, 941);
}



struct LookupRecord
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 950);
  }

  USHORT sequenceIndex;

  USHORT lookupListIndex;

  public:
  inline void _instance_assertion_on_line_958 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_958_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_958; union _type__type_958_on_line_958_is_not_POD { _type_958 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};


template <typename context_t>
static inline void recurse_lookups (context_t *c,
        unsigned int lookupCount,
        const LookupRecord lookupRecord[] )
{
  for (unsigned int i = 0; i < lookupCount; i++)
    c->recurse (lookupRecord[i].lookupListIndex);
}

static inline bool apply_lookup (hb_apply_context_t *c,
     unsigned int count,
     unsigned int match_positions[64],
     unsigned int lookupCount,
     const LookupRecord lookupRecord[],
     unsigned int match_length)
{
  hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), __null, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;

  hb_buffer_t *buffer = c->buffer;
  unsigned int end;



  {
    unsigned int bl = buffer->backtrack_len ();
    end = bl + match_length;

    int delta = bl - buffer->idx;

    for (unsigned int j = 0; j < count; j++)
      match_positions[j] += delta;
  }

  for (unsigned int i = 0; i < lookupCount; i++)
  {
    unsigned int idx = lookupRecord[i].sequenceIndex;
    if (idx >= count)
      continue;

    buffer->move_to (match_positions[idx]);

    unsigned int orig_len = buffer->backtrack_len () + buffer->lookahead_len ();
    if (!c->recurse (lookupRecord[i].lookupListIndex))
      continue;

    unsigned int new_len = buffer->backtrack_len () + buffer->lookahead_len ();
    int delta = new_len - orig_len;

    if (!delta)
        continue;






    end = MAX ((int) match_positions[idx] + 1, int (end) + delta);

    unsigned int next = idx + 1;

    if (delta > 0)
    {
      if ((delta + count > 64))
 break;
    }
    else
    {

      delta = MAX (delta, (int) next - (int) count);
      next -= delta;
    }


    memmove (match_positions + next + delta, match_positions + next,
      (count - next) * sizeof (match_positions[0]));
    next += delta;
    count += delta;


    for (unsigned int j = idx + 1; j < next; j++)
      match_positions[j] = match_positions[j - 1] + 1;


    for (; next < count; next++)
      match_positions[next] += delta;
  }

  buffer->move_to (end);

  return trace.ret (true, 1051);
}





struct ContextClosureLookupContext
{
  ContextClosureFuncs funcs;
  const void *intersects_data;
};

struct ContextCollectGlyphsLookupContext
{
  ContextCollectGlyphsFuncs funcs;
  const void *collect_data;
};

struct ContextApplyLookupContext
{
  ContextApplyFuncs funcs;
  const void *match_data;
};

static inline void context_closure_lookup (hb_closure_context_t *c,
        unsigned int inputCount,
        const USHORT input[],
        unsigned int lookupCount,
        const LookupRecord lookupRecord[],
        ContextClosureLookupContext &lookup_context)
{
  if (intersects_array (c,
   inputCount ? inputCount - 1 : 0, input,
   lookup_context.funcs.intersects, lookup_context.intersects_data))
    recurse_lookups (c,
       lookupCount, lookupRecord);
}

static inline void context_collect_glyphs_lookup (hb_collect_glyphs_context_t *c,
        unsigned int inputCount,
        const USHORT input[],
        unsigned int lookupCount,
        const LookupRecord lookupRecord[],
        ContextCollectGlyphsLookupContext &lookup_context)
{
  collect_array (c, c->input,
   inputCount ? inputCount - 1 : 0, input,
   lookup_context.funcs.collect, lookup_context.collect_data);
  recurse_lookups (c,
     lookupCount, lookupRecord);
}

static inline bool context_would_apply_lookup (hb_would_apply_context_t *c,
            unsigned int inputCount,
            const USHORT input[],
            unsigned int lookupCount __attribute__((unused)),
            const LookupRecord lookupRecord[] __attribute__((unused)),
            ContextApplyLookupContext &lookup_context)
{
  return would_match_input (c,
       inputCount, input,
       lookup_context.funcs.match, lookup_context.match_data);
}
static inline bool context_apply_lookup (hb_apply_context_t *c,
      unsigned int inputCount,
      const USHORT input[],
      unsigned int lookupCount,
      const LookupRecord lookupRecord[],
      ContextApplyLookupContext &lookup_context)
{
  unsigned int match_length = 0;
  unsigned int match_positions[64];
  return match_input (c,
        inputCount, input,
        lookup_context.funcs.match, lookup_context.match_data,
        &match_length, match_positions)
      && apply_lookup (c,
         inputCount, match_positions,
         lookupCount, lookupRecord,
         match_length);
}

struct Rule
{
  inline void closure (hb_closure_context_t *c, ContextClosureLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (inputZ, inputZ[0].static_size * (inputCount ? inputCount - 1 : 0));
    context_closure_lookup (c,
       inputCount, inputZ,
       lookupCount, lookupRecord,
       lookup_context);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c, ContextCollectGlyphsLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (inputZ, inputZ[0].static_size * (inputCount ? inputCount - 1 : 0));
    context_collect_glyphs_lookup (c,
       inputCount, inputZ,
       lookupCount, lookupRecord,
       lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c, ContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (inputZ, inputZ[0].static_size * (inputCount ? inputCount - 1 : 0));
    return trace.ret (context_would_apply_lookup (c, inputCount, inputZ, lookupCount, lookupRecord, lookup_context), 1160);
  }

  inline bool apply (hb_apply_context_t *c, ContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (inputZ, inputZ[0].static_size * (inputCount ? inputCount - 1 : 0));
    return trace.ret (context_apply_lookup (c, inputCount, inputZ, lookupCount, lookupRecord, lookup_context), 1167);
  }

  public:
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return inputCount.sanitize (c)
 && lookupCount.sanitize (c)
 && c->check_range (inputZ,
      inputZ[0].static_size * inputCount
      + lookupRecordX[0].static_size * lookupCount);
  }

  protected:
  USHORT inputCount;


  USHORT lookupCount;
  USHORT inputZ[1];

  LookupRecord lookupRecordX[1];

  public:
  inline void _instance_assertion_on_line_1190 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1190_failed[(((sizeof (*this) == (4) + sizeof (this->inputZ[0]) + sizeof (this->lookupRecordX[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1190; union _type__type_1190_on_line_1190_is_not_POD { _type_1190 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1190 (void) const { (void) inputZ[0].static_size; (void) lookupRecordX[0].static_size; } static const unsigned int min_size = (4);
};

struct RuleSet
{
  inline void closure (hb_closure_context_t *c, ContextClosureLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
      (this+rule[i]).closure (c, lookup_context);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c, ContextCollectGlyphsLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
      (this+rule[i]).collect_glyphs (c, lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c, ContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
    {
      if ((this+rule[i]).would_apply (c, lookup_context))
        return trace.ret (true, 1218);
    }
    return trace.ret (false, 1220);
  }

  inline bool apply (hb_apply_context_t *c, ContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
    {
      if ((this+rule[i]).apply (c, lookup_context))
        return trace.ret (true, 1230);
    }
    return trace.ret (false, 1232);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (rule.sanitize (c, this), 1237);
  }

  protected:
  OffsetArrayOf<Rule>
  rule;

  public:
  inline void _instance_assertion_on_line_1245 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1245_failed[(((sizeof (*this) == (2) + sizeof (rule[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1245; union _type__type_1245_on_line_1245_is_not_POD { _type_1245 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1245 (void) const { (void) rule[0].static_size; } static const unsigned int min_size = (2);
};


struct ContextFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;

    const Coverage &cov = (this+coverage);

    struct ContextClosureLookupContext lookup_context = {
      {intersects_glyph},
      __null
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      if (cov.intersects_coverage (c->glyphs, i)) {
 const RuleSet &rule_set = this+ruleSet[i];
 rule_set.closure (c, lookup_context);
      }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);

    struct ContextCollectGlyphsLookupContext lookup_context = {
      {collect_glyph},
      __null
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      (this+ruleSet[i]).collect_glyphs (c, lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;

    const RuleSet &rule_set = this+ruleSet[(this+coverage).get_coverage (c->glyphs[0])];
    struct ContextApplyLookupContext lookup_context = {
      {match_glyph},
      __null
    };
    return trace.ret (rule_set.would_apply (c, lookup_context), 1294);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1)))
      return trace.ret (false, 1307);

    const RuleSet &rule_set = this+ruleSet[index];
    struct ContextApplyLookupContext lookup_context = {
      {match_glyph},
      __null
    };
    return trace.ret (rule_set.apply (c, lookup_context), 1314);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && ruleSet.sanitize (c, this), 1319);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<RuleSet>
  ruleSet;

  public:
  inline void _instance_assertion_on_line_1331 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1331_failed[(((sizeof (*this) == (6) + sizeof (ruleSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1331; union _type__type_1331_on_line_1331_is_not_POD { _type_1331 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1331 (void) const { (void) ruleSet[0].static_size; } static const unsigned int min_size = (6);
};


struct ContextFormat2
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!(this+coverage).intersects (c->glyphs))
      return;

    const ClassDef &class_def = this+classDef;

    struct ContextClosureLookupContext lookup_context = {
      {intersects_class},
      &class_def
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      if (class_def.intersects_class (c->glyphs, i)) {
 const RuleSet &rule_set = this+ruleSet[i];
 rule_set.closure (c, lookup_context);
      }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);

    const ClassDef &class_def = this+classDef;
    struct ContextCollectGlyphsLookupContext lookup_context = {
      {collect_class},
      &class_def
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      (this+ruleSet[i]).collect_glyphs (c, lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;

    const ClassDef &class_def = this+classDef;
    unsigned int index = class_def.get_class (c->glyphs[0]);
    const RuleSet &rule_set = this+ruleSet[index];
    struct ContextApplyLookupContext lookup_context = {
      {match_class},
      &class_def
    };
    return trace.ret (rule_set.would_apply (c, lookup_context), 1385);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 1397);

    const ClassDef &class_def = this+classDef;
    index = class_def.get_class (c->buffer->cur().codepoint);
    const RuleSet &rule_set = this+ruleSet[index];
    struct ContextApplyLookupContext lookup_context = {
      {match_class},
      &class_def
    };
    return trace.ret (rule_set.apply (c, lookup_context), 1406);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && classDef.sanitize (c, this) && ruleSet.sanitize (c, this), 1411);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetTo<ClassDef>
  classDef;

  OffsetArrayOf<RuleSet>
  ruleSet;

  public:
  inline void _instance_assertion_on_line_1426 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1426_failed[(((sizeof (*this) == (8) + sizeof (ruleSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1426; union _type__type_1426_on_line_1426_is_not_POD { _type_1426 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1426 (void) const { (void) ruleSet[0].static_size; } static const unsigned int min_size = (8);
};


struct ContextFormat3
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!(this+coverageZ[0]).intersects (c->glyphs))
      return;

    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (coverageZ, coverageZ[0].static_size * glyphCount);
    struct ContextClosureLookupContext lookup_context = {
      {intersects_coverage},
      this
    };
    context_closure_lookup (c,
       glyphCount, (const USHORT *) (coverageZ + 1),
       lookupCount, lookupRecord,
       lookup_context);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverageZ[0]).add_coverage (c->input);

    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (coverageZ, coverageZ[0].static_size * glyphCount);
    struct ContextCollectGlyphsLookupContext lookup_context = {
      {collect_coverage},
      this
    };

    context_collect_glyphs_lookup (c,
       glyphCount, (const USHORT *) (coverageZ + 1),
       lookupCount, lookupRecord,
       lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;

    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (coverageZ, coverageZ[0].static_size * glyphCount);
    struct ContextApplyLookupContext lookup_context = {
      {match_coverage},
      this
    };
    return trace.ret (context_would_apply_lookup (c, glyphCount, (const USHORT *) (coverageZ + 1), lookupCount, lookupRecord, lookup_context), 1475);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverageZ[0];
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int index = (this+coverageZ[0]).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 1487);

    const LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (coverageZ, coverageZ[0].static_size * glyphCount);
    struct ContextApplyLookupContext lookup_context = {
      {match_coverage},
      this
    };
    return trace.ret (context_apply_lookup (c, glyphCount, (const USHORT *) (coverageZ + 1), lookupCount, lookupRecord, lookup_context), 1494);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!c->check_struct (this)) return trace.ret (false, 1499);
    unsigned int count = glyphCount;
    if (!count) return trace.ret (false, 1501);
    if (!c->check_array (coverageZ, coverageZ[0].static_size, count)) return trace.ret (false, 1502);
    for (unsigned int i = 0; i < count; i++)
      if (!coverageZ[i].sanitize (c, this)) return trace.ret (false, 1504);
    LookupRecord *lookupRecord = &StructAtOffset<LookupRecord> (coverageZ, coverageZ[0].static_size * count);
    return trace.ret (c->check_array (lookupRecord, lookupRecord[0].static_size, lookupCount), 1506);
  }

  protected:
  USHORT format;
  USHORT glyphCount;

  USHORT lookupCount;
  OffsetTo<Coverage>
  coverageZ[1];

  LookupRecord lookupRecordX[1];

  public:
  inline void _instance_assertion_on_line_1520 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1520_failed[(((sizeof (*this) == (6) + sizeof (this->coverageZ[0]) + sizeof (this->lookupRecordX[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1520; union _type__type_1520_on_line_1520_is_not_POD { _type_1520 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1520 (void) const { (void) coverageZ[0].static_size; (void) lookupRecordX[0].static_size; } static const unsigned int min_size = (6);
};

struct Context
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 1530);
    case 2: return trace.ret (c->dispatch (u.format2), 1531);
    case 3: return trace.ret (c->dispatch (u.format3), 1532);
    default:return trace.ret (c->default_return_value (), 1533);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1539);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1541);
    case 2: return trace.ret (u.format2.sanitize (c), 1542);
    case 3: return trace.ret (u.format3.sanitize (c), 1543);
    default:return trace.ret (true, 1544);
    }
  }

  protected:
  union {
  USHORT format;
  ContextFormat1 format1;
  ContextFormat2 format2;
  ContextFormat3 format3;
  } u;
};




struct ChainContextClosureLookupContext
{
  ContextClosureFuncs funcs;
  const void *intersects_data[3];
};

struct ChainContextCollectGlyphsLookupContext
{
  ContextCollectGlyphsFuncs funcs;
  const void *collect_data[3];
};

struct ChainContextApplyLookupContext
{
  ContextApplyFuncs funcs;
  const void *match_data[3];
};

static inline void chain_context_closure_lookup (hb_closure_context_t *c,
       unsigned int backtrackCount,
       const USHORT backtrack[],
       unsigned int inputCount,
       const USHORT input[],
       unsigned int lookaheadCount,
       const USHORT lookahead[],
       unsigned int lookupCount,
       const LookupRecord lookupRecord[],
       ChainContextClosureLookupContext &lookup_context)
{
  if (intersects_array (c,
   backtrackCount, backtrack,
   lookup_context.funcs.intersects, lookup_context.intersects_data[0])
   && intersects_array (c,
   inputCount ? inputCount - 1 : 0, input,
   lookup_context.funcs.intersects, lookup_context.intersects_data[1])
   && intersects_array (c,
         lookaheadCount, lookahead,
         lookup_context.funcs.intersects, lookup_context.intersects_data[2]))
    recurse_lookups (c,
       lookupCount, lookupRecord);
}

static inline void chain_context_collect_glyphs_lookup (hb_collect_glyphs_context_t *c,
              unsigned int backtrackCount,
              const USHORT backtrack[],
              unsigned int inputCount,
              const USHORT input[],
              unsigned int lookaheadCount,
              const USHORT lookahead[],
              unsigned int lookupCount,
              const LookupRecord lookupRecord[],
              ChainContextCollectGlyphsLookupContext &lookup_context)
{
  collect_array (c, c->before,
   backtrackCount, backtrack,
   lookup_context.funcs.collect, lookup_context.collect_data[0]);
  collect_array (c, c->input,
   inputCount ? inputCount - 1 : 0, input,
   lookup_context.funcs.collect, lookup_context.collect_data[1]);
  collect_array (c, c->after,
   lookaheadCount, lookahead,
   lookup_context.funcs.collect, lookup_context.collect_data[2]);
  recurse_lookups (c,
     lookupCount, lookupRecord);
}

static inline bool chain_context_would_apply_lookup (hb_would_apply_context_t *c,
           unsigned int backtrackCount,
           const USHORT backtrack[] __attribute__((unused)),
           unsigned int inputCount,
           const USHORT input[],
           unsigned int lookaheadCount,
           const USHORT lookahead[] __attribute__((unused)),
           unsigned int lookupCount __attribute__((unused)),
           const LookupRecord lookupRecord[] __attribute__((unused)),
           ChainContextApplyLookupContext &lookup_context)
{
  return (c->zero_context ? !backtrackCount && !lookaheadCount : true)
      && would_match_input (c,
       inputCount, input,
       lookup_context.funcs.match, lookup_context.match_data[1]);
}

static inline bool chain_context_apply_lookup (hb_apply_context_t *c,
            unsigned int backtrackCount,
            const USHORT backtrack[],
            unsigned int inputCount,
            const USHORT input[],
            unsigned int lookaheadCount,
            const USHORT lookahead[],
            unsigned int lookupCount,
            const LookupRecord lookupRecord[],
            ChainContextApplyLookupContext &lookup_context)
{
  unsigned int match_length = 0;
  unsigned int match_positions[64];
  return match_input (c,
        inputCount, input,
        lookup_context.funcs.match, lookup_context.match_data[1],
        &match_length, match_positions)
      && match_backtrack (c,
     backtrackCount, backtrack,
     lookup_context.funcs.match, lookup_context.match_data[0])
      && match_lookahead (c,
     lookaheadCount, lookahead,
     lookup_context.funcs.match, lookup_context.match_data[2],
     match_length)
      && apply_lookup (c,
         inputCount, match_positions,
         lookupCount, lookupRecord,
         match_length);
}

struct ChainRule
{
  inline void closure (hb_closure_context_t *c, ChainContextClosureLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const HeadlessArrayOf<USHORT> &input = StructAfter<HeadlessArrayOf<USHORT> > (backtrack);
    const ArrayOf<USHORT> &lookahead = StructAfter<ArrayOf<USHORT> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    chain_context_closure_lookup (c,
      backtrack.len, backtrack.array,
      input.len, input.array,
      lookahead.len, lookahead.array,
      lookup.len, lookup.array,
      lookup_context);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c, ChainContextCollectGlyphsLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const HeadlessArrayOf<USHORT> &input = StructAfter<HeadlessArrayOf<USHORT> > (backtrack);
    const ArrayOf<USHORT> &lookahead = StructAfter<ArrayOf<USHORT> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    chain_context_collect_glyphs_lookup (c,
      backtrack.len, backtrack.array,
      input.len, input.array,
      lookahead.len, lookahead.array,
      lookup.len, lookup.array,
      lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c, ChainContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    const HeadlessArrayOf<USHORT> &input = StructAfter<HeadlessArrayOf<USHORT> > (backtrack);
    const ArrayOf<USHORT> &lookahead = StructAfter<ArrayOf<USHORT> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    return trace.ret (chain_context_would_apply_lookup (c, backtrack.len, backtrack.array, input.len, input.array, lookahead.len, lookahead.array, lookup.len, lookup.array, lookup_context),



 1713
# 1709 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
           )



                                        ;
  }

  inline bool apply (hb_apply_context_t *c, ChainContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    const HeadlessArrayOf<USHORT> &input = StructAfter<HeadlessArrayOf<USHORT> > (backtrack);
    const ArrayOf<USHORT> &lookahead = StructAfter<ArrayOf<USHORT> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    return trace.ret (chain_context_apply_lookup (c, backtrack.len, backtrack.array, input.len, input.array, lookahead.len, lookahead.array, lookup.len, lookup.array, lookup_context),



 1726
# 1722 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
           )



                                         ;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!backtrack.sanitize (c)) return trace.ret (false, 1731);
    HeadlessArrayOf<USHORT> &input = StructAfter<HeadlessArrayOf<USHORT> > (backtrack);
    if (!input.sanitize (c)) return trace.ret (false, 1733);
    ArrayOf<USHORT> &lookahead = StructAfter<ArrayOf<USHORT> > (input);
    if (!lookahead.sanitize (c)) return trace.ret (false, 1735);
    ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    return trace.ret (lookup.sanitize (c), 1737);
  }

  protected:
  ArrayOf<USHORT>
  backtrack;


  HeadlessArrayOf<USHORT>
  inputX;

  ArrayOf<USHORT>
  lookaheadX;

  ArrayOf<LookupRecord>
  lookupX;

  public:
  inline void _instance_assertion_on_line_1755 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1755_failed[(((sizeof (*this) >= (8))))?1:-1]; do { typedef __typeof__(*this) _type_1755; union _type__type_1755_on_line_1755_is_not_POD { _type_1755 instance; }; } while (0); }; static const unsigned int min_size = (8);
};

struct ChainRuleSet
{
  inline void closure (hb_closure_context_t *c, ChainContextClosureLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
      (this+rule[i]).closure (c, lookup_context);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c, ChainContextCollectGlyphsLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
      (this+rule[i]).collect_glyphs (c, lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c, ChainContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
      if ((this+rule[i]).would_apply (c, lookup_context))
        return trace.ret (true, 1782);

    return trace.ret (false, 1784);
  }

  inline bool apply (hb_apply_context_t *c, ChainContextApplyLookupContext &lookup_context) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int num_rules = rule.len;
    for (unsigned int i = 0; i < num_rules; i++)
      if ((this+rule[i]).apply (c, lookup_context))
        return trace.ret (true, 1793);

    return trace.ret (false, 1795);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (rule.sanitize (c, this), 1800);
  }

  protected:
  OffsetArrayOf<ChainRule>
  rule;

  public:
  inline void _instance_assertion_on_line_1808 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1808_failed[(((sizeof (*this) == (2) + sizeof (rule[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1808; union _type__type_1808_on_line_1808_is_not_POD { _type_1808 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1808 (void) const { (void) rule[0].static_size; } static const unsigned int min_size = (2);
};

struct ChainContextFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const Coverage &cov = (this+coverage);

    struct ChainContextClosureLookupContext lookup_context = {
      {intersects_glyph},
      {__null, __null, __null}
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      if (cov.intersects_coverage (c->glyphs, i)) {
 const ChainRuleSet &rule_set = this+ruleSet[i];
 rule_set.closure (c, lookup_context);
      }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);

    struct ChainContextCollectGlyphsLookupContext lookup_context = {
      {collect_glyph},
      {__null, __null, __null}
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      (this+ruleSet[i]).collect_glyphs (c, lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;

    const ChainRuleSet &rule_set = this+ruleSet[(this+coverage).get_coverage (c->glyphs[0])];
    struct ChainContextApplyLookupContext lookup_context = {
      {match_glyph},
      {__null, __null, __null}
    };
    return trace.ret (rule_set.would_apply (c, lookup_context), 1855);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 1867);

    const ChainRuleSet &rule_set = this+ruleSet[index];
    struct ChainContextApplyLookupContext lookup_context = {
      {match_glyph},
      {__null, __null, __null}
    };
    return trace.ret (rule_set.apply (c, lookup_context), 1874);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && ruleSet.sanitize (c, this), 1879);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<ChainRuleSet>
  ruleSet;

  public:
  inline void _instance_assertion_on_line_1891 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1891_failed[(((sizeof (*this) == (6) + sizeof (ruleSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_1891; union _type__type_1891_on_line_1891_is_not_POD { _type_1891 instance; }; } while (0); }; inline void _compiles_assertion_on_line_1891 (void) const { (void) ruleSet[0].static_size; } static const unsigned int min_size = (6);
};

struct ChainContextFormat2
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!(this+coverage).intersects (c->glyphs))
      return;

    const ClassDef &backtrack_class_def = this+backtrackClassDef;
    const ClassDef &input_class_def = this+inputClassDef;
    const ClassDef &lookahead_class_def = this+lookaheadClassDef;

    struct ChainContextClosureLookupContext lookup_context = {
      {intersects_class},
      {&backtrack_class_def,
       &input_class_def,
       &lookahead_class_def}
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      if (input_class_def.intersects_class (c->glyphs, i)) {
 const ChainRuleSet &rule_set = this+ruleSet[i];
 rule_set.closure (c, lookup_context);
      }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);

    const ClassDef &backtrack_class_def = this+backtrackClassDef;
    const ClassDef &input_class_def = this+inputClassDef;
    const ClassDef &lookahead_class_def = this+lookaheadClassDef;

    struct ChainContextCollectGlyphsLookupContext lookup_context = {
      {collect_class},
      {&backtrack_class_def,
       &input_class_def,
       &lookahead_class_def}
    };

    unsigned int count = ruleSet.len;
    for (unsigned int i = 0; i < count; i++)
      (this+ruleSet[i]).collect_glyphs (c, lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;

    const ClassDef &backtrack_class_def = this+backtrackClassDef;
    const ClassDef &input_class_def = this+inputClassDef;
    const ClassDef &lookahead_class_def = this+lookaheadClassDef;

    unsigned int index = input_class_def.get_class (c->glyphs[0]);
    const ChainRuleSet &rule_set = this+ruleSet[index];
    struct ChainContextApplyLookupContext lookup_context = {
      {match_class},
      {&backtrack_class_def,
       &input_class_def,
       &lookahead_class_def}
    };
    return trace.ret (rule_set.would_apply (c, lookup_context), 1958);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 1970);

    const ClassDef &backtrack_class_def = this+backtrackClassDef;
    const ClassDef &input_class_def = this+inputClassDef;
    const ClassDef &lookahead_class_def = this+lookaheadClassDef;

    index = input_class_def.get_class (c->buffer->cur().codepoint);
    const ChainRuleSet &rule_set = this+ruleSet[index];
    struct ChainContextApplyLookupContext lookup_context = {
      {match_class},
      {&backtrack_class_def,
       &input_class_def,
       &lookahead_class_def}
    };
    return trace.ret (rule_set.apply (c, lookup_context), 1984);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && backtrackClassDef.sanitize (c, this) && inputClassDef.sanitize (c, this) && lookaheadClassDef.sanitize (c, this) && ruleSet.sanitize (c, this),

 1991
# 1989 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
           )

                               ;
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetTo<ClassDef>
  backtrackClassDef;


  OffsetTo<ClassDef>
  inputClassDef;


  OffsetTo<ClassDef>
  lookaheadClassDef;


  OffsetArrayOf<ChainRuleSet>
  ruleSet;

  public:
  inline void _instance_assertion_on_line_2015 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_2015_failed[(((sizeof (*this) == (12) + sizeof (ruleSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_2015; union _type__type_2015_on_line_2015_is_not_POD { _type_2015 instance; }; } while (0); }; inline void _compiles_assertion_on_line_2015 (void) const { (void) ruleSet[0].static_size; } static const unsigned int min_size = (12);
};

struct ChainContextFormat3
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);

    if (!(this+input[0]).intersects (c->glyphs))
      return;

    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    struct ChainContextClosureLookupContext lookup_context = {
      {intersects_coverage},
      {this, this, this}
    };
    chain_context_closure_lookup (c,
      backtrack.len, (const USHORT *) backtrack.array,
      input.len, (const USHORT *) input.array + 1,
      lookahead.len, (const USHORT *) lookahead.array,
      lookup.len, lookup.array,
      lookup_context);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);

    (this+input[0]).add_coverage (c->input);

    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    struct ChainContextCollectGlyphsLookupContext lookup_context = {
      {collect_coverage},
      {this, this, this}
    };
    chain_context_collect_glyphs_lookup (c,
      backtrack.len, (const USHORT *) backtrack.array,
      input.len, (const USHORT *) input.array + 1,
      lookahead.len, (const USHORT *) lookahead.array,
      lookup.len, lookup.array,
      lookup_context);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;

    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);
    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    struct ChainContextApplyLookupContext lookup_context = {
      {match_coverage},
      {this, this, this}
    };
    return trace.ret (chain_context_would_apply_lookup (c, backtrack.len, (const USHORT *) backtrack.array, input.len, (const USHORT *) input.array + 1, lookahead.len, (const USHORT *) lookahead.array, lookup.len, lookup.array, lookup_context),



 2078
# 2074 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
           )



                                                    ;
  }

  inline const Coverage &get_coverage (void) const
  {
    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);
    return this+input[0];
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);

    unsigned int index = (this+input[0]).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 2093);

    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);
    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    struct ChainContextApplyLookupContext lookup_context = {
      {match_coverage},
      {this, this, this}
    };
    return trace.ret (chain_context_apply_lookup (c, backtrack.len, (const USHORT *) backtrack.array, input.len, (const USHORT *) input.array + 1, lookahead.len, (const USHORT *) lookahead.array, lookup.len, lookup.array, lookup_context),



 2105
# 2101 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
           )



                                                     ;
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!backtrack.sanitize (c, this)) return trace.ret (false, 2110);
    OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);
    if (!input.sanitize (c, this)) return trace.ret (false, 2112);
    if (!input.len) return trace.ret (false, 2113);
    OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);
    if (!lookahead.sanitize (c, this)) return trace.ret (false, 2115);
    ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);
    return trace.ret (lookup.sanitize (c), 2117);
  }

  protected:
  USHORT format;
  OffsetArrayOf<Coverage>
  backtrack;


  OffsetArrayOf<Coverage>
  inputX ;


  OffsetArrayOf<Coverage>
  lookaheadX;


  ArrayOf<LookupRecord>
  lookupX;

  public:
  inline void _instance_assertion_on_line_2138 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_2138_failed[(((sizeof (*this) >= (10))))?1:-1]; do { typedef __typeof__(*this) _type_2138; union _type__type_2138_on_line_2138_is_not_POD { _type_2138 instance; }; } while (0); }; static const unsigned int min_size = (10);
};

struct ChainContext
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 2148);
    case 2: return trace.ret (c->dispatch (u.format2), 2149);
    case 3: return trace.ret (c->dispatch (u.format3), 2150);
    default:return trace.ret (c->default_return_value (), 2151);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 2157);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 2159);
    case 2: return trace.ret (u.format2.sanitize (c), 2160);
    case 3: return trace.ret (u.format3.sanitize (c), 2161);
    default:return trace.ret (true, 2162);
    }
  }

  protected:
  union {
  USHORT format;
  ChainContextFormat1 format1;
  ChainContextFormat2 format2;
  ChainContextFormat3 format3;
  } u;
};


struct ExtensionFormat1
{
  inline unsigned int get_type (void) const { return extensionLookupType; }
  inline unsigned int get_offset (void) const { return extensionOffset; }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 2183);
  }

  protected:
  USHORT format;
  USHORT extensionLookupType;


  ULONG extensionOffset;

  public:
  inline void _instance_assertion_on_line_2194 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_2194_failed[(((sizeof (*this) == (8))))?1:-1]; do { typedef __typeof__(*this) _type_2194; union _type__type_2194_on_line_2194_is_not_POD { _type_2194 instance; }; } while (0); }; static const unsigned int static_size = (8); static const unsigned int min_size = (8);
};

template <typename T>
struct Extension
{
  inline unsigned int get_type (void) const
  {
    switch (u.format) {
    case 1: return u.format1.get_type ();
    default:return 0;
    }
  }
  inline unsigned int get_offset (void) const
  {
    switch (u.format) {
    case 1: return u.format1.get_offset ();
    default:return 0;
    }
  }

  template <typename X>
  inline const X& get_subtable (void) const
  {
    unsigned int offset = get_offset ();
    if ((!offset)) return Null<typename T::LookupSubTable>();
    return StructAtOffset<typename T::LookupSubTable> (this, offset);
  }

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    return get_subtable<typename T::LookupSubTable> ().dispatch (c, get_type ());
  }

  inline bool sanitize_self (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 2231);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 2233);
    default:return trace.ret (true, 2234);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!sanitize_self (c)) return trace.ret (false, 2240);
    unsigned int offset = get_offset ();
    if ((!offset)) return trace.ret (true, 2242);
    return trace.ret (StructAtOffset<typename T::LookupSubTable> (this, offset).sanitize (c, get_type ()), 2243);
  }

  protected:
  union {
  USHORT format;
  ExtensionFormat1 format1;
  } u;
};






struct GSUBGPOS
{
  static const hb_tag_t GSUBTag = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B'))));
  static const hb_tag_t GPOSTag = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S'))));

  inline unsigned int get_script_count (void) const
  { return (this+scriptList).len; }
  inline const Tag& get_script_tag (unsigned int i) const
  { return (this+scriptList).get_tag (i); }
  inline unsigned int get_script_tags (unsigned int start_offset,
           unsigned int *script_count ,
           hb_tag_t *script_tags ) const
  { return (this+scriptList).get_tags (start_offset, script_count, script_tags); }
  inline const Script& get_script (unsigned int i) const
  { return (this+scriptList)[i]; }
  inline bool find_script_index (hb_tag_t tag, unsigned int *index) const
  { return (this+scriptList).find_index (tag, index); }

  inline unsigned int get_feature_count (void) const
  { return (this+featureList).len; }
  inline hb_tag_t get_feature_tag (unsigned int i) const
  { return i == Index::NOT_FOUND_INDEX ? ((hb_tag_t)((((uint8_t)(0))<<24)|(((uint8_t)(0))<<16)|(((uint8_t)(0))<<8)|((uint8_t)(0)))) : (this+featureList).get_tag (i); }
  inline unsigned int get_feature_tags (unsigned int start_offset,
     unsigned int *feature_count ,
     hb_tag_t *feature_tags ) const
  { return (this+featureList).get_tags (start_offset, feature_count, feature_tags); }
  inline const Feature& get_feature (unsigned int i) const
  { return (this+featureList)[i]; }
  inline bool find_feature_index (hb_tag_t tag, unsigned int *index) const
  { return (this+featureList).find_index (tag, index); }

  inline unsigned int get_lookup_count (void) const
  { return (this+lookupList).len; }
  inline const Lookup& get_lookup (unsigned int i) const
  { return (this+lookupList)[i]; }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (version.sanitize (c) && (version.major == 1) && scriptList.sanitize (c, this) && featureList.sanitize (c, this) && lookupList.sanitize (c, this),


 2299
# 2296 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsubgpos-private.hh"
           )


                                  ;
  }

  protected:
  FixedVersion version;

  OffsetTo<ScriptList>
  scriptList;
  OffsetTo<FeatureList>
  featureList;
  OffsetTo<LookupList>
  lookupList;
  public:
  inline void _instance_assertion_on_line_2312 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_2312_failed[(((sizeof (*this) == (10))))?1:-1]; do { typedef __typeof__(*this) _type_2312; union _type__type_2312_on_line_2312_is_not_POD { _type_2312 instance; }; } while (0); }; static const unsigned int static_size = (10); static const unsigned int min_size = (10);
};


}
# 33 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh" 2


namespace OT {


struct SingleSubstFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      hb_codepoint_t glyph_id = iter.get_glyph ();
      if (c->glyphs->has (glyph_id))
 c->glyphs->add ((glyph_id + deltaGlyphID) & 0xFFFFu);
    }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      hb_codepoint_t glyph_id = iter.get_glyph ();
      c->input->add (glyph_id);
      c->output->add ((glyph_id + deltaGlyphID) & 0xFFFFu);
    }
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    return trace.ret (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != ((unsigned int) -1), 70);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_codepoint_t glyph_id = c->buffer->cur().codepoint;
    unsigned int index = (this+coverage).get_coverage (glyph_id);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 78);



    glyph_id = (glyph_id + deltaGlyphID) & 0xFFFFu;
    c->replace_glyph (glyph_id);

    return trace.ret (true, 85);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    unsigned int num_glyphs,
    int delta)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 94);
    if ((!coverage.serialize (c, this).serialize (c, glyphs, num_glyphs))) return trace.ret (false, 95);
    deltaGlyphID.set (delta);
    return trace.ret (true, 97);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && deltaGlyphID.sanitize (c), 102);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  SHORT deltaGlyphID;

  public:
  inline void _instance_assertion_on_line_113 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_113_failed[(((sizeof (*this) == (6))))?1:-1]; do { typedef __typeof__(*this) _type_113; union _type__type_113_on_line_113_is_not_POD { _type_113 instance; }; } while (0); }; static const unsigned int static_size = (6); static const unsigned int min_size = (6);
};

struct SingleSubstFormat2
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      if (c->glyphs->has (iter.get_glyph ()))
 c->glyphs->add (substitute[iter.get_coverage ()]);
    }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      c->input->add (iter.get_glyph ());
      c->output->add (substitute[iter.get_coverage ()]);
    }
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    return trace.ret (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != ((unsigned int) -1), 146);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_codepoint_t glyph_id = c->buffer->cur().codepoint;
    unsigned int index = (this+coverage).get_coverage (glyph_id);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 154);

    if ((index >= substitute.len)) return trace.ret (false, 156);

    glyph_id = substitute[index];
    c->replace_glyph (glyph_id);

    return trace.ret (true, 161);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    Supplier<GlyphID> &substitutes,
    unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 170);
    if ((!substitute.serialize (c, substitutes, num_glyphs))) return trace.ret (false, 171);
    if ((!coverage.serialize (c, this).serialize (c, glyphs, num_glyphs))) return trace.ret (false, 172);
    return trace.ret (true, 173);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && substitute.sanitize (c), 178);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  ArrayOf<GlyphID>
  substitute;

  public:
  inline void _instance_assertion_on_line_190 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_190_failed[(((sizeof (*this) == (6) + sizeof (substitute[0]))))?1:-1]; do { typedef __typeof__(*this) _type_190; union _type__type_190_on_line_190_is_not_POD { _type_190 instance; }; } while (0); }; inline void _compiles_assertion_on_line_190 (void) const { (void) substitute[0].static_size; } static const unsigned int min_size = (6);
};

struct SingleSubst
{
  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    Supplier<GlyphID> &substitutes,
    unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (u.format))) return trace.ret (false, 201);
    unsigned int format = 2;
    int delta = 0;
    if (num_glyphs) {
      format = 1;

      delta = substitutes[0] - glyphs[0];
      for (unsigned int i = 1; i < num_glyphs; i++)
 if (delta != substitutes[i] - glyphs[i]) {
   format = 2;
   break;
 }
    }
    u.format.set (format);
    switch (u.format) {
    case 1: return trace.ret (u.format1.serialize (c, glyphs, num_glyphs, delta), 216);
    case 2: return trace.ret (u.format2.serialize (c, glyphs, substitutes, num_glyphs), 217);
    default:return trace.ret (false, 218);
    }
  }

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 227);
    case 2: return trace.ret (c->dispatch (u.format2), 228);
    default:return trace.ret (c->default_return_value (), 229);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 235);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 237);
    case 2: return trace.ret (u.format2.sanitize (c), 238);
    default:return trace.ret (true, 239);
    }
  }

  protected:
  union {
  USHORT format;
  SingleSubstFormat1 format1;
  SingleSubstFormat2 format2;
  } u;
};


struct Sequence
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int count = substitute.len;
    for (unsigned int i = 0; i < count; i++)
      c->glyphs->add (substitute[i]);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int count = substitute.len;
    for (unsigned int i = 0; i < count; i++)
      c->output->add (substitute[i]);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int count = substitute.len;
# 283 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh"
    if ((!count)) return trace.ret (false, 283);



    if ((count == 1))
    {
      c->replace_glyph (substitute.array[0]);
      return trace.ret (true, 290);
    }

    unsigned int klass = _hb_glyph_info_is_ligature (&c->buffer->cur()) ?
    HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH : 0;

    for (unsigned int i = 0; i < count; i++) {
      _hb_glyph_info_set_lig_props_for_component (&c->buffer->cur(), i);
      c->output_glyph_for_component (substitute.array[i], klass);
    }
    c->buffer->skip_glyph ();

    return trace.ret (true, 302);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 310);
    if ((!substitute.serialize (c, glyphs, num_glyphs))) return trace.ret (false, 311);
    return trace.ret (true, 312);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (substitute.sanitize (c), 317);
  }

  protected:
  ArrayOf<GlyphID>
  substitute;
  public:
  inline void _instance_assertion_on_line_324 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_324_failed[(((sizeof (*this) == (2) + sizeof (substitute[0]))))?1:-1]; do { typedef __typeof__(*this) _type_324; union _type__type_324_on_line_324_is_not_POD { _type_324 instance; }; } while (0); }; inline void _compiles_assertion_on_line_324 (void) const { (void) substitute[0].static_size; } static const unsigned int min_size = (2);
};

struct MultipleSubstFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      if (c->glyphs->has (iter.get_glyph ()))
 (this+sequence[iter.get_coverage ()]).closure (c);
    }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);
    unsigned int count = sequence.len;
    for (unsigned int i = 0; i < count; i++)
 (this+sequence[i]).collect_glyphs (c);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    return trace.ret (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != ((unsigned int) -1), 356);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;

    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 364);

    return trace.ret ((this+sequence[index]).apply (c), 366);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    Supplier<unsigned int> &substitute_len_list,
    unsigned int num_glyphs,
    Supplier<GlyphID> &substitute_glyphs_list)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 376);
    if ((!sequence.serialize (c, num_glyphs))) return trace.ret (false, 377);
    for (unsigned int i = 0; i < num_glyphs; i++)
      if ((!sequence[i].serialize (c, this).serialize (c, substitute_glyphs_list, substitute_len_list[i]))

                                ) return trace.ret (false, 381);
    substitute_len_list.advance (num_glyphs);
    if ((!coverage.serialize (c, this).serialize (c, glyphs, num_glyphs))) return trace.ret (false, 383);
    return trace.ret (true, 384);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && sequence.sanitize (c, this), 389);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<Sequence>
  sequence;

  public:
  inline void _instance_assertion_on_line_401 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_401_failed[(((sizeof (*this) == (6) + sizeof (sequence[0]))))?1:-1]; do { typedef __typeof__(*this) _type_401; union _type__type_401_on_line_401_is_not_POD { _type_401 instance; }; } while (0); }; inline void _compiles_assertion_on_line_401 (void) const { (void) sequence[0].static_size; } static const unsigned int min_size = (6);
};

struct MultipleSubst
{
  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    Supplier<unsigned int> &substitute_len_list,
    unsigned int num_glyphs,
    Supplier<GlyphID> &substitute_glyphs_list)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (u.format))) return trace.ret (false, 413);
    unsigned int format = 1;
    u.format.set (format);
    switch (u.format) {
    case 1: return trace.ret (u.format1.serialize (c, glyphs, substitute_len_list, num_glyphs, substitute_glyphs_list), 417);
    default:return trace.ret (false, 418);
    }
  }

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 427);
    default:return trace.ret (c->default_return_value (), 428);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 434);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 436);
    default:return trace.ret (true, 437);
    }
  }

  protected:
  union {
  USHORT format;
  MultipleSubstFormat1 format1;
  } u;
};


typedef ArrayOf<GlyphID> AlternateSet;


struct AlternateSubstFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      if (c->glyphs->has (iter.get_glyph ())) {
 const AlternateSet &alt_set = this+alternateSet[iter.get_coverage ()];
 unsigned int count = alt_set.len;
 for (unsigned int i = 0; i < count; i++)
   c->glyphs->add (alt_set[i]);
      }
    }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      c->input->add (iter.get_glyph ());
      const AlternateSet &alt_set = this+alternateSet[iter.get_coverage ()];
      unsigned int count = alt_set.len;
      for (unsigned int i = 0; i < count; i++)
 c->output->add (alt_set[i]);
    }
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    return trace.ret (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != ((unsigned int) -1), 489);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_codepoint_t glyph_id = c->buffer->cur().codepoint;

    unsigned int index = (this+coverage).get_coverage (glyph_id);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 498);

    const AlternateSet &alt_set = this+alternateSet[index];

    if ((!alt_set.len)) return trace.ret (false, 502);

    hb_mask_t glyph_mask = c->buffer->cur().mask;
    hb_mask_t lookup_mask = c->lookup_mask;


    unsigned int shift = _hb_ctz (lookup_mask);
    unsigned int alt_index = ((lookup_mask & glyph_mask) >> shift);

    if ((alt_index > alt_set.len || alt_index == 0)) return trace.ret (false, 511);

    glyph_id = alt_set[alt_index - 1];

    c->replace_glyph (glyph_id);

    return trace.ret (true, 517);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    Supplier<unsigned int> &alternate_len_list,
    unsigned int num_glyphs,
    Supplier<GlyphID> &alternate_glyphs_list)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 527);
    if ((!alternateSet.serialize (c, num_glyphs))) return trace.ret (false, 528);
    for (unsigned int i = 0; i < num_glyphs; i++)
      if ((!alternateSet[i].serialize (c, this).serialize (c, alternate_glyphs_list, alternate_len_list[i]))

                                   ) return trace.ret (false, 532);
    alternate_len_list.advance (num_glyphs);
    if ((!coverage.serialize (c, this).serialize (c, glyphs, num_glyphs))) return trace.ret (false, 534);
    return trace.ret (true, 535);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && alternateSet.sanitize (c, this), 540);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<AlternateSet>
  alternateSet;

  public:
  inline void _instance_assertion_on_line_552 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_552_failed[(((sizeof (*this) == (6) + sizeof (alternateSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_552; union _type__type_552_on_line_552_is_not_POD { _type_552 instance; }; } while (0); }; inline void _compiles_assertion_on_line_552 (void) const { (void) alternateSet[0].static_size; } static const unsigned int min_size = (6);
};

struct AlternateSubst
{
  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &glyphs,
    Supplier<unsigned int> &alternate_len_list,
    unsigned int num_glyphs,
    Supplier<GlyphID> &alternate_glyphs_list)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (u.format))) return trace.ret (false, 564);
    unsigned int format = 1;
    u.format.set (format);
    switch (u.format) {
    case 1: return trace.ret (u.format1.serialize (c, glyphs, alternate_len_list, num_glyphs, alternate_glyphs_list), 568);
    default:return trace.ret (false, 569);
    }
  }

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 578);
    default:return trace.ret (c->default_return_value (), 579);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 585);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 587);
    default:return trace.ret (true, 588);
    }
  }

  protected:
  union {
  USHORT format;
  AlternateSubstFormat1 format1;
  } u;
};


struct Ligature
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int count = component.len;
    for (unsigned int i = 1; i < count; i++)
      if (!c->glyphs->has (component[i]))
        return;
    c->glyphs->add (ligGlyph);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int count = component.len;
    for (unsigned int i = 1; i < count; i++)
      c->input->add (component[i]);
    c->output->add (ligGlyph);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    if (c->len != component.len)
      return trace.ret (false, 625);

    for (unsigned int i = 1; i < c->len; i++)
      if ((c->glyphs[i] != component[i]))
 return trace.ret (false, 629);

    return trace.ret (true, 631);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int count = component.len;

    if ((!count)) return trace.ret (false, 639);



    if ((count == 1))
    {
      c->replace_glyph (ligGlyph);
      return trace.ret (true, 646);
    }

    bool is_mark_ligature = false;
    unsigned int total_component_count = 0;

    unsigned int match_length = 0;
    unsigned int match_positions[64];

    if ((!match_input (c, count, &component[1], match_glyph, __null, &match_length, match_positions, &is_mark_ligature, &total_component_count))






                                 )
      return trace.ret (false, 663);

    ligate_input (c,
    count,
    match_positions,
    match_length,
    ligGlyph,
    is_mark_ligature,
    total_component_count);

    return trace.ret (true, 673);
  }

  inline bool serialize (hb_serialize_context_t *c,
    GlyphID ligature,
    Supplier<GlyphID> &components,
    unsigned int num_components )
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 682);
    ligGlyph = ligature;
    if ((!component.serialize (c, components, num_components))) return trace.ret (false, 684);
    return trace.ret (true, 685);
  }

  public:
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (ligGlyph.sanitize (c) && component.sanitize (c), 691);
  }

  protected:
  GlyphID ligGlyph;
  HeadlessArrayOf<GlyphID>
  component;


  public:
  inline void _instance_assertion_on_line_701 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_701_failed[(((sizeof (*this) == (4) + sizeof (component[0]))))?1:-1]; do { typedef __typeof__(*this) _type_701; union _type__type_701_on_line_701_is_not_POD { _type_701 instance; }; } while (0); }; inline void _compiles_assertion_on_line_701 (void) const { (void) component[0].static_size; } static const unsigned int min_size = (4);
};

struct LigatureSet
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int num_ligs = ligature.len;
    for (unsigned int i = 0; i < num_ligs; i++)
      (this+ligature[i]).closure (c);
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int num_ligs = ligature.len;
    for (unsigned int i = 0; i < num_ligs; i++)
      (this+ligature[i]).collect_glyphs (c);
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    unsigned int num_ligs = ligature.len;
    for (unsigned int i = 0; i < num_ligs; i++)
    {
      const Ligature &lig = this+ligature[i];
      if (lig.would_apply (c))
        return trace.ret (true, 730);
    }
    return trace.ret (false, 732);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    unsigned int num_ligs = ligature.len;
    for (unsigned int i = 0; i < num_ligs; i++)
    {
      const Ligature &lig = this+ligature[i];
      if (lig.apply (c)) return trace.ret (true, 742);
    }

    return trace.ret (false, 745);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &ligatures,
    Supplier<unsigned int> &component_count_list,
    unsigned int num_ligatures,
    Supplier<GlyphID> &component_list )
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 755);
    if ((!ligature.serialize (c, num_ligatures))) return trace.ret (false, 756);
    for (unsigned int i = 0; i < num_ligatures; i++)
      if ((!ligature[i].serialize (c, this).serialize (c, ligatures[i], component_list, component_count_list[i]))


                                 ) return trace.ret (false, 761);
    ligatures.advance (num_ligatures);
    component_count_list.advance (num_ligatures);
    return trace.ret (true, 764);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (ligature.sanitize (c, this), 769);
  }

  protected:
  OffsetArrayOf<Ligature>
  ligature;

  public:
  inline void _instance_assertion_on_line_777 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_777_failed[(((sizeof (*this) == (2) + sizeof (ligature[0]))))?1:-1]; do { typedef __typeof__(*this) _type_777; union _type__type_777_on_line_777_is_not_POD { _type_777 instance; }; } while (0); }; inline void _compiles_assertion_on_line_777 (void) const { (void) ligature[0].static_size; } static const unsigned int min_size = (2);
};

struct LigatureSubstFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      if (c->glyphs->has (iter.get_glyph ()))
 (this+ligatureSet[iter.get_coverage ()]).closure (c);
    }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      c->input->add (iter.get_glyph ());
      (this+ligatureSet[iter.get_coverage ()]).collect_glyphs (c);
    }
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    unsigned int index = (this+coverage).get_coverage (c->glyphs[0]);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 811);

    const LigatureSet &lig_set = this+ligatureSet[index];
    return trace.ret (lig_set.would_apply (c), 814);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_codepoint_t glyph_id = c->buffer->cur().codepoint;

    unsigned int index = (this+coverage).get_coverage (glyph_id);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 823);

    const LigatureSet &lig_set = this+ligatureSet[index];
    return trace.ret (lig_set.apply (c), 826);
  }

  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &first_glyphs,
    Supplier<unsigned int> &ligature_per_first_glyph_count_list,
    unsigned int num_first_glyphs,
    Supplier<GlyphID> &ligatures_list,
    Supplier<unsigned int> &component_count_list,
    Supplier<GlyphID> &component_list )
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (*this))) return trace.ret (false, 838);
    if ((!ligatureSet.serialize (c, num_first_glyphs))) return trace.ret (false, 839);
    for (unsigned int i = 0; i < num_first_glyphs; i++)
      if ((!ligatureSet[i].serialize (c, this).serialize (c, ligatures_list, component_count_list, ligature_per_first_glyph_count_list[i], component_list))



                           ) return trace.ret (false, 845);
    ligature_per_first_glyph_count_list.advance (num_first_glyphs);
    if ((!coverage.serialize (c, this).serialize (c, first_glyphs, num_first_glyphs))) return trace.ret (false, 847);
    return trace.ret (true, 848);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && ligatureSet.sanitize (c, this), 853);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<LigatureSet>
  ligatureSet;

  public:
  inline void _instance_assertion_on_line_865 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_865_failed[(((sizeof (*this) == (6) + sizeof (ligatureSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_865; union _type__type_865_on_line_865_is_not_POD { _type_865 instance; }; } while (0); }; inline void _compiles_assertion_on_line_865 (void) const { (void) ligatureSet[0].static_size; } static const unsigned int min_size = (6);
};

struct LigatureSubst
{
  inline bool serialize (hb_serialize_context_t *c,
    Supplier<GlyphID> &first_glyphs,
    Supplier<unsigned int> &ligature_per_first_glyph_count_list,
    unsigned int num_first_glyphs,
    Supplier<GlyphID> &ligatures_list,
    Supplier<unsigned int> &component_count_list,
    Supplier<GlyphID> &component_list )
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!c->extend_min (u.format))) return trace.ret (false, 879);
    unsigned int format = 1;
    u.format.set (format);
    switch (u.format) {
    case 1: return trace.ret (u.format1.serialize (c, first_glyphs, ligature_per_first_glyph_count_list, num_first_glyphs, ligatures_list, component_count_list, component_list),
 884
# 883 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh"
                   )
                                                                  ;
    default:return trace.ret (false, 885);
    }
  }

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 894);
    default:return trace.ret (c->default_return_value (), 895);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 901);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 903);
    default:return trace.ret (true, 904);
    }
  }

  protected:
  union {
  USHORT format;
  LigatureSubstFormat1 format1;
  } u;
};


struct ContextSubst : Context {};

struct ChainContextSubst : ChainContext {};

struct ExtensionSubst : Extension<ExtensionSubst>
{
  typedef struct SubstLookupSubTable LookupSubTable;

  inline bool is_reverse (void) const;
};


struct ReverseChainSingleSubstFormat1
{
  inline void closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);

    unsigned int count;

    count = backtrack.len;
    for (unsigned int i = 0; i < count; i++)
      if (!(this+backtrack[i]).intersects (c->glyphs))
        return;

    count = lookahead.len;
    for (unsigned int i = 0; i < count; i++)
      if (!(this+lookahead[i]).intersects (c->glyphs))
        return;

    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);
    Coverage::Iter iter;
    for (iter.init (this+coverage); iter.more (); iter.next ()) {
      if (c->glyphs->has (iter.get_glyph ()))
 c->glyphs->add (substitute[iter.get_coverage ()]);
    }
  }

  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;

    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);

    unsigned int count;

    (this+coverage).add_coverage (c->input);

    count = backtrack.len;
    for (unsigned int i = 0; i < count; i++)
      (this+backtrack[i]).add_coverage (c->before);

    count = lookahead.len;
    for (unsigned int i = 0; i < count; i++)
      (this+lookahead[i]).add_coverage (c->after);

    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);
    count = substitute.len;
    for (unsigned int i = 0; i < count; i++)
      c->output->add (substitute[i]);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool would_apply (hb_would_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    return trace.ret (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != ((unsigned int) -1), 987);
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    if ((c->nesting_level_left != 8))
      return trace.ret (false, 994);

    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 997);

    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);
    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);

    if (match_backtrack (c,
    backtrack.len, (USHORT *) backtrack.array,
    match_coverage, this) &&
        match_lookahead (c,
    lookahead.len, (USHORT *) lookahead.array,
    match_coverage, this,
    1))
    {
      c->replace_glyph_inplace (substitute[index]);



      return trace.ret (true, 1014);
    }

    return trace.ret (false, 1017);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!(coverage.sanitize (c, this) && backtrack.sanitize (c, this)))
      return trace.ret (false, 1023);
    OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);
    if (!lookahead.sanitize (c, this))
      return trace.ret (false, 1026);
    ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);
    return trace.ret (substitute.sanitize (c), 1028);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  OffsetArrayOf<Coverage>
  backtrack;


  OffsetArrayOf<Coverage>
  lookaheadX;


  ArrayOf<GlyphID>
  substituteX;

  public:
  inline void _instance_assertion_on_line_1048 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1048_failed[(((sizeof (*this) >= (10))))?1:-1]; do { typedef __typeof__(*this) _type_1048; union _type__type_1048_on_line_1048_is_not_POD { _type_1048 instance; }; } while (0); }; static const unsigned int min_size = (10);
};

struct ReverseChainSingleSubst
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 1058);
    default:return trace.ret (c->default_return_value (), 1059);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1065);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1067);
    default:return trace.ret (true, 1068);
    }
  }

  protected:
  union {
  USHORT format;
  ReverseChainSingleSubstFormat1 format1;
  } u;
};







struct SubstLookupSubTable
{
  friend struct SubstLookup;

  enum Type {
    Single = 1,
    Multiple = 2,
    Alternate = 3,
    Ligature = 4,
    Context = 5,
    ChainContext = 6,
    Extension = 7,
    ReverseChainSingle = 8
  };

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c, unsigned int lookup_type) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) lookup_type);;
    switch (lookup_type) {
    case Single: return trace.ret (u.single.dispatch (c), 1105);
    case Multiple: return trace.ret (u.multiple.dispatch (c), 1106);
    case Alternate: return trace.ret (u.alternate.dispatch (c), 1107);
    case Ligature: return trace.ret (u.ligature.dispatch (c), 1108);
    case Context: return trace.ret (u.context.dispatch (c), 1109);
    case ChainContext: return trace.ret (u.chainContext.dispatch (c), 1110);
    case Extension: return trace.ret (u.extension.dispatch (c), 1111);
    case ReverseChainSingle: return trace.ret (u.reverseChainContextSingle.dispatch (c), 1112);
    default: return trace.ret (c->default_return_value (), 1113);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c, unsigned int lookup_type) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.header.sub_format.sanitize (c))
      return trace.ret (false, 1120);
    switch (lookup_type) {
    case Single: return trace.ret (u.single.sanitize (c), 1122);
    case Multiple: return trace.ret (u.multiple.sanitize (c), 1123);
    case Alternate: return trace.ret (u.alternate.sanitize (c), 1124);
    case Ligature: return trace.ret (u.ligature.sanitize (c), 1125);
    case Context: return trace.ret (u.context.sanitize (c), 1126);
    case ChainContext: return trace.ret (u.chainContext.sanitize (c), 1127);
    case Extension: return trace.ret (u.extension.sanitize (c), 1128);
    case ReverseChainSingle: return trace.ret (u.reverseChainContextSingle.sanitize (c), 1129);
    default: return trace.ret (true, 1130);
    }
  }

  protected:
  union {
  struct {
    USHORT sub_format;
  } header;
  SingleSubst single;
  MultipleSubst multiple;
  AlternateSubst alternate;
  LigatureSubst ligature;
  ContextSubst context;
  ChainContextSubst chainContext;
  ExtensionSubst extension;
  ReverseChainSingleSubst reverseChainContextSingle;
  } u;
  public:
  inline void _instance_assertion_on_line_1149 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1149_failed[(((this->u.header.sub_format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_1149; union _type__type_1149_on_line_1149_is_not_POD { _type_1149 instance; }; } while (0); }; static const unsigned int min_size = (2);
};


struct SubstLookup : Lookup
{
  inline const SubstLookupSubTable& get_subtable (unsigned int i) const
  { return this+CastR<OffsetArrayOf<SubstLookupSubTable> > (subTable)[i]; }

  inline static bool lookup_type_is_reverse (unsigned int lookup_type)
  { return lookup_type == SubstLookupSubTable::ReverseChainSingle; }

  inline bool is_reverse (void) const
  {
    unsigned int type = get_type ();
    if ((type == SubstLookupSubTable::Extension))
      return CastR<ExtensionSubst> (get_subtable(0)).is_reverse ();
    return lookup_type_is_reverse (type);
  }

  inline hb_closure_context_t::return_t closure (hb_closure_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    c->set_recurse_func (dispatch_recurse_func<hb_closure_context_t>);
    return trace.ret (dispatch (c), 1173);
  }

  inline hb_collect_glyphs_context_t::return_t collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    c->set_recurse_func (dispatch_recurse_func<hb_collect_glyphs_context_t>);
    return trace.ret (dispatch (c), 1180);
  }

  template <typename set_t>
  inline void add_coverage (set_t *glyphs) const
  {
    hb_get_coverage_context_t c;
    const Coverage *last = __null;
    unsigned int count = get_subtable_count ();
    for (unsigned int i = 0; i < count; i++) {
      const Coverage *coverage = &get_subtable (i).dispatch (&c, get_type ());
      if (coverage != last) {
        coverage->add_coverage (glyphs);
        last = coverage;
      }
    }
  }

  inline bool would_apply (hb_would_apply_context_t *c, const hb_set_digest_t *digest) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "%d glyphs", c->len);;
    if ((!c->len)) return trace.ret (false, 1201);
    if (!digest->may_have (c->glyphs[0])) return trace.ret (false, 1202);
      return trace.ret (dispatch (c), 1203);
  }

  inline bool apply_once (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    if (!c->check_glyph_property (&c->buffer->cur(), c->lookup_props))
      return trace.ret (false, 1210);
    return trace.ret (dispatch (c), 1211);
  }

  static bool apply_recurse_func (hb_apply_context_t *c, unsigned int lookup_index);

  inline SubstLookupSubTable& serialize_subtable (hb_serialize_context_t *c,
        unsigned int i)
  { return CastR<OffsetArrayOf<SubstLookupSubTable> > (subTable)[i].serialize (c, this); }

  inline bool serialize_single (hb_serialize_context_t *c,
    uint32_t lookup_props,
           Supplier<GlyphID> &glyphs,
           Supplier<GlyphID> &substitutes,
           unsigned int num_glyphs)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!Lookup::serialize (c, SubstLookupSubTable::Single, lookup_props, 1))) return trace.ret (false, 1227);
    return trace.ret (serialize_subtable (c, 0).u.single.serialize (c, glyphs, substitutes, num_glyphs), 1228);
  }

  inline bool serialize_multiple (hb_serialize_context_t *c,
      uint32_t lookup_props,
      Supplier<GlyphID> &glyphs,
      Supplier<unsigned int> &substitute_len_list,
      unsigned int num_glyphs,
      Supplier<GlyphID> &substitute_glyphs_list)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!Lookup::serialize (c, SubstLookupSubTable::Multiple, lookup_props, 1))) return trace.ret (false, 1239);
    return trace.ret (serialize_subtable (c, 0).u.multiple.serialize (c, glyphs, substitute_len_list, num_glyphs, substitute_glyphs_list),
 1241
# 1240 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh"
           )
                                  ;
  }

  inline bool serialize_alternate (hb_serialize_context_t *c,
       uint32_t lookup_props,
       Supplier<GlyphID> &glyphs,
       Supplier<unsigned int> &alternate_len_list,
       unsigned int num_glyphs,
       Supplier<GlyphID> &alternate_glyphs_list)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!Lookup::serialize (c, SubstLookupSubTable::Alternate, lookup_props, 1))) return trace.ret (false, 1252);
    return trace.ret (serialize_subtable (c, 0).u.alternate.serialize (c, glyphs, alternate_len_list, num_glyphs, alternate_glyphs_list),
 1254
# 1253 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh"
           )
                                  ;
  }

  inline bool serialize_ligature (hb_serialize_context_t *c,
      uint32_t lookup_props,
      Supplier<GlyphID> &first_glyphs,
      Supplier<unsigned int> &ligature_per_first_glyph_count_list,
      unsigned int num_first_glyphs,
      Supplier<GlyphID> &ligatures_list,
      Supplier<unsigned int> &component_count_list,
      Supplier<GlyphID> &component_list )
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, "SERIALIZE", c, __PRETTY_FUNCTION__, "");;
    if ((!Lookup::serialize (c, SubstLookupSubTable::Ligature, lookup_props, 1))) return trace.ret (false, 1267);
    return trace.ret (serialize_subtable (c, 0).u.ligature.serialize (c, first_glyphs, ligature_per_first_glyph_count_list, num_first_glyphs, ligatures_list, component_count_list, component_list),
 1269
# 1268 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gsub-table.hh"
           )
                                                                ;
  }

  template <typename context_t>
  static inline typename context_t::return_t dispatch_recurse_func (context_t *c, unsigned int lookup_index);

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    unsigned int lookup_type = get_type ();
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) lookup_type);;
    unsigned int count = get_subtable_count ();
    for (unsigned int i = 0; i < count; i++) {
      typename context_t::return_t r = get_subtable (i).dispatch (c, lookup_type);
      if (c->stop_sublookup_iteration (r))
        return trace.ret (r, 1284);
    }
    return trace.ret (c->default_return_value (), 1286);
  }

  inline bool sanitize (hb_sanitize_context_t *c)
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!Lookup::sanitize (c))) return trace.ret (false, 1292);
    OffsetArrayOf<SubstLookupSubTable> &list = CastR<OffsetArrayOf<SubstLookupSubTable> > (subTable);
    if ((!list.sanitize (c, this, get_type ()))) return trace.ret (false, 1294);

    if ((get_type () == SubstLookupSubTable::Extension))
    {



      unsigned int type = get_subtable (0).u.extension.get_type ();
      unsigned int count = get_subtable_count ();
      for (unsigned int i = 1; i < count; i++)
        if (get_subtable (i).u.extension.get_type () != type)
   return trace.ret (false, 1305);
    }
    return trace.ret (true, 1307);
  }
};

typedef OffsetListOf<SubstLookup> SubstLookupList;





struct GSUB : GSUBGPOS
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B'))));

  inline const SubstLookup& get_lookup (unsigned int i) const
  { return CastR<SubstLookup> (GSUBGPOS::get_lookup (i)); }

  static inline void substitute_start (hb_font_t *font, hb_buffer_t *buffer);
  static inline void substitute_finish (hb_font_t *font, hb_buffer_t *buffer);

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!GSUBGPOS::sanitize (c))) return trace.ret (false, 1329);
    OffsetTo<SubstLookupList> &list = CastR<OffsetTo<SubstLookupList> > (lookupList);
    return trace.ret (list.sanitize (c, this), 1331);
  }
  public:
  inline void _instance_assertion_on_line_1334 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1334_failed[(((sizeof (*this) == (10))))?1:-1]; do { typedef __typeof__(*this) _type_1334; union _type__type_1334_on_line_1334_is_not_POD { _type_1334 instance; }; } while (0); }; static const unsigned int static_size = (10); static const unsigned int min_size = (10);
};


void
GSUB::substitute_start (hb_font_t *font, hb_buffer_t *buffer)
{
  _hb_buffer_assert_gsubgpos_vars (buffer);

  const GDEF &gdef = *((hb_ot_layout_t *) font->face->shaper_data.ot)->gdef;
  unsigned int count = buffer->len;
  for (unsigned int i = 0; i < count; i++)
  {
    _hb_glyph_info_set_glyph_props (&buffer->info[i], gdef.get_glyph_props (buffer->info[i].codepoint));
    _hb_glyph_info_clear_lig_props (&buffer->info[i]);
    buffer->info[i].var1.u8[3] = 0;
  }
}

void
GSUB::substitute_finish (hb_font_t *font __attribute__((unused)), hb_buffer_t *buffer __attribute__((unused)))
{
}




           inline bool ExtensionSubst::is_reverse (void) const
{
  unsigned int type = get_type ();
  if ((type == SubstLookupSubTable::Extension))
    return CastR<ExtensionSubst> (get_subtable<SubstLookupSubTable>()).is_reverse ();
  return SubstLookup::lookup_type_is_reverse (type);
}

template <typename context_t>
           inline typename context_t::return_t SubstLookup::dispatch_recurse_func (context_t *c, unsigned int lookup_index)
{
  const GSUB &gsub = *(((hb_ot_layout_t *) c->face->shaper_data.ot)->gsub);
  const SubstLookup &l = gsub.get_lookup (lookup_index);
  return l.dispatch (c);
}

           inline bool SubstLookup::apply_recurse_func (hb_apply_context_t *c, unsigned int lookup_index)
{
  const GSUB &gsub = *(((hb_ot_layout_t *) c->face->shaper_data.ot)->gsub);
  const SubstLookup &l = gsub.get_lookup (lookup_index);
  unsigned int saved_lookup_props = c->lookup_props;
  c->set_lookup (l);
  bool ret = l.apply_once (c);
  c->lookup_props = saved_lookup_props;
  return ret;
}


}
# 35 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
namespace OT {
# 45 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
typedef USHORT Value;

typedef Value ValueRecord[1];

struct ValueFormat : USHORT
{
  enum Flags {
    xPlacement = 0x0001u,
    yPlacement = 0x0002u,
    xAdvance = 0x0004u,
    yAdvance = 0x0008u,
    xPlaDevice = 0x0010u,
    yPlaDevice = 0x0020u,
    xAdvDevice = 0x0040u,
    yAdvDevice = 0x0080u,
    ignored = 0x0F00u,
    reserved = 0xF000u,

    devices = 0x00F0u
  };
# 92 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
  inline unsigned int get_len (void) const
  { return _hb_popcount32 ((unsigned int) *this); }
  inline unsigned int get_size (void) const
  { return get_len () * Value::static_size; }

  void apply_value (hb_font_t *font,
      hb_direction_t direction,
      const void *base,
      const Value *values,
      hb_glyph_position_t &glyph_pos) const
  {
    unsigned int x_ppem, y_ppem;
    unsigned int format = *this;
    hb_bool_t horizontal = ((((unsigned int) (direction)) & ~1U) == 4);

    if (!format) return;

    if (format & xPlacement) glyph_pos.x_offset += font->em_scale_x (get_short (values++));
    if (format & yPlacement) glyph_pos.y_offset += font->em_scale_y (get_short (values++));
    if (format & xAdvance) {
      if ((horizontal)) glyph_pos.x_advance += font->em_scale_x (get_short (values));
      values++;
    }

    if (format & yAdvance) {
      if ((!horizontal)) glyph_pos.y_advance -= font->em_scale_y (get_short (values));
      values++;
    }

    if (!has_device ()) return;

    x_ppem = font->x_ppem;
    y_ppem = font->y_ppem;

    if (!x_ppem && !y_ppem) return;


    if (format & xPlaDevice) {
      if (x_ppem) glyph_pos.x_offset += (base + get_device (values)).get_x_delta (font);
      values++;
    }
    if (format & yPlaDevice) {
      if (y_ppem) glyph_pos.y_offset += (base + get_device (values)).get_y_delta (font);
      values++;
    }
    if (format & xAdvDevice) {
      if (horizontal && x_ppem) glyph_pos.x_advance += (base + get_device (values)).get_x_delta (font);
      values++;
    }
    if (format & yAdvDevice) {

      if (!horizontal && y_ppem) glyph_pos.y_advance -= (base + get_device (values)).get_y_delta (font);
      values++;
    }
  }

  private:
  inline bool sanitize_value_devices (hb_sanitize_context_t *c, void *base, Value *values) {
    unsigned int format = *this;

    if (format & xPlacement) values++;
    if (format & yPlacement) values++;
    if (format & xAdvance) values++;
    if (format & yAdvance) values++;

    if ((format & xPlaDevice) && !get_device (values++).sanitize (c, base)) return false;
    if ((format & yPlaDevice) && !get_device (values++).sanitize (c, base)) return false;
    if ((format & xAdvDevice) && !get_device (values++).sanitize (c, base)) return false;
    if ((format & yAdvDevice) && !get_device (values++).sanitize (c, base)) return false;

    return true;
  }

  static inline OffsetTo<Device>& get_device (Value* value)
  { return *CastP<OffsetTo<Device> > (value); }
  static inline const OffsetTo<Device>& get_device (const Value* value)
  { return *CastP<OffsetTo<Device> > (value); }

  static inline const SHORT& get_short (const Value* value)
  { return *CastP<SHORT> (value); }

  public:

  inline bool has_device (void) const {
    unsigned int format = *this;
    return (format & devices) != 0;
  }

  inline bool sanitize_value (hb_sanitize_context_t *c, void *base, Value *values) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_range (values, get_size ()) && (!has_device () || sanitize_value_devices (c, base, values)), 182);
  }

  inline bool sanitize_values (hb_sanitize_context_t *c, void *base, Value *values, unsigned int count) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int len = get_len ();

    if (!c->check_array (values, get_size (), count)) return trace.ret (false, 189);

    if (!has_device ()) return trace.ret (true, 191);

    for (unsigned int i = 0; i < count; i++) {
      if (!sanitize_value_devices (c, base, values))
        return trace.ret (false, 195);
      values += len;
    }

    return trace.ret (true, 199);
  }


  inline bool sanitize_values_stride_unsafe (hb_sanitize_context_t *c, void *base, Value *values, unsigned int count, unsigned int stride) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;

    if (!has_device ()) return trace.ret (true, 206);

    for (unsigned int i = 0; i < count; i++) {
      if (!sanitize_value_devices (c, base, values))
        return trace.ret (false, 210);
      values += stride;
    }

    return trace.ret (true, 214);
  }
};


struct AnchorFormat1
{
  inline void get_anchor (hb_font_t *font, hb_codepoint_t glyph_id __attribute__((unused)),
     hb_position_t *x, hb_position_t *y) const
  {
      *x = font->em_scale_x (xCoordinate);
      *y = font->em_scale_y (yCoordinate);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 230);
  }

  protected:
  USHORT format;
  SHORT xCoordinate;
  SHORT yCoordinate;
  public:
  inline void _instance_assertion_on_line_238 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_238_failed[(((sizeof (*this) == (6))))?1:-1]; do { typedef __typeof__(*this) _type_238; union _type__type_238_on_line_238_is_not_POD { _type_238 instance; }; } while (0); }; static const unsigned int static_size = (6); static const unsigned int min_size = (6);
};

struct AnchorFormat2
{
  inline void get_anchor (hb_font_t *font, hb_codepoint_t glyph_id,
     hb_position_t *x, hb_position_t *y) const
  {
      unsigned int x_ppem = font->x_ppem;
      unsigned int y_ppem = font->y_ppem;
      hb_position_t cx, cy;
      hb_bool_t ret;

      ret = (x_ppem || y_ppem) &&
             font->get_glyph_contour_point_for_origin (glyph_id, anchorPoint, HB_DIRECTION_LTR, &cx, &cy);
      *x = ret && x_ppem ? cx : font->em_scale_x (xCoordinate);
      *y = ret && y_ppem ? cy : font->em_scale_y (yCoordinate);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this), 259);
  }

  protected:
  USHORT format;
  SHORT xCoordinate;
  SHORT yCoordinate;
  USHORT anchorPoint;
  public:
  inline void _instance_assertion_on_line_268 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_268_failed[(((sizeof (*this) == (8))))?1:-1]; do { typedef __typeof__(*this) _type_268; union _type__type_268_on_line_268_is_not_POD { _type_268 instance; }; } while (0); }; static const unsigned int static_size = (8); static const unsigned int min_size = (8);
};

struct AnchorFormat3
{
  inline void get_anchor (hb_font_t *font, hb_codepoint_t glyph_id __attribute__((unused)),
     hb_position_t *x, hb_position_t *y) const
  {
      *x = font->em_scale_x (xCoordinate);
      *y = font->em_scale_y (yCoordinate);

      if (font->x_ppem)
 *x += (this+xDeviceTable).get_x_delta (font);
      if (font->y_ppem)
 *y += (this+yDeviceTable).get_x_delta (font);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && xDeviceTable.sanitize (c, this) && yDeviceTable.sanitize (c, this), 287);
  }

  protected:
  USHORT format;
  SHORT xCoordinate;
  SHORT yCoordinate;
  OffsetTo<Device>
  xDeviceTable;


  OffsetTo<Device>
  yDeviceTable;


  public:
  inline void _instance_assertion_on_line_303 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_303_failed[(((sizeof (*this) == (10))))?1:-1]; do { typedef __typeof__(*this) _type_303; union _type__type_303_on_line_303_is_not_POD { _type_303 instance; }; } while (0); }; static const unsigned int static_size = (10); static const unsigned int min_size = (10);
};

struct Anchor
{
  inline void get_anchor (hb_font_t *font, hb_codepoint_t glyph_id,
     hb_position_t *x, hb_position_t *y) const
  {
    *x = *y = 0;
    switch (u.format) {
    case 1: u.format1.get_anchor (font, glyph_id, x, y); return;
    case 2: u.format2.get_anchor (font, glyph_id, x, y); return;
    case 3: u.format3.get_anchor (font, glyph_id, x, y); return;
    default: return;
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 322);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 324);
    case 2: return trace.ret (u.format2.sanitize (c), 325);
    case 3: return trace.ret (u.format3.sanitize (c), 326);
    default:return trace.ret (true, 327);
    }
  }

  protected:
  union {
  USHORT format;
  AnchorFormat1 format1;
  AnchorFormat2 format2;
  AnchorFormat3 format3;
  } u;
  public:
  inline void _instance_assertion_on_line_339 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_339_failed[(((this->u.format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_339; union _type__type_339_on_line_339_is_not_POD { _type_339 instance; }; } while (0); }; static const unsigned int min_size = (2);
};


struct AnchorMatrix
{
  inline const Anchor& get_anchor (unsigned int row, unsigned int col, unsigned int cols, bool *found) const {
    *found = false;
    if ((row >= rows || col >= cols)) return Null<Anchor>();
    *found = !matrixZ[row * cols + col].is_null ();
    return this+matrixZ[row * cols + col];
  }

  inline bool sanitize (hb_sanitize_context_t *c, unsigned int cols) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!c->check_struct (this)) return trace.ret (false, 354);
    if ((rows > 0 && cols >= ((unsigned int) -1) / rows)) return trace.ret (false, 355);
    unsigned int count = rows * cols;
    if (!c->check_array (matrixZ, matrixZ[0].static_size, count)) return trace.ret (false, 357);
    for (unsigned int i = 0; i < count; i++)
      if (!matrixZ[i].sanitize (c, this)) return trace.ret (false, 359);
    return trace.ret (true, 360);
  }

  USHORT rows;
  protected:
  OffsetTo<Anchor>
  matrixZ[1];

  public:
  inline void _instance_assertion_on_line_369 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_369_failed[(((sizeof (*this) == (2) + sizeof (matrixZ[0]))))?1:-1]; do { typedef __typeof__(*this) _type_369; union _type__type_369_on_line_369_is_not_POD { _type_369 instance; }; } while (0); }; inline void _compiles_assertion_on_line_369 (void) const { (void) matrixZ[0].static_size; } static const unsigned int min_size = (2);
};


struct MarkRecord
{
  friend struct MarkArray;

  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && markAnchor.sanitize (c, base), 379);
  }

  protected:
  USHORT klass;
  OffsetTo<Anchor>
  markAnchor;

  public:
  inline void _instance_assertion_on_line_388 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_388_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_388; union _type__type_388_on_line_388_is_not_POD { _type_388 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};

struct MarkArray : ArrayOf<MarkRecord>
{
  inline bool apply (hb_apply_context_t *c,
       unsigned int mark_index, unsigned int glyph_index,
       const AnchorMatrix &anchors, unsigned int class_count,
       unsigned int glyph_pos) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    const MarkRecord &record = ArrayOf<MarkRecord>::operator[](mark_index);
    unsigned int mark_class = record.klass;

    const Anchor& mark_anchor = this + record.markAnchor;
    bool found;
    const Anchor& glyph_anchor = anchors.get_anchor (glyph_index, mark_class, class_count, &found);


    if ((!found)) return trace.ret (false, 408);

    hb_position_t mark_x, mark_y, base_x, base_y;

    mark_anchor.get_anchor (c->font, buffer->cur().codepoint, &mark_x, &mark_y);
    glyph_anchor.get_anchor (c->font, buffer->info[glyph_pos].codepoint, &base_x, &base_y);

    hb_glyph_position_t &o = buffer->cur_pos();
    o.x_offset = base_x - mark_x;
    o.y_offset = base_y - mark_y;
    o.var.u16[0] = buffer->idx - glyph_pos;

    buffer->idx++;
    return trace.ret (true, 421);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (ArrayOf<MarkRecord>::sanitize (c, this), 426);
  }
};




struct SinglePosFormat1
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    unsigned int index = (this+coverage).get_coverage (buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 451);

    valueFormat.apply_value (c->font, c->direction, this,
        values, buffer->cur_pos());

    buffer->idx++;
    return trace.ret (true, 457);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && coverage.sanitize (c, this) && valueFormat.sanitize_value (c, this, values), 462);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  ValueFormat valueFormat;

  ValueRecord values;


  public:
  inline void _instance_assertion_on_line_476 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_476_failed[(((sizeof (*this) == (6) + sizeof (values[0]))))?1:-1]; do { typedef __typeof__(*this) _type_476; union _type__type_476_on_line_476_is_not_POD { _type_476 instance; }; } while (0); }; inline void _compiles_assertion_on_line_476 (void) const { (void) values[0].static_size; } static const unsigned int min_size = (6);
};

struct SinglePosFormat2
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    unsigned int index = (this+coverage).get_coverage (buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 497);

    if ((index >= valueCount)) return trace.ret (false, 499);

    valueFormat.apply_value (c->font, c->direction, this,
        &values[index * valueFormat.get_len ()],
        buffer->cur_pos());

    buffer->idx++;
    return trace.ret (true, 506);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && coverage.sanitize (c, this) && valueFormat.sanitize_values (c, this, values, valueCount), 511);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  ValueFormat valueFormat;

  USHORT valueCount;
  ValueRecord values;

  public:
  inline void _instance_assertion_on_line_525 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_525_failed[(((sizeof (*this) == (8) + sizeof (values[0]))))?1:-1]; do { typedef __typeof__(*this) _type_525; union _type__type_525_on_line_525_is_not_POD { _type_525 instance; }; } while (0); }; inline void _compiles_assertion_on_line_525 (void) const { (void) values[0].static_size; } static const unsigned int min_size = (8);
};

struct SinglePos
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 535);
    case 2: return trace.ret (c->dispatch (u.format2), 536);
    default:return trace.ret (c->default_return_value (), 537);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 543);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 545);
    case 2: return trace.ret (u.format2.sanitize (c), 546);
    default:return trace.ret (true, 547);
    }
  }

  protected:
  union {
  USHORT format;
  SinglePosFormat1 format1;
  SinglePosFormat2 format2;
  } u;
};


struct PairValueRecord
{
  friend struct PairSet;

  protected:
  GlyphID secondGlyph;


  ValueRecord values;

  public:
  inline void _instance_assertion_on_line_571 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_571_failed[(((sizeof (*this) == (2) + sizeof (values[0]))))?1:-1]; do { typedef __typeof__(*this) _type_571; union _type__type_571_on_line_571_is_not_POD { _type_571 instance; }; } while (0); }; inline void _compiles_assertion_on_line_571 (void) const { (void) values[0].static_size; } static const unsigned int min_size = (2);
};

struct PairSet
{
  friend struct PairPosFormat1;

  inline void collect_glyphs (hb_collect_glyphs_context_t *c,
         const ValueFormat *valueFormats) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    unsigned int len1 = valueFormats[0].get_len ();
    unsigned int len2 = valueFormats[1].get_len ();
    unsigned int record_size = USHORT::static_size * (1 + len1 + len2);

    const PairValueRecord *record = CastP<PairValueRecord> (arrayZ);
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
    {
      c->input->add (record->secondGlyph);
      record = &StructAtOffset<PairValueRecord> (record, record_size);
    }
  }

  inline bool apply (hb_apply_context_t *c,
       const ValueFormat *valueFormats,
       unsigned int pos) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    unsigned int len1 = valueFormats[0].get_len ();
    unsigned int len2 = valueFormats[1].get_len ();
    unsigned int record_size = USHORT::static_size * (1 + len1 + len2);

    const PairValueRecord *record = CastP<PairValueRecord> (arrayZ);
    unsigned int count = len;
    for (unsigned int i = 0; i < count; i++)
    {

      if (buffer->info[pos].codepoint == record->secondGlyph)
      {
 valueFormats[0].apply_value (c->font, c->direction, this,
         &record->values[0], buffer->cur_pos());
 valueFormats[1].apply_value (c->font, c->direction, this,
         &record->values[len1], buffer->pos[pos]);
 if (len2)
   pos++;
 buffer->idx = pos;
 return trace.ret (true, 619);
      }
      record = &StructAtOffset<PairValueRecord> (record, record_size);
    }

    return trace.ret (false, 624);
  }

  struct sanitize_closure_t {
    void *base;
    ValueFormat *valueFormats;
    unsigned int len1;
    unsigned int stride;
  };

  inline bool sanitize (hb_sanitize_context_t *c, const sanitize_closure_t *closure) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!(c->check_struct (this)
       && c->check_array (arrayZ, USHORT::static_size * closure->stride, len))) return trace.ret (false, 637);

    unsigned int count = len;
    PairValueRecord *record = CastP<PairValueRecord> (arrayZ);
    return trace.ret (closure->valueFormats[0].sanitize_values_stride_unsafe (c, closure->base, &record->values[0], count, closure->stride) && closure->valueFormats[1].sanitize_values_stride_unsafe (c, closure->base, &record->values[closure->len1], count, closure->stride),
 642
# 641 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
           )
                                                                                                                                             ;
  }

  protected:
  USHORT len;
  USHORT arrayZ[1];

  public:
  inline void _instance_assertion_on_line_650 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_650_failed[(((sizeof (*this) == (2) + sizeof (arrayZ[0]))))?1:-1]; do { typedef __typeof__(*this) _type_650; union _type__type_650_on_line_650_is_not_POD { _type_650 instance; }; } while (0); }; inline void _compiles_assertion_on_line_650 (void) const { (void) arrayZ[0].static_size; } static const unsigned int min_size = (2);
};

struct PairPosFormat1
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);
    unsigned int count = pairSet.len;
    for (unsigned int i = 0; i < count; i++)
      (this+pairSet[i]).collect_glyphs (c, &valueFormat1);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    hb_apply_context_t::skipping_forward_iterator_t skippy_iter (c, buffer->idx, 1);
    if (skippy_iter.has_no_chance ()) return trace.ret (false, 674);

    unsigned int index = (this+coverage).get_coverage (buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 677);

    if (!skippy_iter.next ()) return trace.ret (false, 679);

    return trace.ret ((this+pairSet[index]).apply (c, &valueFormat1, skippy_iter.idx), 681);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;

    unsigned int len1 = valueFormat1.get_len ();
    unsigned int len2 = valueFormat2.get_len ();
    PairSet::sanitize_closure_t closure = {
      this,
      &valueFormat1,
      len1,
      1 + len1 + len2
    };

    return trace.ret (c->check_struct (this) && coverage.sanitize (c, this) && pairSet.sanitize (c, this, &closure), 696);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  ValueFormat valueFormat1;


  ValueFormat valueFormat2;


  OffsetArrayOf<PairSet>
  pairSet;

  public:
  inline void _instance_assertion_on_line_714 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_714_failed[(((sizeof (*this) == (10) + sizeof (pairSet[0]))))?1:-1]; do { typedef __typeof__(*this) _type_714; union _type__type_714_on_line_714_is_not_POD { _type_714 instance; }; } while (0); }; inline void _compiles_assertion_on_line_714 (void) const { (void) pairSet[0].static_size; } static const unsigned int min_size = (10);
};

struct PairPosFormat2
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;


    unsigned int count1 = class1Count;
    const ClassDef &klass1 = this+classDef1;
    for (unsigned int i = 0; i < count1; i++)
      klass1.add_class (c->input, i);

    unsigned int count2 = class2Count;
    const ClassDef &klass2 = this+classDef2;
    for (unsigned int i = 0; i < count2; i++)
      klass2.add_class (c->input, i);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    hb_apply_context_t::skipping_forward_iterator_t skippy_iter (c, buffer->idx, 1);
    if (skippy_iter.has_no_chance ()) return trace.ret (false, 745);

    unsigned int index = (this+coverage).get_coverage (buffer->cur().codepoint);
    if ((index == ((unsigned int) -1))) return trace.ret (false, 748);

    if (!skippy_iter.next ()) return trace.ret (false, 750);

    unsigned int len1 = valueFormat1.get_len ();
    unsigned int len2 = valueFormat2.get_len ();
    unsigned int record_len = len1 + len2;

    unsigned int klass1 = (this+classDef1).get_class (buffer->cur().codepoint);
    unsigned int klass2 = (this+classDef2).get_class (buffer->info[skippy_iter.idx].codepoint);
    if ((klass1 >= class1Count || klass2 >= class2Count)) return trace.ret (false, 758);

    const Value *v = &values[record_len * (klass1 * class2Count + klass2)];
    valueFormat1.apply_value (c->font, c->direction, this,
         v, buffer->cur_pos());
    valueFormat2.apply_value (c->font, c->direction, this,
         v + len1, buffer->pos[skippy_iter.idx]);

    buffer->idx = skippy_iter.idx;
    if (len2)
      buffer->idx++;

    return trace.ret (true, 770);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!(c->check_struct (this)
       && coverage.sanitize (c, this)
       && classDef1.sanitize (c, this)
       && classDef2.sanitize (c, this))) return trace.ret (false, 778);

    unsigned int len1 = valueFormat1.get_len ();
    unsigned int len2 = valueFormat2.get_len ();
    unsigned int stride = len1 + len2;
    unsigned int record_size = valueFormat1.get_size () + valueFormat2.get_size ();
    unsigned int count = (unsigned int) class1Count * (unsigned int) class2Count;
    return trace.ret (c->check_array (values, record_size, count) && valueFormat1.sanitize_values_stride_unsafe (c, this, &values[0], count, stride) && valueFormat2.sanitize_values_stride_unsafe (c, this, &values[len1], count, stride),

 787
# 785 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
           )

                                                                                       ;
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  ValueFormat valueFormat1;


  ValueFormat valueFormat2;


  OffsetTo<ClassDef>
  classDef1;


  OffsetTo<ClassDef>
  classDef2;


  USHORT class1Count;

  USHORT class2Count;

  ValueRecord values;


  public:
  inline void _instance_assertion_on_line_817 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_817_failed[(((sizeof (*this) == (16) + sizeof (values[0]))))?1:-1]; do { typedef __typeof__(*this) _type_817; union _type__type_817_on_line_817_is_not_POD { _type_817 instance; }; } while (0); }; inline void _compiles_assertion_on_line_817 (void) const { (void) values[0].static_size; } static const unsigned int min_size = (16);
};

struct PairPos
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 827);
    case 2: return trace.ret (c->dispatch (u.format2), 828);
    default:return trace.ret (c->default_return_value (), 829);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 835);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 837);
    case 2: return trace.ret (u.format2.sanitize (c), 838);
    default:return trace.ret (true, 839);
    }
  }

  protected:
  union {
  USHORT format;
  PairPosFormat1 format1;
  PairPosFormat2 format2;
  } u;
};


struct EntryExitRecord
{
  friend struct CursivePosFormat1;

  inline bool sanitize (hb_sanitize_context_t *c, void *base) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (entryAnchor.sanitize (c, base) && exitAnchor.sanitize (c, base), 858);
  }

  protected:
  OffsetTo<Anchor>
  entryAnchor;


  OffsetTo<Anchor>
  exitAnchor;


  public:
  inline void _instance_assertion_on_line_871 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_871_failed[(((sizeof (*this) == (4))))?1:-1]; do { typedef __typeof__(*this) _type_871; union _type__type_871_on_line_871_is_not_POD { _type_871 instance; }; } while (0); }; static const unsigned int static_size = (4); static const unsigned int min_size = (4);
};

struct CursivePosFormat1
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+coverage).add_coverage (c->input);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;


    if ((_hb_glyph_info_is_mark (&buffer->cur()))) return trace.ret (false, 893);

    hb_apply_context_t::skipping_forward_iterator_t skippy_iter (c, buffer->idx, 1);
    if (skippy_iter.has_no_chance ()) return trace.ret (false, 896);

    const EntryExitRecord &this_record = entryExitRecord[(this+coverage).get_coverage (buffer->cur().codepoint)];
    if (!this_record.exitAnchor) return trace.ret (false, 899);

    if (!skippy_iter.next ()) return trace.ret (false, 901);

    const EntryExitRecord &next_record = entryExitRecord[(this+coverage).get_coverage (buffer->info[skippy_iter.idx].codepoint)];
    if (!next_record.entryAnchor) return trace.ret (false, 904);

    unsigned int i = buffer->idx;
    unsigned int j = skippy_iter.idx;

    hb_position_t entry_x, entry_y, exit_x, exit_y;
    (this+this_record.exitAnchor).get_anchor (c->font, buffer->info[i].codepoint, &exit_x, &exit_y);
    (this+next_record.entryAnchor).get_anchor (c->font, buffer->info[j].codepoint, &entry_x, &entry_y);

    hb_glyph_position_t *pos = buffer->pos;

    hb_position_t d;

    switch (c->direction) {
      case HB_DIRECTION_LTR:
 pos[i].x_advance = exit_x + pos[i].x_offset;

 d = entry_x + pos[j].x_offset;
 pos[j].x_advance -= d;
 pos[j].x_offset -= d;
 break;
      case HB_DIRECTION_RTL:
 d = exit_x + pos[i].x_offset;
 pos[i].x_advance -= d;
 pos[i].x_offset -= d;

 pos[j].x_advance = entry_x + pos[j].x_offset;
 break;
      case HB_DIRECTION_TTB:
 pos[i].y_advance = exit_y + pos[i].y_offset;

 d = entry_y + pos[j].y_offset;
 pos[j].y_advance -= d;
 pos[j].y_offset -= d;
 break;
      case HB_DIRECTION_BTT:
 d = exit_y + pos[i].y_offset;
 pos[i].y_advance -= d;
 pos[i].y_offset -= d;

 pos[j].y_advance = entry_y;
 break;
      case HB_DIRECTION_INVALID:
      default:
 break;
    }


    if (c->lookup_props & LookupFlag::RightToLeft) {
      pos[i].var.i16[1] = j - i;
      if ((((((unsigned int) (c->direction)) & ~1U) == 4)))
 pos[i].y_offset = entry_y - exit_y;
      else
 pos[i].x_offset = entry_x - exit_x;
    } else {
      pos[j].var.i16[1] = i - j;
      if ((((((unsigned int) (c->direction)) & ~1U) == 4)))
 pos[j].y_offset = exit_y - entry_y;
      else
 pos[j].x_offset = exit_x - entry_x;
    }

    buffer->idx = j;
    return trace.ret (true, 967);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (coverage.sanitize (c, this) && entryExitRecord.sanitize (c, this), 972);
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  coverage;

  ArrayOf<EntryExitRecord>
  entryExitRecord;

  public:
  inline void _instance_assertion_on_line_984 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_984_failed[(((sizeof (*this) == (6) + sizeof (entryExitRecord[0]))))?1:-1]; do { typedef __typeof__(*this) _type_984; union _type__type_984_on_line_984_is_not_POD { _type_984 instance; }; } while (0); }; inline void _compiles_assertion_on_line_984 (void) const { (void) entryExitRecord[0].static_size; } static const unsigned int min_size = (6);
};

struct CursivePos
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 994);
    default:return trace.ret (c->default_return_value (), 995);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1001);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1003);
    default:return trace.ret (true, 1004);
    }
  }

  protected:
  union {
  USHORT format;
  CursivePosFormat1 format1;
  } u;
};


typedef AnchorMatrix BaseArray;




struct MarkBasePosFormat1
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+markCoverage).add_coverage (c->input);
    (this+baseCoverage).add_coverage (c->input);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+markCoverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    unsigned int mark_index = (this+markCoverage).get_coverage (buffer->cur().codepoint);
    if ((mark_index == ((unsigned int) -1))) return trace.ret (false, 1040);


    hb_apply_context_t::skipping_backward_iterator_t skippy_iter (c, buffer->idx, 1);
    skippy_iter.set_lookup_props (LookupFlag::IgnoreMarks);
    do {
      if (!skippy_iter.prev ()) return trace.ret (false, 1046);

      if (0 == _hb_glyph_info_get_lig_comp (&buffer->info[skippy_iter.idx])) break;
      skippy_iter.reject ();
    } while (1);


    if (!_hb_glyph_info_is_base_glyph (&buffer->info[skippy_iter.idx])) { }

    unsigned int base_index = (this+baseCoverage).get_coverage (buffer->info[skippy_iter.idx].codepoint);
    if (base_index == ((unsigned int) -1)) return trace.ret (false, 1056);

    return trace.ret ((this+markArray).apply (c, mark_index, base_index, this+baseArray, classCount, skippy_iter.idx), 1058);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && markCoverage.sanitize (c, this) && baseCoverage.sanitize (c, this) && markArray.sanitize (c, this) && baseArray.sanitize (c, this, (unsigned int) classCount),
 1064
# 1063 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
           )
                                                                                            ;
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  markCoverage;

  OffsetTo<Coverage>
  baseCoverage;

  USHORT classCount;
  OffsetTo<MarkArray>
  markArray;

  OffsetTo<BaseArray>
  baseArray;

  public:
  inline void _instance_assertion_on_line_1083 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1083_failed[(((sizeof (*this) == (12))))?1:-1]; do { typedef __typeof__(*this) _type_1083; union _type__type_1083_on_line_1083_is_not_POD { _type_1083 instance; }; } while (0); }; static const unsigned int static_size = (12); static const unsigned int min_size = (12);
};

struct MarkBasePos
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 1093);
    default:return trace.ret (c->default_return_value (), 1094);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1100);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1102);
    default:return trace.ret (true, 1103);
    }
  }

  protected:
  union {
  USHORT format;
  MarkBasePosFormat1 format1;
  } u;
};


typedef AnchorMatrix LigatureAttach;




typedef OffsetListOf<LigatureAttach> LigatureArray;




struct MarkLigPosFormat1
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+markCoverage).add_coverage (c->input);
    (this+ligatureCoverage).add_coverage (c->input);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+markCoverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    unsigned int mark_index = (this+markCoverage).get_coverage (buffer->cur().codepoint);
    if ((mark_index == ((unsigned int) -1))) return trace.ret (false, 1144);


    hb_apply_context_t::skipping_backward_iterator_t skippy_iter (c, buffer->idx, 1);
    skippy_iter.set_lookup_props (LookupFlag::IgnoreMarks);
    if (!skippy_iter.prev ()) return trace.ret (false, 1149);


    if (!_hb_glyph_info_is_ligature (&buffer->info[skippy_iter.idx])) { }

    unsigned int j = skippy_iter.idx;
    unsigned int lig_index = (this+ligatureCoverage).get_coverage (buffer->info[j].codepoint);
    if (lig_index == ((unsigned int) -1)) return trace.ret (false, 1156);

    const LigatureArray& lig_array = this+ligatureArray;
    const LigatureAttach& lig_attach = lig_array[lig_index];


    unsigned int comp_count = lig_attach.rows;
    if ((!comp_count)) return trace.ret (false, 1163);





    unsigned int comp_index;
    unsigned int lig_id = _hb_glyph_info_get_lig_id (&buffer->info[j]);
    unsigned int mark_id = _hb_glyph_info_get_lig_id (&buffer->cur());
    unsigned int mark_comp = _hb_glyph_info_get_lig_comp (&buffer->cur());
    if (lig_id && lig_id == mark_id && mark_comp > 0)
      comp_index = MIN (comp_count, _hb_glyph_info_get_lig_comp (&buffer->cur())) - 1;
    else
      comp_index = comp_count - 1;

    return trace.ret ((this+markArray).apply (c, mark_index, comp_index, lig_attach, classCount, j), 1178);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && markCoverage.sanitize (c, this) && ligatureCoverage.sanitize (c, this) && markArray.sanitize (c, this) && ligatureArray.sanitize (c, this, (unsigned int) classCount),
 1184
# 1183 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
           )
                                                                                                ;
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  markCoverage;

  OffsetTo<Coverage>
  ligatureCoverage;


  USHORT classCount;
  OffsetTo<MarkArray>
  markArray;

  OffsetTo<LigatureArray>
  ligatureArray;

  public:
  inline void _instance_assertion_on_line_1204 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1204_failed[(((sizeof (*this) == (12))))?1:-1]; do { typedef __typeof__(*this) _type_1204; union _type__type_1204_on_line_1204_is_not_POD { _type_1204 instance; }; } while (0); }; static const unsigned int static_size = (12); static const unsigned int min_size = (12);
};

struct MarkLigPos
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 1214);
    default:return trace.ret (c->default_return_value (), 1215);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1221);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1223);
    default:return trace.ret (true, 1224);
    }
  }

  protected:
  union {
  USHORT format;
  MarkLigPosFormat1 format1;
  } u;
};


typedef AnchorMatrix Mark2Array;




struct MarkMarkPosFormat1
{
  inline void collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    (this+mark1Coverage).add_coverage (c->input);
    (this+mark2Coverage).add_coverage (c->input);
  }

  inline const Coverage &get_coverage (void) const
  {
    return this+mark1Coverage;
  }

  inline bool apply (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    hb_buffer_t *buffer = c->buffer;
    unsigned int mark1_index = (this+mark1Coverage).get_coverage (buffer->cur().codepoint);
    if ((mark1_index == ((unsigned int) -1))) return trace.ret (false, 1260);


    hb_apply_context_t::skipping_backward_iterator_t skippy_iter (c, buffer->idx, 1);
    skippy_iter.set_lookup_props (c->lookup_props & ~LookupFlag::IgnoreFlags);
    if (!skippy_iter.prev ()) return trace.ret (false, 1265);

    if (!_hb_glyph_info_is_mark (&buffer->info[skippy_iter.idx])) { return trace.ret (false, 1267); }

    unsigned int j = skippy_iter.idx;

    unsigned int id1 = _hb_glyph_info_get_lig_id (&buffer->cur());
    unsigned int id2 = _hb_glyph_info_get_lig_id (&buffer->info[j]);
    unsigned int comp1 = _hb_glyph_info_get_lig_comp (&buffer->cur());
    unsigned int comp2 = _hb_glyph_info_get_lig_comp (&buffer->info[j]);

    if ((id1 == id2)) {
      if (id1 == 0)
 goto good;
      else if (comp1 == comp2)
        goto good;
    } else {


      if ((id1 > 0 && !comp1) || (id2 > 0 && !comp2))
 goto good;
    }


    return trace.ret (false, 1289);

    good:
    unsigned int mark2_index = (this+mark2Coverage).get_coverage (buffer->info[j].codepoint);
    if (mark2_index == ((unsigned int) -1)) return trace.ret (false, 1293);

    return trace.ret ((this+mark1Array).apply (c, mark1_index, mark2_index, this+mark2Array, classCount, j), 1295);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && mark1Coverage.sanitize (c, this) && mark2Coverage.sanitize (c, this) && mark1Array.sanitize (c, this) && mark2Array.sanitize (c, this, (unsigned int) classCount),

 1302
# 1300 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
           )

                                                                ;
  }

  protected:
  USHORT format;
  OffsetTo<Coverage>
  mark1Coverage;


  OffsetTo<Coverage>
  mark2Coverage;


  USHORT classCount;
  OffsetTo<MarkArray>
  mark1Array;

  OffsetTo<Mark2Array>
  mark2Array;

  public:
  inline void _instance_assertion_on_line_1323 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1323_failed[(((sizeof (*this) == (12))))?1:-1]; do { typedef __typeof__(*this) _type_1323; union _type__type_1323_on_line_1323_is_not_POD { _type_1323 instance; }; } while (0); }; static const unsigned int static_size = (12); static const unsigned int min_size = (12);
};

struct MarkMarkPos
{
  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) u.format);;
    switch (u.format) {
    case 1: return trace.ret (c->dispatch (u.format1), 1333);
    default:return trace.ret (c->default_return_value (), 1334);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.format.sanitize (c)) return trace.ret (false, 1340);
    switch (u.format) {
    case 1: return trace.ret (u.format1.sanitize (c), 1342);
    default:return trace.ret (true, 1343);
    }
  }

  protected:
  union {
  USHORT format;
  MarkMarkPosFormat1 format1;
  } u;
};


struct ContextPos : Context {};

struct ChainContextPos : ChainContext {};

struct ExtensionPos : Extension<ExtensionPos>
{
  typedef struct PosLookupSubTable LookupSubTable;
};
# 1371 "../../../libs/harfbuzz-ng/src/hb-ot-layout-gpos-table.hh"
struct PosLookupSubTable
{
  friend struct PosLookup;

  enum Type {
    Single = 1,
    Pair = 2,
    Cursive = 3,
    MarkBase = 4,
    MarkLig = 5,
    MarkMark = 6,
    Context = 7,
    ChainContext = 8,
    Extension = 9
  };

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c, unsigned int lookup_type) const
  {
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) lookup_type);;
    switch (lookup_type) {
    case Single: return trace.ret (u.single.dispatch (c), 1392);
    case Pair: return trace.ret (u.pair.dispatch (c), 1393);
    case Cursive: return trace.ret (u.cursive.dispatch (c), 1394);
    case MarkBase: return trace.ret (u.markBase.dispatch (c), 1395);
    case MarkLig: return trace.ret (u.markLig.dispatch (c), 1396);
    case MarkMark: return trace.ret (u.markMark.dispatch (c), 1397);
    case Context: return trace.ret (u.context.dispatch (c), 1398);
    case ChainContext: return trace.ret (u.chainContext.dispatch (c), 1399);
    case Extension: return trace.ret (u.extension.dispatch (c), 1400);
    default: return trace.ret (c->default_return_value (), 1401);
    }
  }

  inline bool sanitize (hb_sanitize_context_t *c, unsigned int lookup_type) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if (!u.header.sub_format.sanitize (c))
      return trace.ret (false, 1408);
    switch (lookup_type) {
    case Single: return trace.ret (u.single.sanitize (c), 1410);
    case Pair: return trace.ret (u.pair.sanitize (c), 1411);
    case Cursive: return trace.ret (u.cursive.sanitize (c), 1412);
    case MarkBase: return trace.ret (u.markBase.sanitize (c), 1413);
    case MarkLig: return trace.ret (u.markLig.sanitize (c), 1414);
    case MarkMark: return trace.ret (u.markMark.sanitize (c), 1415);
    case Context: return trace.ret (u.context.sanitize (c), 1416);
    case ChainContext: return trace.ret (u.chainContext.sanitize (c), 1417);
    case Extension: return trace.ret (u.extension.sanitize (c), 1418);
    default: return trace.ret (true, 1419);
    }
  }

  protected:
  union {
  struct {
    USHORT sub_format;
  } header;
  SinglePos single;
  PairPos pair;
  CursivePos cursive;
  MarkBasePos markBase;
  MarkLigPos markLig;
  MarkMarkPos markMark;
  ContextPos context;
  ChainContextPos chainContext;
  ExtensionPos extension;
  } u;
  public:
  inline void _instance_assertion_on_line_1439 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1439_failed[(((this->u.header.sub_format.static_size == (2))))?1:-1]; do { typedef __typeof__(*this) _type_1439; union _type__type_1439_on_line_1439_is_not_POD { _type_1439 instance; }; } while (0); }; static const unsigned int min_size = (2);
};


struct PosLookup : Lookup
{
  inline const PosLookupSubTable& get_subtable (unsigned int i) const
  { return this+CastR<OffsetArrayOf<PosLookupSubTable> > (subTable)[i]; }

  inline bool is_reverse (void) const
  {
    return false;
  }

  inline hb_collect_glyphs_context_t::return_t collect_glyphs (hb_collect_glyphs_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), hb_void_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    c->set_recurse_func (__null);
    return trace.ret (dispatch (c), 1457);
  }

  template <typename set_t>
  inline void add_coverage (set_t *glyphs) const
  {
    hb_get_coverage_context_t c;
    const Coverage *last = __null;
    unsigned int count = get_subtable_count ();
    for (unsigned int i = 0; i < count; i++) {
      const Coverage *coverage = &get_subtable (i).dispatch (&c, get_type ());
      if (coverage != last) {
        coverage->add_coverage (glyphs);
        last = coverage;
      }
    }
  }

  inline bool apply_once (hb_apply_context_t *c) const
  {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "idx %d codepoint %u", c->buffer->idx, c->buffer->cur().codepoint);;
    if (!c->check_glyph_property (&c->buffer->cur(), c->lookup_props))
      return trace.ret (false, 1479);
    return trace.ret (dispatch (c), 1480);
  }

  static bool apply_recurse_func (hb_apply_context_t *c, unsigned int lookup_index);

  template <typename context_t>
  static inline typename context_t::return_t dispatch_recurse_func (context_t *c, unsigned int lookup_index);

  template <typename context_t>
  inline typename context_t::return_t dispatch (context_t *c) const
  {
    unsigned int lookup_type = get_type ();
    hb_auto_trace_t<context_t::max_debug_depth, typename context_t::return_t> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "format %d", (int) lookup_type);;
    unsigned int count = get_subtable_count ();
    for (unsigned int i = 0; i < count; i++) {
      typename context_t::return_t r = get_subtable (i).dispatch (c, lookup_type);
      if (c->stop_sublookup_iteration (r))
        return trace.ret (r, 1497);
    }
    return trace.ret (c->default_return_value (), 1499);
  }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!Lookup::sanitize (c))) return trace.ret (false, 1504);
    OffsetArrayOf<PosLookupSubTable> &list = CastR<OffsetArrayOf<PosLookupSubTable> > (subTable);
    return trace.ret (list.sanitize (c, this, get_type ()), 1506);
  }
};

typedef OffsetListOf<PosLookup> PosLookupList;





struct GPOS : GSUBGPOS
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S'))));

  inline const PosLookup& get_lookup (unsigned int i) const
  { return CastR<PosLookup> (GSUBGPOS::get_lookup (i)); }

  static inline void position_start (hb_font_t *font, hb_buffer_t *buffer);
  static inline void position_finish (hb_font_t *font, hb_buffer_t *buffer);

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    if ((!GSUBGPOS::sanitize (c))) return trace.ret (false, 1528);
    OffsetTo<PosLookupList> &list = CastR<OffsetTo<PosLookupList> > (lookupList);
    return trace.ret (list.sanitize (c, this), 1530);
  }
  public:
  inline void _instance_assertion_on_line_1533 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_1533_failed[(((sizeof (*this) == (10))))?1:-1]; do { typedef __typeof__(*this) _type_1533; union _type__type_1533_on_line_1533_is_not_POD { _type_1533 instance; }; } while (0); }; static const unsigned int static_size = (10); static const unsigned int min_size = (10);
};


static void
fix_cursive_minor_offset (hb_glyph_position_t *pos, unsigned int i, hb_direction_t direction)
{
  unsigned int j = pos[i].var.i16[1];
  if ((!j))
    return;

  j += i;

  pos[i].var.i16[1] = 0;

  fix_cursive_minor_offset (pos, j, direction);

  if (((((unsigned int) (direction)) & ~1U) == 4))
    pos[i].y_offset += pos[j].y_offset;
  else
    pos[i].x_offset += pos[j].x_offset;
}

static void
fix_mark_attachment (hb_glyph_position_t *pos, unsigned int i, hb_direction_t direction)
{
  if ((!(pos[i].var.u16[0])))
    return;

  unsigned int j = i - pos[i].var.u16[0];

  pos[i].x_offset += pos[j].x_offset;
  pos[i].y_offset += pos[j].y_offset;

  if (((((unsigned int) (direction)) & ~2U) == 4))
    for (unsigned int k = j; k < i; k++) {
      pos[i].x_offset -= pos[k].x_advance;
      pos[i].y_offset -= pos[k].y_advance;
    }
  else
    for (unsigned int k = j + 1; k < i + 1; k++) {
      pos[i].x_offset += pos[k].x_advance;
      pos[i].y_offset += pos[k].y_advance;
    }
}

void
GPOS::position_start (hb_font_t *font __attribute__((unused)), hb_buffer_t *buffer)
{
  buffer->clear_positions ();

  unsigned int count = buffer->len;
  for (unsigned int i = 0; i < count; i++)
    buffer->pos[i].var.u16[0] = buffer->pos[i].var.i16[1] = 0;
}

void
GPOS::position_finish (hb_font_t *font __attribute__((unused)), hb_buffer_t *buffer)
{
  _hb_buffer_assert_gsubgpos_vars (buffer);

  unsigned int len;
  hb_glyph_position_t *pos = hb_buffer_get_glyph_positions (buffer, &len);
  hb_direction_t direction = buffer->props.direction;


  for (unsigned int i = 0; i < len; i++)
    fix_cursive_minor_offset (pos, i, direction);


  for (unsigned int i = 0; i < len; i++)
    fix_mark_attachment (pos, i, direction);
}




template <typename context_t>
           inline typename context_t::return_t PosLookup::dispatch_recurse_func (context_t *c, unsigned int lookup_index)
{
  const GPOS &gpos = *(((hb_ot_layout_t *) c->face->shaper_data.ot)->gpos);
  const PosLookup &l = gpos.get_lookup (lookup_index);
  return l.dispatch (c);
}

           inline bool PosLookup::apply_recurse_func (hb_apply_context_t *c, unsigned int lookup_index)
{
  const GPOS &gpos = *(((hb_ot_layout_t *) c->face->shaper_data.ot)->gpos);
  const PosLookup &l = gpos.get_lookup (lookup_index);
  unsigned int saved_lookup_props = c->lookup_props;
  c->set_lookup (l);
  bool ret = l.apply_once (c);
  c->lookup_props = saved_lookup_props;
  return ret;
}






}
# 36 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc" 2
# 1 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh" 1
# 34 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh"
namespace OT {






typedef IndexArray JstfModList;






typedef OffsetListOf<PosLookup> JstfMax;






struct JstfPriority
{
  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (c->check_struct (this) && shrinkageEnableGSUB.sanitize (c, this) && shrinkageDisableGSUB.sanitize (c, this) && shrinkageEnableGPOS.sanitize (c, this) && shrinkageDisableGPOS.sanitize (c, this) && shrinkageJstfMax.sanitize (c, this) && extensionEnableGSUB.sanitize (c, this) && extensionDisableGSUB.sanitize (c, this) && extensionEnableGPOS.sanitize (c, this) && extensionDisableGPOS.sanitize (c, this) && extensionJstfMax.sanitize (c, this),
# 69 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh"
 69
# 59 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh"
           )
# 69 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh"
                                        ;
  }

  protected:
  OffsetTo<JstfModList>
  shrinkageEnableGSUB;


  OffsetTo<JstfModList>
  shrinkageDisableGSUB;


  OffsetTo<JstfModList>
  shrinkageEnableGPOS;


  OffsetTo<JstfModList>
  shrinkageDisableGPOS;


  OffsetTo<JstfMax>
  shrinkageJstfMax;


  OffsetTo<JstfModList>
  extensionEnableGSUB;


  OffsetTo<JstfModList>
  extensionDisableGSUB;


  OffsetTo<JstfModList>
  extensionEnableGPOS;


  OffsetTo<JstfModList>
  extensionDisableGPOS;


  OffsetTo<JstfMax>
  extensionJstfMax;



  public:
  inline void _instance_assertion_on_line_115 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_115_failed[(((sizeof (*this) == (20))))?1:-1]; do { typedef __typeof__(*this) _type_115; union _type__type_115_on_line_115_is_not_POD { _type_115 instance; }; } while (0); }; static const unsigned int static_size = (20); static const unsigned int min_size = (20);
};






struct JstfLangSys : OffsetListOf<JstfPriority>
{
  inline bool sanitize (hb_sanitize_context_t *c,
   const Record<JstfLangSys>::sanitize_closure_t * = __null) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (OffsetListOf<JstfPriority>::sanitize (c), 128);
  }
};






typedef SortedArrayOf<GlyphID> ExtenderGlyphs;






struct JstfScript
{
  inline unsigned int get_lang_sys_count (void) const
  { return langSys.len; }
  inline const Tag& get_lang_sys_tag (unsigned int i) const
  { return langSys.get_tag (i); }
  inline unsigned int get_lang_sys_tags (unsigned int start_offset,
      unsigned int *lang_sys_count ,
      hb_tag_t *lang_sys_tags ) const
  { return langSys.get_tags (start_offset, lang_sys_count, lang_sys_tags); }
  inline const JstfLangSys& get_lang_sys (unsigned int i) const
  {
    if (i == Index::NOT_FOUND_INDEX) return get_default_lang_sys ();
    return this+langSys[i].offset;
  }
  inline bool find_lang_sys_index (hb_tag_t tag, unsigned int *index) const
  { return langSys.find_index (tag, index); }

  inline bool has_default_lang_sys (void) const { return defaultLangSys != 0; }
  inline const JstfLangSys& get_default_lang_sys (void) const { return this+defaultLangSys; }

  inline bool sanitize (hb_sanitize_context_t *c,
   const Record<JstfScript>::sanitize_closure_t * = __null) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (extenderGlyphs.sanitize (c, this) && defaultLangSys.sanitize (c, this) && langSys.sanitize (c, this),

 170
# 168 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh"
           )

                               ;
  }

  protected:
  OffsetTo<ExtenderGlyphs>
  extenderGlyphs;

  OffsetTo<JstfLangSys>
  defaultLangSys;

  RecordArrayOf<JstfLangSys>
  langSys;

  public:
  inline void _instance_assertion_on_line_184 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_184_failed[(((sizeof (*this) == (6) + sizeof (langSys[0]))))?1:-1]; do { typedef __typeof__(*this) _type_184; union _type__type_184_on_line_184_is_not_POD { _type_184 instance; }; } while (0); }; inline void _compiles_assertion_on_line_184 (void) const { (void) langSys[0].static_size; } static const unsigned int min_size = (6);
};






struct JSTF
{
  static const hb_tag_t tableTag = ((hb_tag_t)((((uint8_t)('J'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('T'))<<8)|((uint8_t)('F'))));

  inline unsigned int get_script_count (void) const
  { return scriptList.len; }
  inline const Tag& get_script_tag (unsigned int i) const
  { return scriptList.get_tag (i); }
  inline unsigned int get_script_tags (unsigned int start_offset,
           unsigned int *script_count ,
           hb_tag_t *script_tags ) const
  { return scriptList.get_tags (start_offset, script_count, script_tags); }
  inline const JstfScript& get_script (unsigned int i) const
  { return this+scriptList[i].offset; }
  inline bool find_script_index (hb_tag_t tag, unsigned int *index) const
  { return scriptList.find_index (tag, index); }

  inline bool sanitize (hb_sanitize_context_t *c) {
    hb_auto_trace_t<(0 +0), bool> trace (&c->debug_depth, c->get_name (), this, __PRETTY_FUNCTION__, "");;
    return trace.ret (version.sanitize (c) && (version.major == 1) && scriptList.sanitize (c, this),
 212
# 211 "../../../libs/harfbuzz-ng/src/hb-ot-layout-jstf-table.hh"
           )
                                  ;
  }

  protected:
  FixedVersion version;

  RecordArrayOf<JstfScript>
  scriptList;

  public:
  inline void _instance_assertion_on_line_222 (void) const { __attribute__((unused)) typedef int _static_assert_on_line_222_failed[(((sizeof (*this) == (6) + sizeof (scriptList[0]))))?1:-1]; do { typedef __typeof__(*this) _type_222; union _type__type_222_on_line_222_is_not_POD { _type_222 instance; }; } while (0); }; inline void _compiles_assertion_on_line_222 (void) const { (void) scriptList[0].static_size; } static const unsigned int min_size = (6);
};


}
# 37 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc" 2

# 1 "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh" 1
# 35 "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh"
struct hb_ot_shape_plan_t;

static const hb_tag_t table_tags[2] = {((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))), ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S'))))};

struct hb_ot_map_t
{
  friend struct hb_ot_map_builder_t;

  public:

  struct feature_map_t {
    hb_tag_t tag;
    unsigned int index[2];
    unsigned int stage[2];
    unsigned int shift;
    hb_mask_t mask;
    hb_mask_t _1_mask;
    unsigned int needs_fallback : 1;
    unsigned int auto_zwj : 1;

    static int cmp (const feature_map_t *a, const feature_map_t *b)
    { return a->tag < b->tag ? -1 : a->tag > b->tag ? 1 : 0; }
  };

  struct lookup_map_t {
    unsigned short index;
    unsigned short auto_zwj : 1;
    hb_mask_t mask;

    static int cmp (const lookup_map_t *a, const lookup_map_t *b)
    { return a->index < b->index ? -1 : a->index > b->index ? 1 : 0; }
  };

  typedef void (*pause_func_t) (const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer);

  struct stage_map_t {
    unsigned int last_lookup;
    pause_func_t pause_func;
  };


  hb_ot_map_t (void) { memset (this, 0, sizeof (*this)); }

  inline hb_mask_t get_global_mask (void) const { return global_mask; }

  inline hb_mask_t get_mask (hb_tag_t feature_tag, unsigned int *shift = __null) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    if (shift) *shift = map ? map->shift : 0;
    return map ? map->mask : 0;
  }

  inline bool needs_fallback (hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->needs_fallback : false;
  }

  inline hb_mask_t get_1_mask (hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->_1_mask : 0;
  }

  inline unsigned int get_feature_index (unsigned int table_index, hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->index[table_index] : 0xFFFFu;
  }

  inline unsigned int get_feature_stage (unsigned int table_index, hb_tag_t feature_tag) const {
    const feature_map_t *map = features.bsearch (&feature_tag);
    return map ? map->stage[table_index] : (unsigned int) -1;
  }

  inline void get_stage_lookups (unsigned int table_index, unsigned int stage,
     const struct lookup_map_t **plookups, unsigned int *lookup_count) const {
    if ((stage == (unsigned int) -1)) {
      *plookups = __null;
      *lookup_count = 0;
      return;
    }
    ((stage <= stages[table_index].len) ? static_cast<void> (0) : __assert_fail ("stage <= stages[table_index].len", "../../../libs/harfbuzz-ng/src/hb-ot-map-private.hh", 113, __PRETTY_FUNCTION__));
    unsigned int start = stage ? stages[table_index][stage - 1].last_lookup : 0;
    unsigned int end = stage < stages[table_index].len ? stages[table_index][stage].last_lookup : lookups[table_index].len;
    *plookups = &lookups[table_index][start];
    *lookup_count = end - start;
  }

  __attribute__((__visibility__("hidden"))) void collect_lookups (unsigned int table_index, hb_set_t *lookups) const;
  template <typename Proxy>
  __attribute__((__visibility__("hidden"))) inline void apply (const Proxy &proxy,
     const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;
  __attribute__((__visibility__("hidden"))) void substitute (const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;
  __attribute__((__visibility__("hidden"))) void position (const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;

  inline void finish (void) {
    features.finish ();
    for (unsigned int table_index = 0; table_index < 2; table_index++)
    {
      lookups[table_index].finish ();
      stages[table_index].finish ();
    }
  }

  public:
  hb_tag_t chosen_script[2];
  bool found_script[2];

  private:

  __attribute__((__visibility__("hidden"))) void add_lookups (hb_face_t *face,
    unsigned int table_index,
    unsigned int feature_index,
    hb_mask_t mask,
    bool auto_zwj);

  hb_mask_t global_mask;

  hb_prealloced_array_t<feature_map_t, 8> features;
  hb_prealloced_array_t<lookup_map_t, 32> lookups[2];
  hb_prealloced_array_t<stage_map_t, 4> stages[2];
};

enum hb_ot_map_feature_flags_t {
  F_NONE = 0x0000u,
  F_GLOBAL = 0x0001u,
  F_HAS_FALLBACK = 0x0002u,
  F_MANUAL_ZWJ = 0x0004u
};


static inline hb_ot_map_feature_flags_t
operator | (hb_ot_map_feature_flags_t l, hb_ot_map_feature_flags_t r)
{ return hb_ot_map_feature_flags_t ((unsigned int) l | (unsigned int) r); }
static inline hb_ot_map_feature_flags_t
operator & (hb_ot_map_feature_flags_t l, hb_ot_map_feature_flags_t r)
{ return hb_ot_map_feature_flags_t ((unsigned int) l & (unsigned int) r); }
static inline hb_ot_map_feature_flags_t
operator ~ (hb_ot_map_feature_flags_t r)
{ return hb_ot_map_feature_flags_t (~(unsigned int) r); }
static inline hb_ot_map_feature_flags_t&
operator |= (hb_ot_map_feature_flags_t &l, hb_ot_map_feature_flags_t r)
{ l = l | r; return l; }
static inline hb_ot_map_feature_flags_t&
operator &= (hb_ot_map_feature_flags_t& l, hb_ot_map_feature_flags_t r)
{ l = l & r; return l; }


struct hb_ot_map_builder_t
{
  public:

  __attribute__((__visibility__("hidden"))) hb_ot_map_builder_t (hb_face_t *face_,
       const hb_segment_properties_t *props_);

  __attribute__((__visibility__("hidden"))) void add_feature (hb_tag_t tag, unsigned int value,
    hb_ot_map_feature_flags_t flags);

  inline void add_global_bool_feature (hb_tag_t tag)
  { add_feature (tag, 1, F_GLOBAL); }

  inline void add_gsub_pause (hb_ot_map_t::pause_func_t pause_func)
  { add_pause (0, pause_func); }
  inline void add_gpos_pause (hb_ot_map_t::pause_func_t pause_func)
  { add_pause (1, pause_func); }

  __attribute__((__visibility__("hidden"))) void compile (struct hb_ot_map_t &m);

  inline void finish (void) {
    feature_infos.finish ();
    for (unsigned int table_index = 0; table_index < 2; table_index++)
    {
      stages[table_index].finish ();
    }
  }

  private:

  struct feature_info_t {
    hb_tag_t tag;
    unsigned int seq;
    unsigned int max_value;
    hb_ot_map_feature_flags_t flags;
    unsigned int default_value;
    unsigned int stage[2];

    static int cmp (const feature_info_t *a, const feature_info_t *b)
    { return (a->tag != b->tag) ? (a->tag < b->tag ? -1 : 1) : (a->seq < b->seq ? -1 : 1); }
  };

  struct stage_info_t {
    unsigned int index;
    hb_ot_map_t::pause_func_t pause_func;
  };

  __attribute__((__visibility__("hidden"))) void add_pause (unsigned int table_index, hb_ot_map_t::pause_func_t pause_func);

  public:

  hb_face_t *face;
  hb_segment_properties_t props;

  hb_tag_t chosen_script[2];
  bool found_script[2];
  unsigned int script_index[2], language_index[2];

  private:

  unsigned int current_stage[2];
  hb_prealloced_array_t<feature_info_t, 32> feature_infos;
  hb_prealloced_array_t<stage_info_t, 8> stages[2];
};
# 39 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc" 2





static inline bool hb_ot_shaper_face_data_ensure (hb_face_t *face) { retry: struct hb_ot_shaper_face_data_t *data = (struct hb_ot_shaper_face_data_t *) ((void *) *(&(* (struct hb_ot_shaper_face_data_t **) &(face)->shaper_data.ot))); if ((!data)) { data = _hb_ot_shaper_face_data_create (face); if ((!data)) data = (struct hb_ot_shaper_face_data_t *) ((void *) -1); if (!(* (void **) (&(* (struct hb_ot_shaper_face_data_t **) &(face)->shaper_data.ot)) == (void *) (__null) ? (* (void **) (&(* (struct hb_ot_shaper_face_data_t **) &(face)->shaper_data.ot)) = (void *) (data), true) : false)) { if (data && data != ((void *) -1) && data != ((void *) +1)) _hb_ot_shaper_face_data_destroy (data); goto retry; } } return data != __null && !((void *) (data) == ((void *) -1)); }

hb_ot_layout_t *
_hb_ot_layout_create (hb_face_t *face)
{
  hb_ot_layout_t *layout = (hb_ot_layout_t *) calloc (1, sizeof (hb_ot_layout_t));
  if ((!layout))
    return __null;

  layout->gdef_blob = OT::Sanitizer<OT::GDEF>::sanitize (face->reference_table (((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('D'))<<16)|(((uint8_t)('E'))<<8)|((uint8_t)('F'))))));
  layout->gdef = OT::Sanitizer<OT::GDEF>::lock_instance (layout->gdef_blob);

  layout->gsub_blob = OT::Sanitizer<OT::GSUB>::sanitize (face->reference_table (((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B'))))));
  layout->gsub = OT::Sanitizer<OT::GSUB>::lock_instance (layout->gsub_blob);

  layout->gpos_blob = OT::Sanitizer<OT::GPOS>::sanitize (face->reference_table (((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S'))))));
  layout->gpos = OT::Sanitizer<OT::GPOS>::lock_instance (layout->gpos_blob);

  layout->gsub_lookup_count = layout->gsub->get_lookup_count ();
  layout->gpos_lookup_count = layout->gpos->get_lookup_count ();

  layout->gsub_accels = (hb_ot_layout_lookup_accelerator_t *) calloc (layout->gsub->get_lookup_count (), sizeof (hb_ot_layout_lookup_accelerator_t));
  layout->gpos_accels = (hb_ot_layout_lookup_accelerator_t *) calloc (layout->gpos->get_lookup_count (), sizeof (hb_ot_layout_lookup_accelerator_t));

  if (((layout->gsub_lookup_count && !layout->gsub_accels) || (layout->gpos_lookup_count && !layout->gpos_accels))
                                                      )
  {
    _hb_ot_layout_destroy (layout);
    return __null;
  }

  for (unsigned int i = 0; i < layout->gsub_lookup_count; i++)
    layout->gsub_accels[i].init (layout->gsub->get_lookup (i));
  for (unsigned int i = 0; i < layout->gpos_lookup_count; i++)
    layout->gpos_accels[i].init (layout->gpos->get_lookup (i));

  return layout;
}

void
_hb_ot_layout_destroy (hb_ot_layout_t *layout)
{
  for (unsigned int i = 0; i < layout->gsub_lookup_count; i++)
    layout->gsub_accels[i].fini ();
  for (unsigned int i = 0; i < layout->gpos_lookup_count; i++)
    layout->gpos_accels[i].fini ();

  free (layout->gsub_accels);
  free (layout->gpos_accels);

  hb_blob_destroy (layout->gdef_blob);
  hb_blob_destroy (layout->gsub_blob);
  hb_blob_destroy (layout->gpos_blob);

  free (layout);
}

static inline const OT::GDEF&
_get_gdef (hb_face_t *face)
{
  if ((!hb_ot_shaper_face_data_ensure (face))) return OT::Null<OT::GDEF>();
  return *((hb_ot_layout_t *) face->shaper_data.ot)->gdef;
}
static inline const OT::GSUB&
_get_gsub (hb_face_t *face)
{
  if ((!hb_ot_shaper_face_data_ensure (face))) return OT::Null<OT::GSUB>();
  return *((hb_ot_layout_t *) face->shaper_data.ot)->gsub;
}
static inline const OT::GPOS&
_get_gpos (hb_face_t *face)
{
  if ((!hb_ot_shaper_face_data_ensure (face))) return OT::Null<OT::GPOS>();
  return *((hb_ot_layout_t *) face->shaper_data.ot)->gpos;
}






hb_bool_t
hb_ot_layout_has_glyph_classes (hb_face_t *face)
{
  return _get_gdef (face).has_glyph_classes ();
}

hb_ot_layout_glyph_class_t
hb_ot_layout_get_glyph_class (hb_face_t *face,
         hb_codepoint_t glyph)
{
  return (hb_ot_layout_glyph_class_t) _get_gdef (face).get_glyph_class (glyph);
}

void
hb_ot_layout_get_glyphs_in_class (hb_face_t *face,
      hb_ot_layout_glyph_class_t klass,
      hb_set_t *glyphs )
{
  return _get_gdef (face).get_glyphs_in_class (klass, glyphs);
}

unsigned int
hb_ot_layout_get_attach_points (hb_face_t *face,
    hb_codepoint_t glyph,
    unsigned int start_offset,
    unsigned int *point_count ,
    unsigned int *point_array )
{
  return _get_gdef (face).get_attach_points (glyph, start_offset, point_count, point_array);
}

unsigned int
hb_ot_layout_get_ligature_carets (hb_font_t *font,
      hb_direction_t direction,
      hb_codepoint_t glyph,
      unsigned int start_offset,
      unsigned int *caret_count ,
      int *caret_array )
{
  return _get_gdef (font->face).get_lig_carets (font, direction, glyph, start_offset, caret_count, caret_array);
}






static const OT::GSUBGPOS&
get_gsubgpos_table (hb_face_t *face,
      hb_tag_t table_tag)
{
  switch (table_tag) {
    case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))): return _get_gsub (face);
    case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S')))): return _get_gpos (face);
    default: return OT::Null<OT::GSUBGPOS>();
  }
}


unsigned int
hb_ot_layout_table_get_script_tags (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int start_offset,
        unsigned int *script_count ,
        hb_tag_t *script_tags )
{
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);

  return g.get_script_tags (start_offset, script_count, script_tags);
}



hb_bool_t
hb_ot_layout_table_find_script (hb_face_t *face,
    hb_tag_t table_tag,
    hb_tag_t script_tag,
    unsigned int *script_index)
{
  __attribute__((unused)) typedef int _static_assert_on_line_204_failed[(((OT::Index::NOT_FOUND_INDEX == 0xFFFFu)))?1:-1];
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);

  if (g.find_script_index (script_tag, script_index))
    return true;


  if (g.find_script_index (((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('F'))<<16)|(((uint8_t)('L'))<<8)|((uint8_t)('T')))), script_index))
    return false;



  if (g.find_script_index (((hb_tag_t)((((uint8_t)('d'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('t')))), script_index))
    return false;



  if (g.find_script_index (((hb_tag_t)((((uint8_t)('l'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('n')))), script_index))
    return false;

  if (script_index) *script_index = 0xFFFFu;
  return false;
}

hb_bool_t
hb_ot_layout_table_choose_script (hb_face_t *face,
      hb_tag_t table_tag,
      const hb_tag_t *script_tags,
      unsigned int *script_index,
      hb_tag_t *chosen_script)
{
  __attribute__((unused)) typedef int _static_assert_on_line_235_failed[(((OT::Index::NOT_FOUND_INDEX == 0xFFFFu)))?1:-1];
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);

  while (*script_tags)
  {
    if (g.find_script_index (*script_tags, script_index)) {
      if (chosen_script)
        *chosen_script = *script_tags;
      return true;
    }
    script_tags++;
  }


  if (g.find_script_index (((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('F'))<<16)|(((uint8_t)('L'))<<8)|((uint8_t)('T')))), script_index)) {
    if (chosen_script)
      *chosen_script = ((hb_tag_t)((((uint8_t)('D'))<<24)|(((uint8_t)('F'))<<16)|(((uint8_t)('L'))<<8)|((uint8_t)('T'))));
    return false;
  }


  if (g.find_script_index (((hb_tag_t)((((uint8_t)('d'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('t')))), script_index)) {
    if (chosen_script)
      *chosen_script = ((hb_tag_t)((((uint8_t)('d'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('t'))));
    return false;
  }



  if (g.find_script_index (((hb_tag_t)((((uint8_t)('l'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('n')))), script_index)) {
    if (chosen_script)
      *chosen_script = ((hb_tag_t)((((uint8_t)('l'))<<24)|(((uint8_t)('a'))<<16)|(((uint8_t)('t'))<<8)|((uint8_t)('n'))));
    return false;
  }

  if (script_index) *script_index = 0xFFFFu;
  if (chosen_script)
    *chosen_script = 0xFFFFu;
  return false;
}

unsigned int
hb_ot_layout_table_get_feature_tags (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int start_offset,
         unsigned int *feature_count ,
         hb_tag_t *feature_tags )
{
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);

  return g.get_feature_tags (start_offset, feature_count, feature_tags);
}


unsigned int
hb_ot_layout_script_get_language_tags (hb_face_t *face,
           hb_tag_t table_tag,
           unsigned int script_index,
           unsigned int start_offset,
           unsigned int *language_count ,
           hb_tag_t *language_tags )
{
  const OT::Script &s = get_gsubgpos_table (face, table_tag).get_script (script_index);

  return s.get_lang_sys_tags (start_offset, language_count, language_tags);
}

hb_bool_t
hb_ot_layout_script_find_language (hb_face_t *face,
       hb_tag_t table_tag,
       unsigned int script_index,
       hb_tag_t language_tag,
       unsigned int *language_index)
{
  __attribute__((unused)) typedef int _static_assert_on_line_309_failed[(((OT::Index::NOT_FOUND_INDEX == 0xFFFFu)))?1:-1];
  const OT::Script &s = get_gsubgpos_table (face, table_tag).get_script (script_index);

  if (s.find_lang_sys_index (language_tag, language_index))
    return true;


  if (s.find_lang_sys_index (((hb_tag_t)((((uint8_t)('d'))<<24)|(((uint8_t)('f'))<<16)|(((uint8_t)('l'))<<8)|((uint8_t)('t')))), language_index))
    return false;

  if (language_index) *language_index = 0xFFFFu;
  return false;
}

hb_bool_t
hb_ot_layout_language_get_required_feature_index (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int *feature_index)
{
  return hb_ot_layout_language_get_required_feature (face,
           table_tag,
           script_index,
           language_index,
           feature_index,
           __null);
}

hb_bool_t
hb_ot_layout_language_get_required_feature (hb_face_t *face,
         hb_tag_t table_tag,
         unsigned int script_index,
         unsigned int language_index,
         unsigned int *feature_index,
         hb_tag_t *feature_tag)
{
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);
  const OT::LangSys &l = g.get_script (script_index).get_lang_sys (language_index);

  unsigned int index = l.get_required_feature_index ();
  if (feature_index) *feature_index = index;
  if (feature_tag) *feature_tag = g.get_feature_tag (index);

  return l.has_required_feature ();
}

unsigned int
hb_ot_layout_language_get_feature_indexes (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        unsigned int start_offset,
        unsigned int *feature_count ,
        unsigned int *feature_indexes )
{
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);
  const OT::LangSys &l = g.get_script (script_index).get_lang_sys (language_index);

  return l.get_feature_indexes (start_offset, feature_count, feature_indexes);
}

unsigned int
hb_ot_layout_language_get_feature_tags (hb_face_t *face,
     hb_tag_t table_tag,
     unsigned int script_index,
     unsigned int language_index,
     unsigned int start_offset,
     unsigned int *feature_count ,
     hb_tag_t *feature_tags )
{
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);
  const OT::LangSys &l = g.get_script (script_index).get_lang_sys (language_index);

  __attribute__((unused)) typedef int _static_assert_on_line_383_failed[(((sizeof (unsigned int) == sizeof (hb_tag_t))))?1:-1];
  unsigned int ret = l.get_feature_indexes (start_offset, feature_count, (unsigned int *) feature_tags);

  if (feature_tags) {
    unsigned int count = *feature_count;
    for (unsigned int i = 0; i < count; i++)
      feature_tags[i] = g.get_feature_tag ((unsigned int) feature_tags[i]);
  }

  return ret;
}


hb_bool_t
hb_ot_layout_language_find_feature (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int script_index,
        unsigned int language_index,
        hb_tag_t feature_tag,
        unsigned int *feature_index)
{
  __attribute__((unused)) typedef int _static_assert_on_line_404_failed[(((OT::Index::NOT_FOUND_INDEX == 0xFFFFu)))?1:-1];
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);
  const OT::LangSys &l = g.get_script (script_index).get_lang_sys (language_index);

  unsigned int num_features = l.get_feature_count ();
  for (unsigned int i = 0; i < num_features; i++) {
    unsigned int f_index = l.get_feature_index (i);

    if (feature_tag == g.get_feature_tag (f_index)) {
      if (feature_index) *feature_index = f_index;
      return true;
    }
  }

  if (feature_index) *feature_index = 0xFFFFu;
  return false;
}

unsigned int
hb_ot_layout_feature_get_lookups (hb_face_t *face,
      hb_tag_t table_tag,
      unsigned int feature_index,
      unsigned int start_offset,
      unsigned int *lookup_count ,
      unsigned int *lookup_indexes )
{
  const OT::GSUBGPOS &g = get_gsubgpos_table (face, table_tag);
  const OT::Feature &f = g.get_feature (feature_index);

  return f.get_lookup_indexes (start_offset, lookup_count, lookup_indexes);
}

unsigned int
hb_ot_layout_table_get_lookup_count (hb_face_t *face,
         hb_tag_t table_tag)
{
  switch (table_tag)
  {
    case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))):
    {
      return ((hb_ot_layout_t *) face->shaper_data.ot)->gsub_lookup_count;
    }
    case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S')))):
    {
      return ((hb_ot_layout_t *) face->shaper_data.ot)->gpos_lookup_count;
    }
  }
  return 0;
}

static void
_hb_ot_layout_collect_lookups_lookups (hb_face_t *face,
           hb_tag_t table_tag,
           unsigned int feature_index,
           hb_set_t *lookup_indexes )
{
  unsigned int lookup_indices[32];
  unsigned int offset, len;

  offset = 0;
  do {
    len = ARRAY_LENGTH (lookup_indices);
    hb_ot_layout_feature_get_lookups (face,
          table_tag,
          feature_index,
          offset, &len,
          lookup_indices);

    for (unsigned int i = 0; i < len; i++)
      lookup_indexes->add (lookup_indices[i]);

    offset += len;
  } while (len == ARRAY_LENGTH (lookup_indices));
}

static void
_hb_ot_layout_collect_lookups_features (hb_face_t *face,
     hb_tag_t table_tag,
     unsigned int script_index,
     unsigned int language_index,
     const hb_tag_t *features,
     hb_set_t *lookup_indexes )
{
  if (!features)
  {
    unsigned int required_feature_index;
    if (hb_ot_layout_language_get_required_feature (face,
          table_tag,
          script_index,
          language_index,
          &required_feature_index,
          __null))
      _hb_ot_layout_collect_lookups_lookups (face,
          table_tag,
          required_feature_index,
          lookup_indexes);


    unsigned int feature_indices[32];
    unsigned int offset, len;

    offset = 0;
    do {
      len = ARRAY_LENGTH (feature_indices);
      hb_ot_layout_language_get_feature_indexes (face,
       table_tag,
       script_index,
       language_index,
       offset, &len,
       feature_indices);

      for (unsigned int i = 0; i < len; i++)
 _hb_ot_layout_collect_lookups_lookups (face,
            table_tag,
            feature_indices[i],
            lookup_indexes);

      offset += len;
    } while (len == ARRAY_LENGTH (feature_indices));
  }
  else
  {
    for (; *features; features++)
    {
      unsigned int feature_index;
      if (hb_ot_layout_language_find_feature (face,
           table_tag,
           script_index,
           language_index,
           *features,
           &feature_index))
        _hb_ot_layout_collect_lookups_lookups (face,
            table_tag,
            feature_index,
            lookup_indexes);
    }
  }
}

static void
_hb_ot_layout_collect_lookups_languages (hb_face_t *face,
      hb_tag_t table_tag,
      unsigned int script_index,
      const hb_tag_t *languages,
      const hb_tag_t *features,
      hb_set_t *lookup_indexes )
{
  _hb_ot_layout_collect_lookups_features (face,
       table_tag,
       script_index,
       0xFFFFu,
       features,
       lookup_indexes);

  if (!languages)
  {

    unsigned int count = hb_ot_layout_script_get_language_tags (face,
        table_tag,
        script_index,
        0, __null, __null);
    for (unsigned int language_index = 0; language_index < count; language_index++)
      _hb_ot_layout_collect_lookups_features (face,
           table_tag,
           script_index,
           language_index,
           features,
           lookup_indexes);
  }
  else
  {
    for (; *languages; languages++)
    {
      unsigned int language_index;
      if (hb_ot_layout_script_find_language (face,
          table_tag,
          script_index,
          *languages,
          &language_index))
        _hb_ot_layout_collect_lookups_features (face,
      table_tag,
      script_index,
      language_index,
      features,
      lookup_indexes);
    }
  }
}

void
hb_ot_layout_collect_lookups (hb_face_t *face,
         hb_tag_t table_tag,
         const hb_tag_t *scripts,
         const hb_tag_t *languages,
         const hb_tag_t *features,
         hb_set_t *lookup_indexes )
{
  if (!scripts)
  {

    unsigned int count = hb_ot_layout_table_get_script_tags (face,
            table_tag,
            0, __null, __null);
    for (unsigned int script_index = 0; script_index < count; script_index++)
      _hb_ot_layout_collect_lookups_languages (face,
            table_tag,
            script_index,
            languages,
            features,
            lookup_indexes);
  }
  else
  {
    for (; *scripts; scripts++)
    {
      unsigned int script_index;
      if (hb_ot_layout_table_find_script (face,
       table_tag,
       *scripts,
       &script_index))
        _hb_ot_layout_collect_lookups_languages (face,
       table_tag,
       script_index,
       languages,
       features,
       lookup_indexes);
    }
  }
}

void
hb_ot_layout_lookup_collect_glyphs (hb_face_t *face,
        hb_tag_t table_tag,
        unsigned int lookup_index,
        hb_set_t *glyphs_before,
        hb_set_t *glyphs_input,
        hb_set_t *glyphs_after,
        hb_set_t *glyphs_output )
{
  if ((!hb_ot_shaper_face_data_ensure (face))) return;

  OT::hb_collect_glyphs_context_t c (face,
         glyphs_before,
         glyphs_input,
         glyphs_after,
         glyphs_output);

  switch (table_tag)
  {
    case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('S'))<<16)|(((uint8_t)('U'))<<8)|((uint8_t)('B')))):
    {
      const OT::SubstLookup& l = ((hb_ot_layout_t *) face->shaper_data.ot)->gsub->get_lookup (lookup_index);
      l.collect_glyphs (&c);
      return;
    }
    case ((hb_tag_t)((((uint8_t)('G'))<<24)|(((uint8_t)('P'))<<16)|(((uint8_t)('O'))<<8)|((uint8_t)('S')))):
    {
      const OT::PosLookup& l = ((hb_ot_layout_t *) face->shaper_data.ot)->gpos->get_lookup (lookup_index);
      l.collect_glyphs (&c);
      return;
    }
  }
}






hb_bool_t
hb_ot_layout_has_substitution (hb_face_t *face)
{
  return &_get_gsub (face) != &OT::Null<OT::GSUB>();
}

hb_bool_t
hb_ot_layout_lookup_would_substitute (hb_face_t *face,
          unsigned int lookup_index,
          const hb_codepoint_t *glyphs,
          unsigned int glyphs_length,
          hb_bool_t zero_context)
{
  if ((!hb_ot_shaper_face_data_ensure (face))) return false;
  return hb_ot_layout_lookup_would_substitute_fast (face, lookup_index, glyphs, glyphs_length, zero_context);
}

hb_bool_t
hb_ot_layout_lookup_would_substitute_fast (hb_face_t *face,
        unsigned int lookup_index,
        const hb_codepoint_t *glyphs,
        unsigned int glyphs_length,
        hb_bool_t zero_context)
{
  if ((lookup_index >= ((hb_ot_layout_t *) face->shaper_data.ot)->gsub_lookup_count)) return false;
  OT::hb_would_apply_context_t c (face, glyphs, glyphs_length, zero_context);

  const OT::SubstLookup& l = ((hb_ot_layout_t *) face->shaper_data.ot)->gsub->get_lookup (lookup_index);

  return l.would_apply (&c, &((hb_ot_layout_t *) face->shaper_data.ot)->gsub_accels[lookup_index].digest);
}

void
hb_ot_layout_substitute_start (hb_font_t *font, hb_buffer_t *buffer)
{
  OT::GSUB::substitute_start (font, buffer);
}

void
hb_ot_layout_substitute_finish (hb_font_t *font, hb_buffer_t *buffer)
{
  OT::GSUB::substitute_finish (font, buffer);
}

void
hb_ot_layout_lookup_substitute_closure (hb_face_t *face,
            unsigned int lookup_index,
            hb_set_t *glyphs)
{
  OT::hb_closure_context_t c (face, glyphs);

  const OT::SubstLookup& l = _get_gsub (face).get_lookup (lookup_index);

  l.closure (&c);
}





hb_bool_t
hb_ot_layout_has_positioning (hb_face_t *face)
{
  return &_get_gpos (face) != &OT::Null<OT::GPOS>();
}

void
hb_ot_layout_position_start (hb_font_t *font, hb_buffer_t *buffer)
{
  OT::GPOS::position_start (font, buffer);
}

void
hb_ot_layout_position_finish (hb_font_t *font, hb_buffer_t *buffer)
{
  OT::GPOS::position_finish (font, buffer);
}

hb_bool_t
hb_ot_layout_get_size_params (hb_face_t *face,
         unsigned int *design_size,
         unsigned int *subfamily_id,
         unsigned int *subfamily_name_id,
         unsigned int *range_start,
         unsigned int *range_end )
{
  const OT::GPOS &gpos = _get_gpos (face);
  const hb_tag_t tag = ((hb_tag_t)((((uint8_t)('s'))<<24)|(((uint8_t)('i'))<<16)|(((uint8_t)('z'))<<8)|((uint8_t)('e'))));

  unsigned int num_features = gpos.get_feature_count ();
  for (unsigned int i = 0; i < num_features; i++)
  {
    if (tag == gpos.get_feature_tag (i))
    {
      const OT::Feature &f = gpos.get_feature (i);
      const OT::FeatureParamsSize &params = f.get_feature_params ().get_size_params (tag);

      if (params.designSize)
      {

 if (design_size) *design_size = params.designSize;
 if (subfamily_id) *subfamily_id = params.subfamilyID;
 if (subfamily_name_id) *subfamily_name_id = params.subfamilyNameID;
 if (range_start) *range_start = params.rangeStart;
 if (range_end) *range_end = params.rangeEnd;


 return true;
      }
    }
  }


  if (design_size) *design_size = 0;
  if (subfamily_id) *subfamily_id = 0;
  if (subfamily_name_id) *subfamily_name_id = 0;
  if (range_start) *range_start = 0;
  if (range_end) *range_end = 0;


  return false;
}
# 803 "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc"
struct GSUBProxy
{
  static const unsigned int table_index = 0;
  static const bool inplace = false;
  typedef OT::SubstLookup Lookup;

  GSUBProxy (hb_face_t *face) :
    table (*((hb_ot_layout_t *) face->shaper_data.ot)->gsub),
    accels (((hb_ot_layout_t *) face->shaper_data.ot)->gsub_accels) {}

  const OT::GSUB &table;
  const hb_ot_layout_lookup_accelerator_t *accels;
};

struct GPOSProxy
{
  static const unsigned int table_index = 1;
  static const bool inplace = true;
  typedef OT::PosLookup Lookup;

  GPOSProxy (hb_face_t *face) :
    table (*((hb_ot_layout_t *) face->shaper_data.ot)->gpos),
    accels (((hb_ot_layout_t *) face->shaper_data.ot)->gpos_accels) {}

  const OT::GPOS &table;
  const hb_ot_layout_lookup_accelerator_t *accels;
};


template <typename Lookup>
static inline bool apply_once (OT::hb_apply_context_t *c,
          const Lookup &lookup)
{
  if (!c->check_glyph_property (&c->buffer->cur(), c->lookup_props))
    return false;
  return lookup.dispatch (c);
}

template <typename Proxy>
static inline bool
apply_string (OT::hb_apply_context_t *c,
       const typename Proxy::Lookup &lookup,
       const hb_ot_layout_lookup_accelerator_t &accel)
{
  bool ret = false;
  hb_buffer_t *buffer = c->buffer;

  if ((!buffer->len || !c->lookup_mask))
    return false;

  c->set_lookup (lookup);

  if ((!lookup.is_reverse ()))
  {

    if (Proxy::table_index == 0)
      buffer->clear_output ();
    buffer->idx = 0;

    while (buffer->idx < buffer->len)
    {
      if (accel.digest.may_have (buffer->cur().codepoint) &&
   (buffer->cur().mask & c->lookup_mask) &&
   apply_once (c, lookup))
 ret = true;
      else
 buffer->next_glyph ();
    }
    if (ret)
    {
      if (!Proxy::inplace)
 buffer->swap_buffers ();
      else
        ((!buffer->has_separate_output ()) ? static_cast<void> (0) : __assert_fail ("!buffer->has_separate_output ()", "../../../libs/harfbuzz-ng/src/hb-ot-layout.cc", 876, __PRETTY_FUNCTION__));
    }
  }
  else
  {

    if (Proxy::table_index == 0)
      buffer->remove_output ();
    buffer->idx = buffer->len - 1;
    do
    {
      if (accel.digest.may_have (buffer->cur().codepoint) &&
   (buffer->cur().mask & c->lookup_mask) &&
   apply_once (c, lookup))
 ret = true;

      buffer->idx--;

    }
    while ((int) buffer->idx >= 0);
  }

  return ret;
}

template <typename Proxy>
inline void hb_ot_map_t::apply (const Proxy &proxy,
    const hb_ot_shape_plan_t *plan,
    hb_font_t *font,
    hb_buffer_t *buffer) const
{
  const unsigned int table_index = proxy.table_index;
  unsigned int i = 0;
  OT::hb_apply_context_t c (table_index, font, buffer);
  c.set_recurse_func (Proxy::Lookup::apply_recurse_func);

  for (unsigned int stage_index = 0; stage_index < stages[table_index].len; stage_index++) {
    const stage_map_t *stage = &stages[table_index][stage_index];
    for (; i < stage->last_lookup; i++)
    {
      unsigned int lookup_index = lookups[table_index][i].index;
      c.set_lookup_mask (lookups[table_index][i].mask);
      c.set_auto_zwj (lookups[table_index][i].auto_zwj);
      apply_string<Proxy> (&c,
      proxy.table.get_lookup (lookup_index),
      proxy.accels[lookup_index]);
    }

    if (stage->pause_func)
    {
      buffer->clear_output ();
      stage->pause_func (plan, font, buffer);
    }
  }
}

void hb_ot_map_t::substitute (const hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const
{
  GSUBProxy proxy (font->face);
  apply (proxy, plan, font, buffer);
}

void hb_ot_map_t::position (const hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const
{
  GPOSProxy proxy (font->face);
  apply (proxy, plan, font, buffer);
}

__attribute__((__visibility__("hidden"))) void
hb_ot_layout_substitute_lookup (OT::hb_apply_context_t *c,
    const OT::SubstLookup &lookup,
    const hb_ot_layout_lookup_accelerator_t &accel)
{
  apply_string<GSUBProxy> (c, lookup, accel);
}
