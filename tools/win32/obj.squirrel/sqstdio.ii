# 1 "../../../libs/squirrel/sqstdlib/sqstdio.cpp"
# 1 "<command-line>"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "../../../libs/squirrel/sqstdlib/sqstdio.cpp"

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 1 3
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 3
       
# 38 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 3

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 1 3
# 184 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;




}
# 244 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
namespace std
{

  namespace __cxx1998
  {



  }



  inline namespace __debug { }
# 268 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
}
# 363 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
namespace std
{


  inline void
  __replacement_assert(const char* __file, int __line,
         const char* __function, const char* __condition)
  {
    __builtin_printf("%s:%d: %s: Assertion '%s' failed.\n", __file, __line,
       __function, __condition);
    __builtin_abort();
  }
}
# 426 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\os_defines.h" 1 3
# 39 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\os_defines.h" 3
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 1 3 4
# 378 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 385 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 386 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4
# 379 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 402 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 1 3 4
# 10 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs-hard.h" 1 3 4
# 11 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 2 3 4
# 403 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 40 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\os_defines.h" 2 3
# 427 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 2 3


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\cpu_defines.h" 1 3
# 430 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 2 3
# 40 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 2 3
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 1 3
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
       
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3

#pragma GCC visibility push(default)


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\bits\\atomic_lockfree_defines.h" 1 3
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\bits\\atomic_lockfree_defines.h" 3
       
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\bits\\atomic_lockfree_defines.h" 3
# 39 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 2 3

extern "C++" {

namespace std
{
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 142 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 41 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 91 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 3
void* operator new(std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void operator delete(void*) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*) throw()
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) throw()
{ return __p; }
inline void* operator new[](std::size_t, void* __p) throw()
{ return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 3 "../../../libs/squirrel/sqstdlib/sqstdio.cpp" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 1 3 4
# 29 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern "C" {



# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 212 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\typesizes.h" 1 3 4
# 122 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 1 3 4
# 15 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 16 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 1 3 4
# 82 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 49 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 40 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  __off64_t _offset;
# 302 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 464 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 526 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
}
# 75 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdio_lim.h" 1 3 4
# 165 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 205 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 649 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (const char *__s);






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 1 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 873 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 943 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
}
# 4 "../../../libs/squirrel/sqstdlib/sqstdio.cpp" 2
# 1 "../../../libs/squirrel/include/squirrel.h" 1
# 26 "../../../libs/squirrel/include/squirrel.h"
extern "C" {
# 53 "../../../libs/squirrel/include/squirrel.h"
typedef int SQInteger;
typedef int SQInt32;
typedef unsigned int SQUnsignedInteger32;
typedef unsigned int SQUnsignedInteger;
typedef unsigned int SQHash;






typedef float SQFloat;
# 75 "../../../libs/squirrel/include/squirrel.h"
typedef SQUnsignedInteger SQRawObjectVal;
# 87 "../../../libs/squirrel/include/squirrel.h"
typedef void* SQUserPointer;
typedef SQUnsignedInteger SQBool;
typedef SQInteger SQRESULT;




struct SQVM;
struct SQTable;
struct SQArray;
struct SQString;
struct SQClosure;
struct SQGenerator;
struct SQNativeClosure;
struct SQUserData;
struct SQFunctionProto;
struct SQRefCounted;
struct SQClass;
struct SQInstance;
struct SQDelegable;
struct SQOuter;
# 148 "../../../libs/squirrel/include/squirrel.h"
typedef char SQChar;
# 225 "../../../libs/squirrel/include/squirrel.h"
typedef enum tagSQObjectType{
 OT_NULL = (0x00000001|0x01000000),
 OT_INTEGER = (0x00000002|0x04000000|0x01000000),
 OT_FLOAT = (0x00000004|0x04000000|0x01000000),
 OT_BOOL = (0x00000008|0x01000000),
 OT_STRING = (0x00000010|0x08000000),
 OT_TABLE = (0x00000020|0x08000000|0x02000000),
 OT_ARRAY = (0x00000040|0x08000000),
 OT_USERDATA = (0x00000080|0x08000000|0x02000000),
 OT_CLOSURE = (0x00000100|0x08000000),
 OT_NATIVECLOSURE = (0x00000200|0x08000000),
 OT_GENERATOR = (0x00000400|0x08000000),
 OT_USERPOINTER = 0x00000800,
 OT_THREAD = (0x00001000|0x08000000) ,
 OT_FUNCPROTO = (0x00002000|0x08000000),
 OT_CLASS = (0x00004000|0x08000000),
 OT_INSTANCE = (0x00008000|0x08000000|0x02000000),
 OT_WEAKREF = (0x00010000|0x08000000),
 OT_OUTER = (0x00020000|0x08000000)
}SQObjectType;




typedef union tagSQObjectValue
{
 struct SQTable *pTable;
 struct SQArray *pArray;
 struct SQClosure *pClosure;
 struct SQOuter *pOuter;
 struct SQGenerator *pGenerator;
 struct SQNativeClosure *pNativeClosure;
 struct SQString *pString;
 struct SQUserData *pUserData;
 SQInteger nInteger;
 SQFloat fFloat;
 SQUserPointer pUserPointer;
 struct SQFunctionProto *pFunctionProto;
 struct SQRefCounted *pRefCounted;
 struct SQDelegable *pDelegable;
 struct SQVM *pThread;
 struct SQClass *pClass;
 struct SQInstance *pInstance;
 struct SQWeakRef *pWeakRef;
 SQRawObjectVal raw;
}SQObjectValue;


typedef struct tagSQObject
{
 SQObjectType _type;
 SQObjectValue _unVal;
}SQObject;

typedef struct tagSQMemberHandle{
 SQBool _static;
 SQInteger _index;
}SQMemberHandle;

typedef struct tagSQStackInfos{
 const SQChar* funcname;
 const SQChar* source;
 SQInteger line;
}SQStackInfos;

typedef struct SQVM* HSQUIRRELVM;
typedef SQObject HSQOBJECT;
typedef SQMemberHandle HSQMEMBERHANDLE;
typedef SQInteger (*SQFUNCTION)(HSQUIRRELVM);
typedef SQInteger (*SQRELEASEHOOK)(SQUserPointer,SQInteger size);
typedef void (*SQCOMPILERERROR)(HSQUIRRELVM,const SQChar * ,const SQChar * ,SQInteger ,SQInteger );
typedef void (*SQPRINTFUNCTION)(HSQUIRRELVM,const SQChar * ,...);
typedef void (*SQDEBUGHOOK)(HSQUIRRELVM , SQInteger , const SQChar * , SQInteger , const SQChar * );
typedef SQInteger (*SQWRITEFUNC)(SQUserPointer,SQUserPointer,SQInteger);
typedef SQInteger (*SQREADFUNC)(SQUserPointer,SQUserPointer,SQInteger);

typedef SQInteger (*SQLEXREADFUNC)(SQUserPointer);

typedef struct tagSQRegFunction{
 const SQChar *name;
 SQFUNCTION f;
 SQInteger nparamscheck;
 const SQChar *typemask;
}SQRegFunction;

typedef struct tagSQFunctionInfo {
 SQUserPointer funcid;
 const SQChar *name;
 const SQChar *source;
}SQFunctionInfo;


extern HSQUIRRELVM sq_open(SQInteger initialstacksize);
extern HSQUIRRELVM sq_newthread(HSQUIRRELVM friendvm, SQInteger initialstacksize);
extern void sq_seterrorhandler(HSQUIRRELVM v);
extern void sq_close(HSQUIRRELVM v);
extern void sq_setforeignptr(HSQUIRRELVM v,SQUserPointer p);
extern SQUserPointer sq_getforeignptr(HSQUIRRELVM v);
extern void sq_setprintfunc(HSQUIRRELVM v, SQPRINTFUNCTION printfunc,SQPRINTFUNCTION errfunc);
extern SQPRINTFUNCTION sq_getprintfunc(HSQUIRRELVM v);
extern SQPRINTFUNCTION sq_geterrorfunc(HSQUIRRELVM v);
extern SQRESULT sq_suspendvm(HSQUIRRELVM v);
extern SQRESULT sq_wakeupvm(HSQUIRRELVM v,SQBool resumedret,SQBool retval,SQBool raiseerror,SQBool throwerror);
extern SQInteger sq_getvmstate(HSQUIRRELVM v);
extern SQInteger sq_getversion();


extern SQRESULT sq_compile(HSQUIRRELVM v,SQLEXREADFUNC read,SQUserPointer p,const SQChar *sourcename,SQBool raiseerror);
extern SQRESULT sq_compilebuffer(HSQUIRRELVM v,const SQChar *s,SQInteger size,const SQChar *sourcename,SQBool raiseerror);
extern void sq_enabledebuginfo(HSQUIRRELVM v, SQBool enable);
extern void sq_notifyallexceptions(HSQUIRRELVM v, SQBool enable);
extern void sq_setcompilererrorhandler(HSQUIRRELVM v,SQCOMPILERERROR f);


extern void sq_push(HSQUIRRELVM v,SQInteger idx);
extern void sq_pop(HSQUIRRELVM v,SQInteger nelemstopop);
extern void sq_poptop(HSQUIRRELVM v);
extern void sq_remove(HSQUIRRELVM v,SQInteger idx);
extern SQInteger sq_gettop(HSQUIRRELVM v);
extern void sq_settop(HSQUIRRELVM v,SQInteger newtop);
extern SQRESULT sq_reservestack(HSQUIRRELVM v,SQInteger nsize);
extern SQInteger sq_cmp(HSQUIRRELVM v);
extern void sq_move(HSQUIRRELVM dest,HSQUIRRELVM src,SQInteger idx);


extern SQUserPointer sq_newuserdata(HSQUIRRELVM v,SQUnsignedInteger size);
extern void sq_newtable(HSQUIRRELVM v);
extern void sq_newtableex(HSQUIRRELVM v,SQInteger initialcapacity);
extern void sq_newarray(HSQUIRRELVM v,SQInteger size);
extern void sq_newclosure(HSQUIRRELVM v,SQFUNCTION func,SQUnsignedInteger nfreevars);
extern SQRESULT sq_setparamscheck(HSQUIRRELVM v,SQInteger nparamscheck,const SQChar *typemask);
extern SQRESULT sq_bindenv(HSQUIRRELVM v,SQInteger idx);
extern void sq_pushstring(HSQUIRRELVM v,const SQChar *s,SQInteger len);
extern void sq_pushfloat(HSQUIRRELVM v,SQFloat f);
extern void sq_pushinteger(HSQUIRRELVM v,SQInteger n);
extern void sq_pushbool(HSQUIRRELVM v,SQBool b);
extern void sq_pushuserpointer(HSQUIRRELVM v,SQUserPointer p);
extern void sq_pushnull(HSQUIRRELVM v);
extern SQObjectType sq_gettype(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_typeof(HSQUIRRELVM v,SQInteger idx);
extern SQInteger sq_getsize(HSQUIRRELVM v,SQInteger idx);
extern SQHash sq_gethash(HSQUIRRELVM v, SQInteger idx);
extern SQRESULT sq_getbase(HSQUIRRELVM v,SQInteger idx);
extern SQBool sq_instanceof(HSQUIRRELVM v);
extern SQRESULT sq_tostring(HSQUIRRELVM v,SQInteger idx);
extern void sq_tobool(HSQUIRRELVM v, SQInteger idx, SQBool *b);
extern SQRESULT sq_getstring(HSQUIRRELVM v,SQInteger idx,const SQChar **c);
extern SQRESULT sq_getinteger(HSQUIRRELVM v,SQInteger idx,SQInteger *i);
extern SQRESULT sq_getfloat(HSQUIRRELVM v,SQInteger idx,SQFloat *f);
extern SQRESULT sq_getbool(HSQUIRRELVM v,SQInteger idx,SQBool *b);
extern SQRESULT sq_getthread(HSQUIRRELVM v,SQInteger idx,HSQUIRRELVM *thread);
extern SQRESULT sq_getuserpointer(HSQUIRRELVM v,SQInteger idx,SQUserPointer *p);
extern SQRESULT sq_getuserdata(HSQUIRRELVM v,SQInteger idx,SQUserPointer *p,SQUserPointer *typetag);
extern SQRESULT sq_settypetag(HSQUIRRELVM v,SQInteger idx,SQUserPointer typetag);
extern SQRESULT sq_gettypetag(HSQUIRRELVM v,SQInteger idx,SQUserPointer *typetag);
extern void sq_setreleasehook(HSQUIRRELVM v,SQInteger idx,SQRELEASEHOOK hook);
extern SQChar *sq_getscratchpad(HSQUIRRELVM v,SQInteger minsize);
extern SQRESULT sq_getfunctioninfo(HSQUIRRELVM v,SQInteger level,SQFunctionInfo *fi);
extern SQRESULT sq_getclosureinfo(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger *nparams,SQUnsignedInteger *nfreevars);
extern SQRESULT sq_getclosurename(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setnativeclosurename(HSQUIRRELVM v,SQInteger idx,const SQChar *name);
extern SQRESULT sq_setinstanceup(HSQUIRRELVM v, SQInteger idx, SQUserPointer p);
extern SQRESULT sq_getinstanceup(HSQUIRRELVM v, SQInteger idx, SQUserPointer *p,SQUserPointer typetag);
extern SQRESULT sq_setclassudsize(HSQUIRRELVM v, SQInteger idx, SQInteger udsize);
extern SQRESULT sq_newclass(HSQUIRRELVM v,SQBool hasbase);
extern SQRESULT sq_createinstance(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setattributes(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getattributes(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getclass(HSQUIRRELVM v,SQInteger idx);
extern void sq_weakref(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getdefaultdelegate(HSQUIRRELVM v,SQObjectType t);
extern SQRESULT sq_getmemberhandle(HSQUIRRELVM v,SQInteger idx,HSQMEMBERHANDLE *handle);
extern SQRESULT sq_getbyhandle(HSQUIRRELVM v,SQInteger idx,const HSQMEMBERHANDLE *handle);
extern SQRESULT sq_setbyhandle(HSQUIRRELVM v,SQInteger idx,const HSQMEMBERHANDLE *handle);


extern void sq_pushroottable(HSQUIRRELVM v);
extern void sq_pushregistrytable(HSQUIRRELVM v);
extern void sq_pushconsttable(HSQUIRRELVM v);
extern SQRESULT sq_setroottable(HSQUIRRELVM v);
extern SQRESULT sq_setconsttable(HSQUIRRELVM v);
extern SQRESULT sq_newslot(HSQUIRRELVM v, SQInteger idx, SQBool bstatic);
extern SQRESULT sq_deleteslot(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_set(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_get(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawget(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawset(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawdeleteslot(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_newmember(HSQUIRRELVM v,SQInteger idx,SQBool bstatic);
extern SQRESULT sq_rawnewmember(HSQUIRRELVM v,SQInteger idx,SQBool bstatic);
extern SQRESULT sq_arrayappend(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_arraypop(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_arrayresize(HSQUIRRELVM v,SQInteger idx,SQInteger newsize);
extern SQRESULT sq_arrayreverse(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_arrayremove(HSQUIRRELVM v,SQInteger idx,SQInteger itemidx);
extern SQRESULT sq_arrayinsert(HSQUIRRELVM v,SQInteger idx,SQInteger destpos);
extern SQRESULT sq_setdelegate(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getdelegate(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_clone(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setfreevariable(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger nval);
extern SQRESULT sq_next(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getweakrefval(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_clear(HSQUIRRELVM v,SQInteger idx);


extern SQRESULT sq_call(HSQUIRRELVM v,SQInteger params,SQBool retval,SQBool raiseerror);
extern SQRESULT sq_resume(HSQUIRRELVM v,SQBool retval,SQBool raiseerror);
extern const SQChar *sq_getlocal(HSQUIRRELVM v,SQUnsignedInteger level,SQUnsignedInteger idx);
extern SQRESULT sq_getcallee(HSQUIRRELVM v);
extern const SQChar *sq_getfreevariable(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger nval);
extern SQRESULT sq_throwerror(HSQUIRRELVM v,const SQChar *err);
extern SQRESULT sq_throwobject(HSQUIRRELVM v);
extern void sq_reseterror(HSQUIRRELVM v);
extern void sq_getlasterror(HSQUIRRELVM v);


extern SQRESULT sq_getstackobj(HSQUIRRELVM v,SQInteger idx,HSQOBJECT *po);
extern void sq_pushobject(HSQUIRRELVM v,HSQOBJECT obj);
extern void sq_addref(HSQUIRRELVM v,HSQOBJECT *po);
extern SQBool sq_release(HSQUIRRELVM v,HSQOBJECT *po);
extern SQUnsignedInteger sq_getrefcount(HSQUIRRELVM v,HSQOBJECT *po);
extern void sq_resetobject(HSQOBJECT *po);
extern const SQChar *sq_objtostring(const HSQOBJECT *o);
extern SQBool sq_objtobool(const HSQOBJECT *o);
extern SQInteger sq_objtointeger(const HSQOBJECT *o);
extern SQFloat sq_objtofloat(const HSQOBJECT *o);
extern SQUserPointer sq_objtouserpointer(const HSQOBJECT *o);
extern SQRESULT sq_getobjtypetag(const HSQOBJECT *o,SQUserPointer * typetag);


extern SQInteger sq_collectgarbage(HSQUIRRELVM v);
extern SQRESULT sq_resurrectunreachable(HSQUIRRELVM v);


extern SQRESULT sq_writeclosure(HSQUIRRELVM vm,SQWRITEFUNC writef,SQUserPointer up);
extern SQRESULT sq_readclosure(HSQUIRRELVM vm,SQREADFUNC readf,SQUserPointer up);


extern void *sq_malloc(SQUnsignedInteger size);
extern void *sq_realloc(void* p,SQUnsignedInteger oldsize,SQUnsignedInteger newsize);
extern void sq_free(void *p,SQUnsignedInteger size);


extern SQRESULT sq_stackinfos(HSQUIRRELVM v,SQInteger level,SQStackInfos *si);
extern void sq_setdebughook(HSQUIRRELVM v);
extern void sq_setnativedebughook(HSQUIRRELVM v,SQDEBUGHOOK hook);
# 503 "../../../libs/squirrel/include/squirrel.h"
}
# 5 "../../../libs/squirrel/sqstdlib/sqstdio.cpp" 2
# 1 "../../../libs/squirrel/include/sqstdio.h" 1
# 9 "../../../libs/squirrel/include/sqstdio.h"
struct SQStream {
 virtual SQInteger Read(void *buffer, SQInteger size) = 0;
 virtual SQInteger Write(void *buffer, SQInteger size) = 0;
 virtual SQInteger Flush() = 0;
 virtual SQInteger Tell() = 0;
 virtual SQInteger Len() = 0;
 virtual SQInteger Seek(SQInteger offset, SQInteger origin) = 0;
 virtual bool IsValid() = 0;
 virtual bool EOS() = 0;
};

extern "C" {






typedef void* SQFILE;

extern SQFILE sqstd_fopen(const SQChar *,const SQChar *);
extern SQInteger sqstd_fread(SQUserPointer, SQInteger, SQInteger, SQFILE);
extern SQInteger sqstd_fwrite(const SQUserPointer, SQInteger, SQInteger, SQFILE);
extern SQInteger sqstd_fseek(SQFILE , SQInteger , SQInteger);
extern SQInteger sqstd_ftell(SQFILE);
extern SQInteger sqstd_fflush(SQFILE);
extern SQInteger sqstd_fclose(SQFILE);
extern SQInteger sqstd_feof(SQFILE);

extern SQRESULT sqstd_createfile(HSQUIRRELVM v, SQFILE file,SQBool own);
extern SQRESULT sqstd_getfile(HSQUIRRELVM v, SQInteger idx, SQFILE *file);


extern SQRESULT sqstd_loadfile(HSQUIRRELVM v,const SQChar *filename,SQBool printerror);
extern SQRESULT sqstd_dofile(HSQUIRRELVM v,const SQChar *filename,SQBool retval,SQBool printerror);
extern SQRESULT sqstd_writeclosuretofile(HSQUIRRELVM v,const SQChar *filename);

extern SQRESULT sqstd_register_iolib(HSQUIRRELVM v);


}
# 6 "../../../libs/squirrel/sqstdlib/sqstdio.cpp" 2
# 1 "../../../libs/squirrel/sqstdlib/sqstdstream.h" 1




SQInteger _stream_readblob(HSQUIRRELVM v);
SQInteger _stream_readline(HSQUIRRELVM v);
SQInteger _stream_readn(HSQUIRRELVM v);
SQInteger _stream_writeblob(HSQUIRRELVM v);
SQInteger _stream_writen(HSQUIRRELVM v);
SQInteger _stream_seek(HSQUIRRELVM v);
SQInteger _stream_tell(HSQUIRRELVM v);
SQInteger _stream_len(HSQUIRRELVM v);
SQInteger _stream_eos(HSQUIRRELVM v);
SQInteger _stream_flush(HSQUIRRELVM v);


SQRESULT declare_stream(HSQUIRRELVM v,const SQChar* name,SQUserPointer typetag,const SQChar* reg_name,SQRegFunction *methods,SQRegFunction *globals);
# 7 "../../../libs/squirrel/sqstdlib/sqstdio.cpp" 2



SQFILE sqstd_fopen(const SQChar *filename ,const SQChar *mode)
{

 return (SQFILE)fopen(filename,mode);



}

SQInteger sqstd_fread(void* buffer, SQInteger size, SQInteger count, SQFILE file)
{
 return (SQInteger)fread(buffer,size,count,(FILE *)file);
}

SQInteger sqstd_fwrite(const SQUserPointer buffer, SQInteger size, SQInteger count, SQFILE file)
{
 return (SQInteger)fwrite(buffer,size,count,(FILE *)file);
}

SQInteger sqstd_fseek(SQFILE file, SQInteger offset, SQInteger origin)
{
 SQInteger realorigin;
 switch(origin) {
  case 0: realorigin = 1; break;
  case 1: realorigin = 2; break;
  case 2: realorigin = 0; break;
  default: return -1;
 }
 return fseek((FILE *)file,(long)offset,(int)realorigin);
}

SQInteger sqstd_ftell(SQFILE file)
{
 return ftell((FILE *)file);
}

SQInteger sqstd_fflush(SQFILE file)
{
 return fflush((FILE *)file);
}

SQInteger sqstd_fclose(SQFILE file)
{
 return fclose((FILE *)file);
}

SQInteger sqstd_feof(SQFILE file)
{
 return feof((FILE *)file);
}


struct SQFile : public SQStream {
 SQFile() { _handle = __null; _owns = false;}
 SQFile(SQFILE file, bool owns) { _handle = file; _owns = owns;}
 virtual ~SQFile() { Close(); }
 bool Open(const SQChar *filename ,const SQChar *mode) {
  Close();
  if( (_handle = sqstd_fopen(filename,mode)) ) {
   _owns = true;
   return true;
  }
  return false;
 }
 void Close() {
  if(_handle && _owns) {
   sqstd_fclose(_handle);
   _handle = __null;
   _owns = false;
  }
 }
 SQInteger Read(void *buffer,SQInteger size) {
  return sqstd_fread(buffer,1,size,_handle);
 }
 SQInteger Write(void *buffer,SQInteger size) {
  return sqstd_fwrite(buffer,1,size,_handle);
 }
 SQInteger Flush() {
  return sqstd_fflush(_handle);
 }
 SQInteger Tell() {
  return sqstd_ftell(_handle);
 }
 SQInteger Len() {
  SQInteger prevpos=Tell();
  Seek(0,1);
  SQInteger size=Tell();
  Seek(prevpos,2);
  return size;
 }
 SQInteger Seek(SQInteger offset, SQInteger origin) {
  return sqstd_fseek(_handle,offset,origin);
 }
 bool IsValid() { return _handle?true:false; }
 bool EOS() { return Tell()==Len()?true:false;}
 SQFILE GetHandle() {return _handle;}
private:
 SQFILE _handle;
 bool _owns;
};

static SQInteger _file__typeof(HSQUIRRELVM v)
{
 sq_pushstring(v,"file",-1);
 return 1;
}

static SQInteger _file_releasehook(SQUserPointer p, SQInteger size)
{
 SQFile *self = (SQFile*)p;
 self->~SQFile();
 sq_free(self,sizeof(SQFile));
 return 1;
}

static SQInteger _file_constructor(HSQUIRRELVM v)
{
 const SQChar *filename,*mode;
 bool owns = true;
 SQFile *f;
 SQFILE newf;
 if(sq_gettype(v,2) == OT_STRING && sq_gettype(v,3) == OT_STRING) {
  sq_getstring(v, 2, &filename);
  sq_getstring(v, 3, &mode);
  newf = sqstd_fopen(filename, mode);
  if(!newf) return sq_throwerror(v, "cannot open file");
 } else if(sq_gettype(v,2) == OT_USERPOINTER) {
  owns = !(sq_gettype(v,3) == OT_NULL);
  sq_getuserpointer(v,2,&newf);
 } else {
  return sq_throwerror(v,"wrong parameter");
 }

 f = new (sq_malloc(sizeof(SQFile)))SQFile(newf,owns);
 if((sq_setinstanceup(v,1,f)<0)) {
  f->~SQFile();
  sq_free(f,sizeof(SQFile));
  return sq_throwerror(v, "cannot create blob with negative size");
 }
 sq_setreleasehook(v,1,_file_releasehook);
 return 0;
}

static SQInteger _file_close(HSQUIRRELVM v)
{
 SQFile *self = __null;
 if((sq_getinstanceup(v,1,(SQUserPointer*)&self,(SQUserPointer)(0x80000000 | 0x00000001))>=0)
  && self != __null)
 {
  self->Close();
 }
 return 0;
}



static SQRegFunction _file_methods[] = {
 {"constructor",_file_constructor,3,"x"},
 {"_typeof",_file__typeof,1,"x"},
 {"close",_file_close,1,"x"},
 {0,0,0,0},
};



SQRESULT sqstd_createfile(HSQUIRRELVM v, SQFILE file,SQBool own)
{
 SQInteger top = sq_gettop(v);
 sq_pushregistrytable(v);
 sq_pushstring(v,"std_file",-1);
 if((sq_get(v,-2)>=0)) {
  sq_remove(v,-2);
  sq_pushroottable(v);
  sq_pushuserpointer(v,file);
  if(own){
   sq_pushinteger(v,1);
  }
  else{
   sq_pushnull(v);
  }
  if((sq_call(v,3,(1),(0))>=0)) {
   sq_remove(v,-2);
   return (0);
  }
 }
 sq_settop(v,top);
 return (0);
}

SQRESULT sqstd_getfile(HSQUIRRELVM v, SQInteger idx, SQFILE *file)
{
 SQFile *fileobj = __null;
 if((sq_getinstanceup(v,idx,(SQUserPointer*)&fileobj,(SQUserPointer)(0x80000000 | 0x00000001))>=0)) {
  *file = fileobj->GetHandle();
  return (0);
 }
 return sq_throwerror(v,"not a file");
}



static SQInteger _io_file_lexfeed_PLAIN(SQUserPointer file)
{
 SQInteger ret;
 char c;
 if( ( ret=sqstd_fread(&c,sizeof(c),1,(FILE *)file )>0) )
  return c;
 return 0;
}
# 259 "../../../libs/squirrel/sqstdlib/sqstdio.cpp"
static SQInteger _io_file_lexfeed_UCS2_LE(SQUserPointer file)
{
 SQInteger ret;
 wchar_t c;
 if( ( ret=sqstd_fread(&c,sizeof(c),1,(FILE *)file )>0) )
  return (SQChar)c;
 return 0;
}

static SQInteger _io_file_lexfeed_UCS2_BE(SQUserPointer file)
{
 SQInteger ret;
 unsigned short c;
 if( ( ret=sqstd_fread(&c,sizeof(c),1,(FILE *)file )>0) ) {
  c = ((c>>8)&0x00FF)| ((c<<8)&0xFF00);
  return (SQChar)c;
 }
 return 0;
}

SQInteger file_read(SQUserPointer file,SQUserPointer buf,SQInteger size)
{
 SQInteger ret;
 if( ( ret = sqstd_fread(buf,1,size,(SQFILE)file ))!=0 )return ret;
 return -1;
}

SQInteger file_write(SQUserPointer file,SQUserPointer p,SQInteger size)
{
 return sqstd_fwrite(p,1,size,(SQFILE)file);
}

SQRESULT sqstd_loadfile(HSQUIRRELVM v,const SQChar *filename,SQBool printerror)
{
 SQFILE file = sqstd_fopen(filename,"rb");
 SQInteger ret;
 unsigned short us;
 unsigned char uc;
 SQLEXREADFUNC func = _io_file_lexfeed_PLAIN;
 if(file){
  ret = sqstd_fread(&us,1,2,file);
  if(ret != 2) {

   us = 0;
  }
  if(us == 0xFAFA) {
   sqstd_fseek(file,0,2);
   if((sq_readclosure(v,file_read,file)>=0)) {
    sqstd_fclose(file);
    return (0);
   }
  }
  else {
   switch(us)
   {

    case 0xFFFE: func = _io_file_lexfeed_UCS2_BE; break;
    case 0xFEFF: func = _io_file_lexfeed_UCS2_LE; break;
    case 0xBBEF:
     if(sqstd_fread(&uc,1,sizeof(uc),file) == 0) {
      sqstd_fclose(file);
      return sq_throwerror(v,"io error");
     }
     if(uc != 0xBF) {
      sqstd_fclose(file);
      return sq_throwerror(v,"Unrecognozed ecoding");
     }



     func = _io_file_lexfeed_PLAIN;

     break;
    default: sqstd_fseek(file,0,2); break;
   }

   if((sq_compile(v,func,file,filename,printerror)>=0)){
    sqstd_fclose(file);
    return (0);
   }
  }
  sqstd_fclose(file);
  return (-1);
 }
 return sq_throwerror(v,"cannot open the file");
}

SQRESULT sqstd_dofile(HSQUIRRELVM v,const SQChar *filename,SQBool retval,SQBool printerror)
{
 if((sqstd_loadfile(v,filename,printerror)>=0)) {
  sq_push(v,-2);
  if((sq_call(v,1,retval,(1))>=0)) {
   sq_remove(v,retval?-2:-1);
   return 1;
  }
  sq_pop(v,1);
 }
 return (-1);
}

SQRESULT sqstd_writeclosuretofile(HSQUIRRELVM v,const SQChar *filename)
{
 SQFILE file = sqstd_fopen(filename,"wb+");
 if(!file) return sq_throwerror(v,"cannot open the file");
 if((sq_writeclosure(v,file_write,file)>=0)) {
  sqstd_fclose(file);
  return (0);
 }
 sqstd_fclose(file);
 return (-1);
}

SQInteger _g_io_loadfile(HSQUIRRELVM v)
{
 const SQChar *filename;
 SQBool printerror = (0);
 sq_getstring(v,2,&filename);
 if(sq_gettop(v) >= 3) {
  sq_getbool(v,3,&printerror);
 }
 if((sqstd_loadfile(v,filename,printerror)>=0))
  return 1;
 return (-1);
}

SQInteger _g_io_writeclosuretofile(HSQUIRRELVM v)
{
 const SQChar *filename;
 sq_getstring(v,2,&filename);
 if((sqstd_writeclosuretofile(v,filename)>=0))
  return 1;
 return (-1);
}

SQInteger _g_io_dofile(HSQUIRRELVM v)
{
 const SQChar *filename;
 SQBool printerror = (0);
 sq_getstring(v,2,&filename);
 if(sq_gettop(v) >= 3) {
  sq_getbool(v,3,&printerror);
 }
 sq_push(v,1);
 if((sqstd_dofile(v,filename,(1),printerror)>=0))
  return 1;
 return (-1);
}


static SQRegFunction iolib_funcs[]={
 {"loadfile",_g_io_loadfile,-2,".sb"},
 {"dofile",_g_io_dofile,-2,".sb"},
 {"writeclosuretofile",_g_io_writeclosuretofile,3,".sc"},
 {0,0}
};

SQRESULT sqstd_register_iolib(HSQUIRRELVM v)
{
 SQInteger top = sq_gettop(v);

 declare_stream(v,"file",(SQUserPointer)(0x80000000 | 0x00000001),"std_file",_file_methods,iolib_funcs);
 sq_pushstring(v,"stdout",-1);
 sqstd_createfile(v,stdout,(0));
 sq_newslot(v,-3,(0));
 sq_pushstring(v,"stdin",-1);
 sqstd_createfile(v,stdin,(0));
 sq_newslot(v,-3,(0));
 sq_pushstring(v,"stderr",-1);
 sqstd_createfile(v,stderr,(0));
 sq_newslot(v,-3,(0));
 sq_settop(v,top);
 return (0);
}
