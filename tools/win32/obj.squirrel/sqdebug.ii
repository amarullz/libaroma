# 1 "../../../libs/squirrel/squirrel/sqdebug.cpp"
# 1 "<command-line>"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "../../../libs/squirrel/squirrel/sqdebug.cpp"



# 1 "../../../libs/squirrel/squirrel/sqpcheader.h" 1
# 9 "../../../libs/squirrel/squirrel/sqpcheader.h"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 1 3 4
# 378 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 385 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 386 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4
# 379 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 402 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 1 3 4
# 10 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs-hard.h" 1 3 4
# 11 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 2 3 4
# 403 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4

extern "C" {



# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 212 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\typesizes.h" 1 3 4
# 122 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 1 3 4
# 15 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 16 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 1 3 4
# 82 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\_g_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 49 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 40 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 2 3 4
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  __off64_t _offset;
# 302 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 464 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 526 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\libio.h" 3 4
}
# 75 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdio_lim.h" 1 3 4
# 165 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 205 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


# 649 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (const char *__s);






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 1 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 873 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 943 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdio.h" 3 4
}
# 10 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 1 3 4
# 32 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4

extern "C" {






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitflags.h" 1 3 4
# 42 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 1 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\endian.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 1 3 4
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap-16.h" 1 3 4
# 35 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 65 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 95 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 235 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 305 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef __daddr_t daddr_t;

typedef __caddr_t caddr_t;







typedef __key_t key_t;
# 135 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 57 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __clock_t clock_t;



# 73 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4


typedef __time_t time_t;



# 91 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
typedef __timer_t timer_t;
# 136 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 150 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 197 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 222 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\select.h" 1 3 4
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 1 3 4
# 22 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 1 3 4
# 120 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 1 3 4
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 2 3 4
# 54 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef long int __fd_mask;
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern "C" {
# 106 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\select.h" 3 4
}
# 223 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 58 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\sysmacros.h" 3 4
}
# 226 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 265 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
# 144 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\pthreadtypes.h" 3 4
    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;

    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 274 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\types.h" 2 3 4


}
# 315 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 1 3 4
# 24 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 3 4
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 620 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 812 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 899 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\stdlib-float.h" 1 3 4
# 956 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 2 3 4
# 968 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdlib.h" 3 4
}
# 11 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern "C" {




# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 166 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 234 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 261 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}
# 12 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 1 3 4
# 64 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 13 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 1 3
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 3
       
# 38 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 3

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 1 3
# 184 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;




}
# 244 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
namespace std
{

  namespace __cxx1998
  {



  }



  inline namespace __debug { }
# 268 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
}
# 363 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
namespace std
{


  inline void
  __replacement_assert(const char* __file, int __line,
         const char* __function, const char* __condition)
  {
    __builtin_printf("%s:%d: %s: Assertion '%s' failed.\n", __file, __line,
       __function, __condition);
    __builtin_abort();
  }
}
# 426 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 3
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\os_defines.h" 1 3
# 427 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 2 3


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\cpu_defines.h" 1 3
# 430 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\arm-linux-gnueabihf\\bits\\c++config.h" 2 3
# 40 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 2 3
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 1 3
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
       
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3

#pragma GCC visibility push(default)


# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\bits\\atomic_lockfree_defines.h" 1 3
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\bits\\atomic_lockfree_defines.h" 3
       
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\bits\\atomic_lockfree_defines.h" 3
# 39 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 2 3

extern "C++" {

namespace std
{
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 142 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 41 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 91 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\include\\c++\\4.8.3\\new" 3
void* operator new(std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void operator delete(void*) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*) throw()
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) throw()
{ return __p; }
inline void* operator new[](std::size_t, void* __p) throw()
{ return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 14 "../../../libs/squirrel/squirrel/sqpcheader.h" 2

# 1 "../../../libs/squirrel/include/squirrel.h" 1
# 26 "../../../libs/squirrel/include/squirrel.h"
extern "C" {
# 53 "../../../libs/squirrel/include/squirrel.h"
typedef int SQInteger;
typedef int SQInt32;
typedef unsigned int SQUnsignedInteger32;
typedef unsigned int SQUnsignedInteger;
typedef unsigned int SQHash;






typedef float SQFloat;
# 75 "../../../libs/squirrel/include/squirrel.h"
typedef SQUnsignedInteger SQRawObjectVal;
# 87 "../../../libs/squirrel/include/squirrel.h"
typedef void* SQUserPointer;
typedef SQUnsignedInteger SQBool;
typedef SQInteger SQRESULT;




struct SQVM;
struct SQTable;
struct SQArray;
struct SQString;
struct SQClosure;
struct SQGenerator;
struct SQNativeClosure;
struct SQUserData;
struct SQFunctionProto;
struct SQRefCounted;
struct SQClass;
struct SQInstance;
struct SQDelegable;
struct SQOuter;
# 148 "../../../libs/squirrel/include/squirrel.h"
typedef char SQChar;
# 225 "../../../libs/squirrel/include/squirrel.h"
typedef enum tagSQObjectType{
 OT_NULL = (0x00000001|0x01000000),
 OT_INTEGER = (0x00000002|0x04000000|0x01000000),
 OT_FLOAT = (0x00000004|0x04000000|0x01000000),
 OT_BOOL = (0x00000008|0x01000000),
 OT_STRING = (0x00000010|0x08000000),
 OT_TABLE = (0x00000020|0x08000000|0x02000000),
 OT_ARRAY = (0x00000040|0x08000000),
 OT_USERDATA = (0x00000080|0x08000000|0x02000000),
 OT_CLOSURE = (0x00000100|0x08000000),
 OT_NATIVECLOSURE = (0x00000200|0x08000000),
 OT_GENERATOR = (0x00000400|0x08000000),
 OT_USERPOINTER = 0x00000800,
 OT_THREAD = (0x00001000|0x08000000) ,
 OT_FUNCPROTO = (0x00002000|0x08000000),
 OT_CLASS = (0x00004000|0x08000000),
 OT_INSTANCE = (0x00008000|0x08000000|0x02000000),
 OT_WEAKREF = (0x00010000|0x08000000),
 OT_OUTER = (0x00020000|0x08000000)
}SQObjectType;




typedef union tagSQObjectValue
{
 struct SQTable *pTable;
 struct SQArray *pArray;
 struct SQClosure *pClosure;
 struct SQOuter *pOuter;
 struct SQGenerator *pGenerator;
 struct SQNativeClosure *pNativeClosure;
 struct SQString *pString;
 struct SQUserData *pUserData;
 SQInteger nInteger;
 SQFloat fFloat;
 SQUserPointer pUserPointer;
 struct SQFunctionProto *pFunctionProto;
 struct SQRefCounted *pRefCounted;
 struct SQDelegable *pDelegable;
 struct SQVM *pThread;
 struct SQClass *pClass;
 struct SQInstance *pInstance;
 struct SQWeakRef *pWeakRef;
 SQRawObjectVal raw;
}SQObjectValue;


typedef struct tagSQObject
{
 SQObjectType _type;
 SQObjectValue _unVal;
}SQObject;

typedef struct tagSQMemberHandle{
 SQBool _static;
 SQInteger _index;
}SQMemberHandle;

typedef struct tagSQStackInfos{
 const SQChar* funcname;
 const SQChar* source;
 SQInteger line;
}SQStackInfos;

typedef struct SQVM* HSQUIRRELVM;
typedef SQObject HSQOBJECT;
typedef SQMemberHandle HSQMEMBERHANDLE;
typedef SQInteger (*SQFUNCTION)(HSQUIRRELVM);
typedef SQInteger (*SQRELEASEHOOK)(SQUserPointer,SQInteger size);
typedef void (*SQCOMPILERERROR)(HSQUIRRELVM,const SQChar * ,const SQChar * ,SQInteger ,SQInteger );
typedef void (*SQPRINTFUNCTION)(HSQUIRRELVM,const SQChar * ,...);
typedef void (*SQDEBUGHOOK)(HSQUIRRELVM , SQInteger , const SQChar * , SQInteger , const SQChar * );
typedef SQInteger (*SQWRITEFUNC)(SQUserPointer,SQUserPointer,SQInteger);
typedef SQInteger (*SQREADFUNC)(SQUserPointer,SQUserPointer,SQInteger);

typedef SQInteger (*SQLEXREADFUNC)(SQUserPointer);

typedef struct tagSQRegFunction{
 const SQChar *name;
 SQFUNCTION f;
 SQInteger nparamscheck;
 const SQChar *typemask;
}SQRegFunction;

typedef struct tagSQFunctionInfo {
 SQUserPointer funcid;
 const SQChar *name;
 const SQChar *source;
}SQFunctionInfo;


extern HSQUIRRELVM sq_open(SQInteger initialstacksize);
extern HSQUIRRELVM sq_newthread(HSQUIRRELVM friendvm, SQInteger initialstacksize);
extern void sq_seterrorhandler(HSQUIRRELVM v);
extern void sq_close(HSQUIRRELVM v);
extern void sq_setforeignptr(HSQUIRRELVM v,SQUserPointer p);
extern SQUserPointer sq_getforeignptr(HSQUIRRELVM v);
extern void sq_setprintfunc(HSQUIRRELVM v, SQPRINTFUNCTION printfunc,SQPRINTFUNCTION errfunc);
extern SQPRINTFUNCTION sq_getprintfunc(HSQUIRRELVM v);
extern SQPRINTFUNCTION sq_geterrorfunc(HSQUIRRELVM v);
extern SQRESULT sq_suspendvm(HSQUIRRELVM v);
extern SQRESULT sq_wakeupvm(HSQUIRRELVM v,SQBool resumedret,SQBool retval,SQBool raiseerror,SQBool throwerror);
extern SQInteger sq_getvmstate(HSQUIRRELVM v);
extern SQInteger sq_getversion();


extern SQRESULT sq_compile(HSQUIRRELVM v,SQLEXREADFUNC read,SQUserPointer p,const SQChar *sourcename,SQBool raiseerror);
extern SQRESULT sq_compilebuffer(HSQUIRRELVM v,const SQChar *s,SQInteger size,const SQChar *sourcename,SQBool raiseerror);
extern void sq_enabledebuginfo(HSQUIRRELVM v, SQBool enable);
extern void sq_notifyallexceptions(HSQUIRRELVM v, SQBool enable);
extern void sq_setcompilererrorhandler(HSQUIRRELVM v,SQCOMPILERERROR f);


extern void sq_push(HSQUIRRELVM v,SQInteger idx);
extern void sq_pop(HSQUIRRELVM v,SQInteger nelemstopop);
extern void sq_poptop(HSQUIRRELVM v);
extern void sq_remove(HSQUIRRELVM v,SQInteger idx);
extern SQInteger sq_gettop(HSQUIRRELVM v);
extern void sq_settop(HSQUIRRELVM v,SQInteger newtop);
extern SQRESULT sq_reservestack(HSQUIRRELVM v,SQInteger nsize);
extern SQInteger sq_cmp(HSQUIRRELVM v);
extern void sq_move(HSQUIRRELVM dest,HSQUIRRELVM src,SQInteger idx);


extern SQUserPointer sq_newuserdata(HSQUIRRELVM v,SQUnsignedInteger size);
extern void sq_newtable(HSQUIRRELVM v);
extern void sq_newtableex(HSQUIRRELVM v,SQInteger initialcapacity);
extern void sq_newarray(HSQUIRRELVM v,SQInteger size);
extern void sq_newclosure(HSQUIRRELVM v,SQFUNCTION func,SQUnsignedInteger nfreevars);
extern SQRESULT sq_setparamscheck(HSQUIRRELVM v,SQInteger nparamscheck,const SQChar *typemask);
extern SQRESULT sq_bindenv(HSQUIRRELVM v,SQInteger idx);
extern void sq_pushstring(HSQUIRRELVM v,const SQChar *s,SQInteger len);
extern void sq_pushfloat(HSQUIRRELVM v,SQFloat f);
extern void sq_pushinteger(HSQUIRRELVM v,SQInteger n);
extern void sq_pushbool(HSQUIRRELVM v,SQBool b);
extern void sq_pushuserpointer(HSQUIRRELVM v,SQUserPointer p);
extern void sq_pushnull(HSQUIRRELVM v);
extern SQObjectType sq_gettype(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_typeof(HSQUIRRELVM v,SQInteger idx);
extern SQInteger sq_getsize(HSQUIRRELVM v,SQInteger idx);
extern SQHash sq_gethash(HSQUIRRELVM v, SQInteger idx);
extern SQRESULT sq_getbase(HSQUIRRELVM v,SQInteger idx);
extern SQBool sq_instanceof(HSQUIRRELVM v);
extern SQRESULT sq_tostring(HSQUIRRELVM v,SQInteger idx);
extern void sq_tobool(HSQUIRRELVM v, SQInteger idx, SQBool *b);
extern SQRESULT sq_getstring(HSQUIRRELVM v,SQInteger idx,const SQChar **c);
extern SQRESULT sq_getinteger(HSQUIRRELVM v,SQInteger idx,SQInteger *i);
extern SQRESULT sq_getfloat(HSQUIRRELVM v,SQInteger idx,SQFloat *f);
extern SQRESULT sq_getbool(HSQUIRRELVM v,SQInteger idx,SQBool *b);
extern SQRESULT sq_getthread(HSQUIRRELVM v,SQInteger idx,HSQUIRRELVM *thread);
extern SQRESULT sq_getuserpointer(HSQUIRRELVM v,SQInteger idx,SQUserPointer *p);
extern SQRESULT sq_getuserdata(HSQUIRRELVM v,SQInteger idx,SQUserPointer *p,SQUserPointer *typetag);
extern SQRESULT sq_settypetag(HSQUIRRELVM v,SQInteger idx,SQUserPointer typetag);
extern SQRESULT sq_gettypetag(HSQUIRRELVM v,SQInteger idx,SQUserPointer *typetag);
extern void sq_setreleasehook(HSQUIRRELVM v,SQInteger idx,SQRELEASEHOOK hook);
extern SQChar *sq_getscratchpad(HSQUIRRELVM v,SQInteger minsize);
extern SQRESULT sq_getfunctioninfo(HSQUIRRELVM v,SQInteger level,SQFunctionInfo *fi);
extern SQRESULT sq_getclosureinfo(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger *nparams,SQUnsignedInteger *nfreevars);
extern SQRESULT sq_getclosurename(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setnativeclosurename(HSQUIRRELVM v,SQInteger idx,const SQChar *name);
extern SQRESULT sq_setinstanceup(HSQUIRRELVM v, SQInteger idx, SQUserPointer p);
extern SQRESULT sq_getinstanceup(HSQUIRRELVM v, SQInteger idx, SQUserPointer *p,SQUserPointer typetag);
extern SQRESULT sq_setclassudsize(HSQUIRRELVM v, SQInteger idx, SQInteger udsize);
extern SQRESULT sq_newclass(HSQUIRRELVM v,SQBool hasbase);
extern SQRESULT sq_createinstance(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setattributes(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getattributes(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getclass(HSQUIRRELVM v,SQInteger idx);
extern void sq_weakref(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getdefaultdelegate(HSQUIRRELVM v,SQObjectType t);
extern SQRESULT sq_getmemberhandle(HSQUIRRELVM v,SQInteger idx,HSQMEMBERHANDLE *handle);
extern SQRESULT sq_getbyhandle(HSQUIRRELVM v,SQInteger idx,const HSQMEMBERHANDLE *handle);
extern SQRESULT sq_setbyhandle(HSQUIRRELVM v,SQInteger idx,const HSQMEMBERHANDLE *handle);


extern void sq_pushroottable(HSQUIRRELVM v);
extern void sq_pushregistrytable(HSQUIRRELVM v);
extern void sq_pushconsttable(HSQUIRRELVM v);
extern SQRESULT sq_setroottable(HSQUIRRELVM v);
extern SQRESULT sq_setconsttable(HSQUIRRELVM v);
extern SQRESULT sq_newslot(HSQUIRRELVM v, SQInteger idx, SQBool bstatic);
extern SQRESULT sq_deleteslot(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_set(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_get(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawget(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawset(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawdeleteslot(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_newmember(HSQUIRRELVM v,SQInteger idx,SQBool bstatic);
extern SQRESULT sq_rawnewmember(HSQUIRRELVM v,SQInteger idx,SQBool bstatic);
extern SQRESULT sq_arrayappend(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_arraypop(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_arrayresize(HSQUIRRELVM v,SQInteger idx,SQInteger newsize);
extern SQRESULT sq_arrayreverse(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_arrayremove(HSQUIRRELVM v,SQInteger idx,SQInteger itemidx);
extern SQRESULT sq_arrayinsert(HSQUIRRELVM v,SQInteger idx,SQInteger destpos);
extern SQRESULT sq_setdelegate(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getdelegate(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_clone(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setfreevariable(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger nval);
extern SQRESULT sq_next(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getweakrefval(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_clear(HSQUIRRELVM v,SQInteger idx);


extern SQRESULT sq_call(HSQUIRRELVM v,SQInteger params,SQBool retval,SQBool raiseerror);
extern SQRESULT sq_resume(HSQUIRRELVM v,SQBool retval,SQBool raiseerror);
extern const SQChar *sq_getlocal(HSQUIRRELVM v,SQUnsignedInteger level,SQUnsignedInteger idx);
extern SQRESULT sq_getcallee(HSQUIRRELVM v);
extern const SQChar *sq_getfreevariable(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger nval);
extern SQRESULT sq_throwerror(HSQUIRRELVM v,const SQChar *err);
extern SQRESULT sq_throwobject(HSQUIRRELVM v);
extern void sq_reseterror(HSQUIRRELVM v);
extern void sq_getlasterror(HSQUIRRELVM v);


extern SQRESULT sq_getstackobj(HSQUIRRELVM v,SQInteger idx,HSQOBJECT *po);
extern void sq_pushobject(HSQUIRRELVM v,HSQOBJECT obj);
extern void sq_addref(HSQUIRRELVM v,HSQOBJECT *po);
extern SQBool sq_release(HSQUIRRELVM v,HSQOBJECT *po);
extern SQUnsignedInteger sq_getrefcount(HSQUIRRELVM v,HSQOBJECT *po);
extern void sq_resetobject(HSQOBJECT *po);
extern const SQChar *sq_objtostring(const HSQOBJECT *o);
extern SQBool sq_objtobool(const HSQOBJECT *o);
extern SQInteger sq_objtointeger(const HSQOBJECT *o);
extern SQFloat sq_objtofloat(const HSQOBJECT *o);
extern SQUserPointer sq_objtouserpointer(const HSQOBJECT *o);
extern SQRESULT sq_getobjtypetag(const HSQOBJECT *o,SQUserPointer * typetag);


extern SQInteger sq_collectgarbage(HSQUIRRELVM v);
extern SQRESULT sq_resurrectunreachable(HSQUIRRELVM v);


extern SQRESULT sq_writeclosure(HSQUIRRELVM vm,SQWRITEFUNC writef,SQUserPointer up);
extern SQRESULT sq_readclosure(HSQUIRRELVM vm,SQREADFUNC readf,SQUserPointer up);


extern void *sq_malloc(SQUnsignedInteger size);
extern void *sq_realloc(void* p,SQUnsignedInteger oldsize,SQUnsignedInteger newsize);
extern void sq_free(void *p,SQUnsignedInteger size);


extern SQRESULT sq_stackinfos(HSQUIRRELVM v,SQInteger level,SQStackInfos *si);
extern void sq_setdebughook(HSQUIRRELVM v);
extern void sq_setnativedebughook(HSQUIRRELVM v,SQDEBUGHOOK hook);
# 503 "../../../libs/squirrel/include/squirrel.h"
}
# 16 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 1 "../../../libs/squirrel/squirrel/sqobject.h" 1




# 1 "../../../libs/squirrel/squirrel/squtils.h" 1




void *sq_vm_malloc(SQUnsignedInteger size);
void *sq_vm_realloc(void *p,SQUnsignedInteger oldsize,SQUnsignedInteger size);
void sq_vm_free(void *p,SQUnsignedInteger size);
# 18 "../../../libs/squirrel/squirrel/squtils.h"
template<typename T> class sqvector
{
public:
 sqvector()
 {
  _vals = __null;
  _size = 0;
  _allocated = 0;
 }
 sqvector(const sqvector<T>& v)
 {
  copy(v);
 }
 void copy(const sqvector<T>& v)
 {
  if(_size) {
   resize(0);
  }

  if(v._size > _allocated) {
   _realloc(v._size);
  }
  for(SQUnsignedInteger i = 0; i < v._size; i++) {
   new ((void *)&_vals[i]) T(v._vals[i]);
  }
  _size = v._size;
 }
 ~sqvector()
 {
  if(_allocated) {
   for(SQUnsignedInteger i = 0; i < _size; i++)
    _vals[i].~T();
   sq_vm_free((_vals),((_allocated * sizeof(T))));;
  }
 }
 void reserve(SQUnsignedInteger newsize) { _realloc(newsize); }
 void resize(SQUnsignedInteger newsize, const T& fill = T())
 {
  if(newsize > _allocated)
   _realloc(newsize);
  if(newsize > _size) {
   while(_size < newsize) {
    new ((void *)&_vals[_size]) T(fill);
    _size++;
   }
  }
  else{
   for(SQUnsignedInteger i = newsize; i < _size; i++) {
    _vals[i].~T();
   }
   _size = newsize;
  }
 }
 void shrinktofit() { if(_size > 4) { _realloc(_size); } }
 T& top() const { return _vals[_size - 1]; }
 inline SQUnsignedInteger size() const { return _size; }
 bool empty() const { return (_size <= 0); }
 inline T &push_back(const T& val = T())
 {
  if(_allocated <= _size)
   _realloc(_size * 2);
  return *(new ((void *)&_vals[_size++]) T(val));
 }
 inline void pop_back()
 {
  _size--; _vals[_size].~T();
 }
 void insert(SQUnsignedInteger idx, const T& val)
 {
  resize(_size + 1);
  for(SQUnsignedInteger i = _size - 1; i > idx; i--) {
   _vals[i] = _vals[i - 1];
  }
     _vals[idx] = val;
 }
 void remove(SQUnsignedInteger idx)
 {
  _vals[idx].~T();
  if(idx < (_size - 1)) {
   memmove(&_vals[idx], &_vals[idx+1], sizeof(T) * (_size - idx - 1));
  }
  _size--;
 }
 SQUnsignedInteger capacity() { return _allocated; }
 inline T &back() const { return _vals[_size - 1]; }
 inline T& operator[](SQUnsignedInteger pos) const{ return _vals[pos]; }
 T* _vals;
private:
 void _realloc(SQUnsignedInteger newsize)
 {
  newsize = (newsize > 0)?newsize:4;
  _vals = (T*)sq_vm_realloc((_vals),(_allocated * sizeof(T)),(newsize * sizeof(T)));;
  _allocated = newsize;
 }
 SQUnsignedInteger _size;
 SQUnsignedInteger _allocated;
};
# 6 "../../../libs/squirrel/squirrel/sqobject.h" 2
# 17 "../../../libs/squirrel/squirrel/sqobject.h"
struct SQSharedState;

enum SQMetaMethod{
 MT_ADD=0,
 MT_SUB=1,
 MT_MUL=2,
 MT_DIV=3,
 MT_UNM=4,
 MT_MODULO=5,
 MT_SET=6,
 MT_GET=7,
 MT_TYPEOF=8,
 MT_NEXTI=9,
 MT_CMP=10,
 MT_CALL=11,
 MT_CLONED=12,
 MT_NEWSLOT=13,
 MT_DELSLOT=14,
 MT_TOSTRING=15,
 MT_NEWMEMBER=16,
 MT_INHERITED=17,
 MT_LAST = 18
};
# 87 "../../../libs/squirrel/squirrel/sqobject.h"
struct SQRefCounted
{
 SQUnsignedInteger _uiRef;
 struct SQWeakRef *_weakref;
 SQRefCounted() { _uiRef = 0; _weakref = __null; }
 virtual ~SQRefCounted();
 SQWeakRef *GetWeakRef(SQObjectType type);
 virtual void Release()=0;

};

struct SQWeakRef : SQRefCounted
{
 void Release();
 SQObject _obj;
};



struct SQObjectPtr;
# 206 "../../../libs/squirrel/squirrel/sqobject.h"
struct SQObjectPtr : public SQObject
{
 SQObjectPtr()
 {
 
  _type=OT_NULL;
  _unVal.pUserPointer=__null;
 }
 SQObjectPtr(const SQObjectPtr &o)
 {
  _type = o._type;
  _unVal = o._unVal;
  if((_type&0x08000000)) { _unVal.pRefCounted->_uiRef++; };
 }
 SQObjectPtr(const SQObject &o)
 {
  _type = o._type;
  _unVal = o._unVal;
  if((_type&0x08000000)) { _unVal.pRefCounted->_uiRef++; };
 }
 SQObjectPtr(SQTable * x) { _type=OT_TABLE; _unVal.pTable = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 226, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQTable *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_TABLE; _unVal.pTable = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQClass * x) { _type=OT_CLASS; _unVal.pClass = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 227, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQClass *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_CLASS; _unVal.pClass = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQInstance * x) { _type=OT_INSTANCE; _unVal.pInstance = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 228, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQInstance *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_INSTANCE; _unVal.pInstance = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQArray * x) { _type=OT_ARRAY; _unVal.pArray = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 229, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQArray *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_ARRAY; _unVal.pArray = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQClosure * x) { _type=OT_CLOSURE; _unVal.pClosure = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 230, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQClosure *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_CLOSURE; _unVal.pClosure = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQNativeClosure * x) { _type=OT_NATIVECLOSURE; _unVal.pNativeClosure = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 231, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQNativeClosure *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_NATIVECLOSURE; _unVal.pNativeClosure = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQOuter * x) { _type=OT_OUTER; _unVal.pOuter = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 232, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQOuter *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_OUTER; _unVal.pOuter = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQGenerator * x) { _type=OT_GENERATOR; _unVal.pGenerator = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 233, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQGenerator *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_GENERATOR; _unVal.pGenerator = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQString * x) { _type=OT_STRING; _unVal.pString = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 234, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQString *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_STRING; _unVal.pString = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQUserData * x) { _type=OT_USERDATA; _unVal.pUserData = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 235, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQUserData *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_USERDATA; _unVal.pUserData = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQWeakRef * x) { _type=OT_WEAKREF; _unVal.pWeakRef = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 236, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQWeakRef *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_WEAKREF; _unVal.pWeakRef = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQVM * x) { _type=OT_THREAD; _unVal.pThread = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 237, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQVM *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_THREAD; _unVal.pThread = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }
 SQObjectPtr(SQFunctionProto * x) { _type=OT_FUNCPROTO; _unVal.pFunctionProto = x; ((_unVal.pTable) ? static_cast<void> (0) : __assert_fail ("_unVal.pTable", "../../../libs/squirrel/squirrel/sqobject.h", 238, __PRETTY_FUNCTION__)); _unVal.pRefCounted->_uiRef++; } inline SQObjectPtr& operator=(SQFunctionProto *x) { SQObjectType tOldType; SQObjectValue unOldVal; tOldType=_type; unOldVal=_unVal; _type = OT_FUNCPROTO; _unVal.pFunctionProto = x; _unVal.pRefCounted->_uiRef++; if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); }; return *this; }

 SQObjectPtr(SQInteger x) { _type=OT_INTEGER; _unVal.nInteger = x; } inline SQObjectPtr& operator=(SQInteger x) { if((_type&0x08000000) && ((--_unVal.pRefCounted->_uiRef)==0)) { _unVal.pRefCounted->Release(); }; _type = OT_INTEGER; _unVal.nInteger = x; return *this; }
 SQObjectPtr(SQFloat x) { _type=OT_FLOAT; _unVal.fFloat = x; } inline SQObjectPtr& operator=(SQFloat x) { if((_type&0x08000000) && ((--_unVal.pRefCounted->_uiRef)==0)) { _unVal.pRefCounted->Release(); }; _type = OT_FLOAT; _unVal.fFloat = x; return *this; }
 SQObjectPtr(SQUserPointer x) { _type=OT_USERPOINTER; _unVal.pUserPointer = x; } inline SQObjectPtr& operator=(SQUserPointer x) { if((_type&0x08000000) && ((--_unVal.pRefCounted->_uiRef)==0)) { _unVal.pRefCounted->Release(); }; _type = OT_USERPOINTER; _unVal.pUserPointer = x; return *this; }

 SQObjectPtr(bool bBool)
 {
 
  _type = OT_BOOL;
  _unVal.nInteger = bBool?1:0;
 }
 inline SQObjectPtr& operator=(bool b)
 {
  if((_type&0x08000000) && ((--_unVal.pRefCounted->_uiRef)==0)) { _unVal.pRefCounted->Release(); };
 
  _type = OT_BOOL;
  _unVal.nInteger = b?1:0;
  return *this;
 }

 ~SQObjectPtr()
 {
  if((_type&0x08000000) && ((--_unVal.pRefCounted->_uiRef)==0)) { _unVal.pRefCounted->Release(); };
 }

 inline SQObjectPtr& operator=(const SQObjectPtr& obj)
 {
  SQObjectType tOldType;
  SQObjectValue unOldVal;
  tOldType=_type;
  unOldVal=_unVal;
  _unVal = obj._unVal;
  _type = obj._type;
  if((_type&0x08000000)) { _unVal.pRefCounted->_uiRef++; };
  if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); };
  return *this;
 }
 inline SQObjectPtr& operator=(const SQObject& obj)
 {
  SQObjectType tOldType;
  SQObjectValue unOldVal;
  tOldType=_type;
  unOldVal=_unVal;
  _unVal = obj._unVal;
  _type = obj._type;
  if((_type&0x08000000)) { _unVal.pRefCounted->_uiRef++; };
  if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); };
  return *this;
 }
 inline void Null()
 {
  SQObjectType tOldType = _type;
  SQObjectValue unOldVal = _unVal;
  _type = OT_NULL;
  _unVal.raw = (SQRawObjectVal)__null;
  if((tOldType&0x08000000) && ((--unOldVal.pRefCounted->_uiRef)==0)) { unOldVal.pRefCounted->Release(); };
 }
 private:
  SQObjectPtr(const SQChar *){}
};


inline void _Swap(SQObject &a,SQObject &b)
{
 SQObjectType tOldType = a._type;
 SQObjectValue unOldVal = a._unVal;
 a._type = b._type;
 a._unVal = b._unVal;
 b._type = tOldType;
 b._unVal = unOldVal;
}




struct SQCollectable : public SQRefCounted {
 SQCollectable *_next;
 SQCollectable *_prev;
 SQSharedState *_sharedstate;
 virtual SQObjectType GetType()=0;
 virtual void Release()=0;
 virtual void Mark(SQCollectable **chain)=0;
 void UnMark();
 virtual void Finalize()=0;
 static void AddToChain(SQCollectable **chain,SQCollectable *c);
 static void RemoveFromChain(SQCollectable **chain,SQCollectable *c);
};
# 340 "../../../libs/squirrel/squirrel/sqobject.h"
struct SQDelegable : public SQCollectable {
 bool SetDelegate(SQTable *m);
 virtual bool GetMetaMethod(SQVM *v,SQMetaMethod mm,SQObjectPtr &res);
 SQTable *_delegate;
};

SQUnsignedInteger TranslateIndex(const SQObjectPtr &idx);
typedef sqvector<SQObjectPtr> SQObjectPtrVec;
typedef sqvector<SQInteger> SQIntVec;
const SQChar *GetTypeName(const SQObjectPtr &obj1);
const SQChar *IdType2Name(SQObjectType type);
# 17 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 1 "../../../libs/squirrel/squirrel/sqstate.h" 1






struct SQString;
struct SQTable;



struct SQStringTable
{
 SQStringTable(SQSharedState*ss);
 ~SQStringTable();
 SQString *Add(const SQChar *,SQInteger len);
 void Remove(SQString *);
private:
 void Resize(SQInteger size);
 void AllocNodes(SQInteger size);
 SQString **_strings;
 SQUnsignedInteger _numofslots;
 SQUnsignedInteger _slotused;
 SQSharedState *_sharedstate;
};

struct RefTable {
 struct RefNode {
  SQObjectPtr obj;
  SQUnsignedInteger refs;
  struct RefNode *next;
 };
 RefTable();
 ~RefTable();
 void AddRef(SQObject &obj);
 SQBool Release(SQObject &obj);
 SQUnsignedInteger GetRefCount(SQObject &obj);

 void Mark(SQCollectable **chain);

 void Finalize();
private:
 RefNode *Get(SQObject &obj,SQHash &mainpos,RefNode **prev,bool add);
 RefNode *Add(SQHash mainpos,SQObject &obj);
 void Resize(SQUnsignedInteger size);
 void AllocNodes(SQUnsignedInteger size);
 SQUnsignedInteger _numofslots;
 SQUnsignedInteger _slotused;
 RefNode *_nodes;
 RefNode *_freelist;
 RefNode **_buckets;
};




struct SQObjectPtr;

struct SQSharedState
{
 SQSharedState();
 ~SQSharedState();
 void Init();
public:
 SQChar* GetScratchPad(SQInteger size);
 SQInteger GetMetaMethodIdxByName(const SQObjectPtr &name);

 SQInteger CollectGarbage(SQVM *vm);
 void RunMark(SQVM *vm,SQCollectable **tchain);
 SQInteger ResurrectUnreachable(SQVM *vm);
 static void MarkObject(SQObjectPtr &o,SQCollectable **chain);

 SQObjectPtrVec *_metamethods;
 SQObjectPtr _metamethodsmap;
 SQObjectPtrVec *_systemstrings;
 SQObjectPtrVec *_types;
 SQStringTable *_stringtable;
 RefTable _refs_table;
 SQObjectPtr _registry;
 SQObjectPtr _consts;
 SQObjectPtr _constructoridx;

 SQCollectable *_gc_chain;

 SQObjectPtr _root_vm;
 SQObjectPtr _table_default_delegate;
 static SQRegFunction _table_default_delegate_funcz[];
 SQObjectPtr _array_default_delegate;
 static SQRegFunction _array_default_delegate_funcz[];
 SQObjectPtr _string_default_delegate;
 static SQRegFunction _string_default_delegate_funcz[];
 SQObjectPtr _number_default_delegate;
 static SQRegFunction _number_default_delegate_funcz[];
 SQObjectPtr _generator_default_delegate;
 static SQRegFunction _generator_default_delegate_funcz[];
 SQObjectPtr _closure_default_delegate;
 static SQRegFunction _closure_default_delegate_funcz[];
 SQObjectPtr _thread_default_delegate;
 static SQRegFunction _thread_default_delegate_funcz[];
 SQObjectPtr _class_default_delegate;
 static SQRegFunction _class_default_delegate_funcz[];
 SQObjectPtr _instance_default_delegate;
 static SQRegFunction _instance_default_delegate_funcz[];
 SQObjectPtr _weakref_default_delegate;
 static SQRegFunction _weakref_default_delegate_funcz[];

 SQCOMPILERERROR _compilererrorhandler;
 SQPRINTFUNCTION _printfunc;
 SQPRINTFUNCTION _errorfunc;
 bool _debuginfo;
 bool _notifyallexceptions;
private:
 SQChar *_scratchpad;
 SQInteger _scratchpadsize;
};
# 139 "../../../libs/squirrel/squirrel/sqstate.h"
bool CompileTypemask(SQIntVec &res,const SQChar *typemask);
# 18 "../../../libs/squirrel/squirrel/sqpcheader.h" 2
# 5 "../../../libs/squirrel/squirrel/sqdebug.cpp" 2
# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stdarg.h" 1 3 4
# 6 "../../../libs/squirrel/squirrel/sqdebug.cpp" 2
# 1 "../../../libs/squirrel/squirrel/sqvm.h" 1




# 1 "../../../libs/squirrel/squirrel/sqopcodes.h" 1







enum BitWiseOP {
 BW_AND = 0,
 BW_OR = 2,
 BW_XOR = 3,
 BW_SHIFTL = 4,
 BW_SHIFTR = 5,
 BW_USHIFTR = 6
};

enum CmpOP {
 CMP_G = 0,
 CMP_GE = 2,
 CMP_L = 3,
 CMP_LE = 4,
 CMP_3W = 5
};

enum NewObjectType {
 NOT_TABLE = 0,
 NOT_ARRAY = 1,
 NOT_CLASS = 2
};

enum AppendArrayType {
 AAT_STACK = 0,
 AAT_LITERAL = 1,
 AAT_INT = 2,
 AAT_FLOAT = 3,
 AAT_BOOL = 4
};

enum SQOpcode
{
 _OP_LINE= 0x00,
 _OP_LOAD= 0x01,
 _OP_LOADINT= 0x02,
 _OP_LOADFLOAT= 0x03,
 _OP_DLOAD= 0x04,
 _OP_TAILCALL= 0x05,
 _OP_CALL= 0x06,
 _OP_PREPCALL= 0x07,
 _OP_PREPCALLK= 0x08,
 _OP_GETK= 0x09,
 _OP_MOVE= 0x0A,
 _OP_NEWSLOT= 0x0B,
 _OP_DELETE= 0x0C,
 _OP_SET= 0x0D,
 _OP_GET= 0x0E,
 _OP_EQ= 0x0F,
 _OP_NE= 0x10,
 _OP_ADD= 0x11,
 _OP_SUB= 0x12,
 _OP_MUL= 0x13,
 _OP_DIV= 0x14,
 _OP_MOD= 0x15,
 _OP_BITW= 0x16,
 _OP_RETURN= 0x17,
 _OP_LOADNULLS= 0x18,
 _OP_LOADROOT= 0x19,
 _OP_LOADBOOL= 0x1A,
 _OP_DMOVE= 0x1B,
 _OP_JMP= 0x1C,

 _OP_JCMP= 0x1D,
 _OP_JZ= 0x1E,
 _OP_SETOUTER= 0x1F,
 _OP_GETOUTER= 0x20,
 _OP_NEWOBJ= 0x21,
 _OP_APPENDARRAY= 0x22,
 _OP_COMPARITH= 0x23,
 _OP_INC= 0x24,
 _OP_INCL= 0x25,
 _OP_PINC= 0x26,
 _OP_PINCL= 0x27,
 _OP_CMP= 0x28,
 _OP_EXISTS= 0x29,
 _OP_INSTANCEOF= 0x2A,
 _OP_AND= 0x2B,
 _OP_OR= 0x2C,
 _OP_NEG= 0x2D,
 _OP_NOT= 0x2E,
 _OP_BWNOT= 0x2F,
 _OP_CLOSURE= 0x30,
 _OP_YIELD= 0x31,
 _OP_RESUME= 0x32,
 _OP_FOREACH= 0x33,
 _OP_POSTFOREACH= 0x34,
 _OP_CLONE= 0x35,
 _OP_TYPEOF= 0x36,
 _OP_PUSHTRAP= 0x37,
 _OP_POPTRAP= 0x38,
 _OP_THROW= 0x39,
 _OP_NEWSLOTA= 0x3A,
 _OP_GETBASE= 0x3B,
 _OP_CLOSE= 0x3C,
};

struct SQInstructionDesc {
 const SQChar *name;
};

struct SQInstruction
{
 SQInstruction(){};
 SQInstruction(SQOpcode _op,SQInteger a0=0,SQInteger a1=0,SQInteger a2=0,SQInteger a3=0)
 { op = _op;
  _arg0 = (unsigned char)a0;_arg1 = (SQInt32)a1;
  _arg2 = (unsigned char)a2;_arg3 = (unsigned char)a3;
 }


 SQInt32 _arg1;
 unsigned char op;
 unsigned char _arg0;
 unsigned char _arg2;
 unsigned char _arg3;
};


typedef sqvector<SQInstruction> SQInstructionVec;
# 6 "../../../libs/squirrel/squirrel/sqvm.h" 2
# 14 "../../../libs/squirrel/squirrel/sqvm.h"
void sq_base_register(HSQUIRRELVM v);

struct SQExceptionTrap{
 SQExceptionTrap() {}
 SQExceptionTrap(SQInteger ss, SQInteger stackbase,SQInstruction *ip, SQInteger ex_target){ _stacksize = ss; _stackbase = stackbase; _ip = ip; _extarget = ex_target;}
 SQExceptionTrap(const SQExceptionTrap &et) { (*this) = et; }
 SQInteger _stackbase;
 SQInteger _stacksize;
 SQInstruction *_ip;
 SQInteger _extarget;
};






typedef sqvector<SQExceptionTrap> ExceptionsTraps;

struct SQVM : public SQCollectable
{
 struct CallInfo{

  SQInstruction *_ip;
  SQObjectPtr *_literals;
  SQObjectPtr _closure;
  SQGenerator *_generator;
  SQInt32 _etraps;
  SQInt32 _prevstkbase;
  SQInt32 _prevtop;
  SQInt32 _target;
  SQInt32 _ncalls;
  SQBool _root;
 };

typedef sqvector<CallInfo> CallInfoVec;
public:
 void DebugHookProxy(SQInteger type, const SQChar * sourcename, SQInteger line, const SQChar * funcname);
 static void _DebugHookProxy(HSQUIRRELVM v, SQInteger type, const SQChar * sourcename, SQInteger line, const SQChar * funcname);
 enum ExecutionType { ET_CALL, ET_RESUME_GENERATOR, ET_RESUME_VM,ET_RESUME_THROW_VM };
 SQVM(SQSharedState *ss);
 ~SQVM();
 bool Init(SQVM *friendvm, SQInteger stacksize);
 bool Execute(SQObjectPtr &func, SQInteger nargs, SQInteger stackbase, SQObjectPtr &outres, SQBool raiseerror, ExecutionType et = ET_CALL);

 bool CallNative(SQNativeClosure *nclosure, SQInteger nargs, SQInteger newbase, SQObjectPtr &retval,bool &suspend);

 bool StartCall(SQClosure *closure, SQInteger target, SQInteger nargs, SQInteger stackbase, bool tailcall);
 bool CreateClassInstance(SQClass *theclass, SQObjectPtr &inst, SQObjectPtr &constructor);

 bool Call(SQObjectPtr &closure, SQInteger nparams, SQInteger stackbase, SQObjectPtr &outres,SQBool raiseerror);
 SQRESULT Suspend();

 void CallDebugHook(SQInteger type,SQInteger forcedline=0);
 void CallErrorHandler(SQObjectPtr &e);
 bool Get(const SQObjectPtr &self, const SQObjectPtr &key, SQObjectPtr &dest, bool raw, SQInteger selfidx);
 SQInteger FallBackGet(const SQObjectPtr &self,const SQObjectPtr &key,SQObjectPtr &dest);
 bool InvokeDefaultDelegate(const SQObjectPtr &self,const SQObjectPtr &key,SQObjectPtr &dest);
 bool Set(const SQObjectPtr &self, const SQObjectPtr &key, const SQObjectPtr &val, SQInteger selfidx);
 SQInteger FallBackSet(const SQObjectPtr &self,const SQObjectPtr &key,const SQObjectPtr &val);
 bool NewSlot(const SQObjectPtr &self, const SQObjectPtr &key, const SQObjectPtr &val,bool bstatic);
 bool NewSlotA(const SQObjectPtr &self,const SQObjectPtr &key,const SQObjectPtr &val,const SQObjectPtr &attrs,bool bstatic,bool raw);
 bool DeleteSlot(const SQObjectPtr &self, const SQObjectPtr &key, SQObjectPtr &res);
 bool Clone(const SQObjectPtr &self, SQObjectPtr &target);
 bool ObjCmp(const SQObjectPtr &o1, const SQObjectPtr &o2,SQInteger &res);
 bool StringCat(const SQObjectPtr &str, const SQObjectPtr &obj, SQObjectPtr &dest);
 static bool IsEqual(const SQObjectPtr &o1,const SQObjectPtr &o2,bool &res);
 bool ToString(const SQObjectPtr &o,SQObjectPtr &res);
 SQString *PrintObjVal(const SQObjectPtr &o);


 void Raise_Error(const SQChar *s, ...);
 void Raise_Error(const SQObjectPtr &desc);
 void Raise_IdxError(const SQObjectPtr &o);
 void Raise_CompareError(const SQObject &o1, const SQObject &o2);
 void Raise_ParamTypeError(SQInteger nparam,SQInteger typemask,SQInteger type);

 void FindOuter(SQObjectPtr &target, SQObjectPtr *stackindex);
 void RelocateOuters();
 void CloseOuters(SQObjectPtr *stackindex);

 bool TypeOf(const SQObjectPtr &obj1, SQObjectPtr &dest);
 bool CallMetaMethod(SQObjectPtr &closure, SQMetaMethod mm, SQInteger nparams, SQObjectPtr &outres);
 bool ArithMetaMethod(SQInteger op, const SQObjectPtr &o1, const SQObjectPtr &o2, SQObjectPtr &dest);
 bool Return(SQInteger _arg0, SQInteger _arg1, SQObjectPtr &retval);

 bool ARITH_OP(SQUnsignedInteger op,SQObjectPtr &trg,const SQObjectPtr &o1,const SQObjectPtr &o2);
 bool BW_OP(SQUnsignedInteger op,SQObjectPtr &trg,const SQObjectPtr &o1,const SQObjectPtr &o2);
 bool NEG_OP(SQObjectPtr &trg,const SQObjectPtr &o1);
 bool CMP_OP(CmpOP op, const SQObjectPtr &o1,const SQObjectPtr &o2,SQObjectPtr &res);
 bool CLOSURE_OP(SQObjectPtr &target, SQFunctionProto *func);
 bool CLASS_OP(SQObjectPtr &target,SQInteger base,SQInteger attrs);

 bool FOREACH_OP(SQObjectPtr &o1,SQObjectPtr &o2,SQObjectPtr &o3,SQObjectPtr &o4,SQInteger arg_2,int exitpos,int &jump);

 bool PLOCAL_INC(SQInteger op,SQObjectPtr &target, SQObjectPtr &a, SQObjectPtr &incr);
 bool DerefInc(SQInteger op,SQObjectPtr &target, SQObjectPtr &self, SQObjectPtr &key, SQObjectPtr &incr, bool postfix,SQInteger arg0);





 void Mark(SQCollectable **chain);
 SQObjectType GetType() {return OT_THREAD;}

 void Finalize();
 void GrowCallStack() {
  SQInteger newsize = _alloccallsstacksize*2;
  _callstackdata.resize(newsize);
  _callsstack = &_callstackdata[0];
  _alloccallsstacksize = newsize;
 }
 bool EnterFrame(SQInteger newbase, SQInteger newtop, bool tailcall);
 void LeaveFrame();
 void Release(){ {this->~SQVM();sq_vm_free(this,sizeof(SQVM));}; }


 void Remove(SQInteger n);

 static bool IsFalse(SQObjectPtr &o);

 void Pop();
 void Pop(SQInteger n);
 void Push(const SQObjectPtr &o);
 void PushNull();
 SQObjectPtr &Top();
 SQObjectPtr &PopGet();
 SQObjectPtr &GetUp(SQInteger n);
 SQObjectPtr &GetAt(SQInteger n);

 SQObjectPtrVec _stack;

 SQInteger _top;
 SQInteger _stackbase;
 SQOuter *_openouters;
 SQObjectPtr _roottable;
 SQObjectPtr _lasterror;
 SQObjectPtr _errorhandler;

 bool _debughook;
 SQDEBUGHOOK _debughook_native;
 SQObjectPtr _debughook_closure;

 SQObjectPtr temp_reg;


 CallInfo* _callsstack;
 SQInteger _callsstacksize;
 SQInteger _alloccallsstacksize;
 sqvector<CallInfo> _callstackdata;

 ExceptionsTraps _etraps;
 CallInfo *ci;
 void *_foreignptr;

 SQSharedState *_sharedstate;
 SQInteger _nnativecalls;
 SQInteger _nmetamethodscall;

 SQBool _suspended;
 SQBool _suspended_root;
 SQInteger _suspended_target;
 SQInteger _suspended_traps;
};

struct AutoDec{
 AutoDec(SQInteger *n) { _n = n; }
 ~AutoDec() { (*_n)--; }
 SQInteger *_n;
};

inline SQObjectPtr &stack_get(HSQUIRRELVM v,SQInteger idx){return ((idx>=0)?(v->GetAt(idx+v->_stackbase-1)):(v->GetUp(idx)));}
# 7 "../../../libs/squirrel/squirrel/sqdebug.cpp" 2
# 1 "../../../libs/squirrel/squirrel/sqfuncproto.h" 1






enum SQOuterType {
 otLOCAL = 0,
 otOUTER = 1
};

struct SQOuterVar
{

 SQOuterVar(){}
 SQOuterVar(const SQObjectPtr &name,const SQObjectPtr &src,SQOuterType t)
 {
  _name = name;
  _src=src;
  _type=t;
 }
 SQOuterVar(const SQOuterVar &ov)
 {
  _type=ov._type;
  _src=ov._src;
  _name=ov._name;
 }
 SQOuterType _type;
 SQObjectPtr _name;
 SQObjectPtr _src;
};

struct SQLocalVarInfo
{
 SQLocalVarInfo():_start_op(0),_end_op(0),_pos(0){}
 SQLocalVarInfo(const SQLocalVarInfo &lvi)
 {
  _name=lvi._name;
  _start_op=lvi._start_op;
  _end_op=lvi._end_op;
  _pos=lvi._pos;
 }
 SQObjectPtr _name;
 SQUnsignedInteger _start_op;
 SQUnsignedInteger _end_op;
 SQUnsignedInteger _pos;
};

struct SQLineInfo { SQInteger _line;SQInteger _op; };

typedef sqvector<SQOuterVar> SQOuterVarVec;
typedef sqvector<SQLocalVarInfo> SQLocalVarInfoVec;
typedef sqvector<SQLineInfo> SQLineInfoVec;
# 62 "../../../libs/squirrel/squirrel/sqfuncproto.h"
struct SQFunctionProto : public SQCollectable
{
private:
 SQFunctionProto(SQSharedState *ss);
 ~SQFunctionProto();

public:
 static SQFunctionProto *Create(SQSharedState *ss,SQInteger ninstructions,
  SQInteger nliterals,SQInteger nparameters,
  SQInteger nfunctions,SQInteger noutervalues,
  SQInteger nlineinfos,SQInteger nlocalvarinfos,SQInteger ndefaultparams)
 {
  SQFunctionProto *f;

  f = (SQFunctionProto *)sq_vm_malloc((sizeof(SQFunctionProto) +((ninstructions-1)*sizeof(SQInstruction))+(nliterals*sizeof(SQObjectPtr)) +(nparameters*sizeof(SQObjectPtr))+(nfunctions*sizeof(SQObjectPtr)) +(noutervalues*sizeof(SQOuterVar))+(nlineinfos*sizeof(SQLineInfo)) +(nlocalvarinfos*sizeof(SQLocalVarInfo))+(ndefaultparams*sizeof(SQInteger))));
  new (f) SQFunctionProto(ss);
  f->_ninstructions = ninstructions;
  f->_literals = (SQObjectPtr*)&f->_instructions[ninstructions];
  f->_nliterals = nliterals;
  f->_parameters = (SQObjectPtr*)&f->_literals[nliterals];
  f->_nparameters = nparameters;
  f->_functions = (SQObjectPtr*)&f->_parameters[nparameters];
  f->_nfunctions = nfunctions;
  f->_outervalues = (SQOuterVar*)&f->_functions[nfunctions];
  f->_noutervalues = noutervalues;
  f->_lineinfos = (SQLineInfo *)&f->_outervalues[noutervalues];
  f->_nlineinfos = nlineinfos;
  f->_localvarinfos = (SQLocalVarInfo *)&f->_lineinfos[nlineinfos];
  f->_nlocalvarinfos = nlocalvarinfos;
  f->_defaultparams = (SQInteger *)&f->_localvarinfos[nlocalvarinfos];
  f->_ndefaultparams = ndefaultparams;

  { for(SQInteger n = 0; n < ((SQInteger)f->_nliterals); n++) { new (&f->_literals[n]) SQObjectPtr(); } };
  { for(SQInteger n = 0; n < ((SQInteger)f->_nparameters); n++) { new (&f->_parameters[n]) SQObjectPtr(); } };
  { for(SQInteger n = 0; n < ((SQInteger)f->_nfunctions); n++) { new (&f->_functions[n]) SQObjectPtr(); } };
  { for(SQInteger n = 0; n < ((SQInteger)f->_noutervalues); n++) { new (&f->_outervalues[n]) SQOuterVar(); } };

  { for(SQInteger n = 0; n < ((SQInteger)f->_nlocalvarinfos); n++) { new (&f->_localvarinfos[n]) SQLocalVarInfo(); } };
  return f;
 }
 void Release(){
  { for(SQInteger nl = 0; nl < ((SQInteger)_nliterals); nl++) { _literals[nl].~SQObjectPtr(); } };
  { for(SQInteger nl = 0; nl < ((SQInteger)_nparameters); nl++) { _parameters[nl].~SQObjectPtr(); } };
  { for(SQInteger nl = 0; nl < ((SQInteger)_nfunctions); nl++) { _functions[nl].~SQObjectPtr(); } };
  { for(SQInteger nl = 0; nl < ((SQInteger)_noutervalues); nl++) { _outervalues[nl].~SQOuterVar(); } };

  { for(SQInteger nl = 0; nl < ((SQInteger)_nlocalvarinfos); nl++) { _localvarinfos[nl].~SQLocalVarInfo(); } };
  SQInteger size = (sizeof(SQFunctionProto) +((_ninstructions-1)*sizeof(SQInstruction))+(_nliterals*sizeof(SQObjectPtr)) +(_nparameters*sizeof(SQObjectPtr))+(_nfunctions*sizeof(SQObjectPtr)) +(_noutervalues*sizeof(SQOuterVar))+(_nlineinfos*sizeof(SQLineInfo)) +(_nlocalvarinfos*sizeof(SQLocalVarInfo))+(_ndefaultparams*sizeof(SQInteger)));
  this->~SQFunctionProto();
  sq_vm_free(this,size);
 }

 const SQChar* GetLocal(SQVM *v,SQUnsignedInteger stackbase,SQUnsignedInteger nseq,SQUnsignedInteger nop);
 SQInteger GetLine(SQInstruction *curr);
 bool Save(SQVM *v,SQUserPointer up,SQWRITEFUNC write);
 static bool Load(SQVM *v,SQUserPointer up,SQREADFUNC read,SQObjectPtr &ret);

 void Mark(SQCollectable **chain);
 void Finalize(){ { for(SQInteger _n_ = 0; _n_ < ((SQInteger)_nliterals); _n_++) { _literals[_n_].Null(); } }; }
 SQObjectType GetType() {return OT_FUNCPROTO;}

 SQObjectPtr _sourcename;
 SQObjectPtr _name;
    SQInteger _stacksize;
 bool _bgenerator;
 SQInteger _varparams;

 SQInteger _nlocalvarinfos;
 SQLocalVarInfo *_localvarinfos;

 SQInteger _nlineinfos;
 SQLineInfo *_lineinfos;

 SQInteger _nliterals;
 SQObjectPtr *_literals;

 SQInteger _nparameters;
 SQObjectPtr *_parameters;

 SQInteger _nfunctions;
 SQObjectPtr *_functions;

 SQInteger _noutervalues;
 SQOuterVar *_outervalues;

 SQInteger _ndefaultparams;
 SQInteger *_defaultparams;

 SQInteger _ninstructions;
 SQInstruction _instructions[1];
};
# 8 "../../../libs/squirrel/squirrel/sqdebug.cpp" 2
# 1 "../../../libs/squirrel/squirrel/sqclosure.h" 1







struct SQFunctionProto;
struct SQClass;
struct SQClosure : public SQCollectable
{
private:
 SQClosure(SQSharedState *ss,SQFunctionProto *func){_function = func; { (_function)->_uiRef++; }; _base = __null; {_next=__null;_prev=__null;_sharedstate=ss;};AddToChain(&(this)->_sharedstate->_gc_chain,this); _env = __null;}
public:
 static SQClosure *Create(SQSharedState *ss,SQFunctionProto *func){
  SQInteger size = (sizeof(SQClosure) + (func->_noutervalues*sizeof(SQObjectPtr)) + (func->_ndefaultparams*sizeof(SQObjectPtr)));
  SQClosure *nc=(SQClosure*)sq_vm_malloc((size));;
  new (nc) SQClosure(ss,func);
  nc->_outervalues = (SQObjectPtr *)(nc + 1);
  nc->_defaultparams = &nc->_outervalues[func->_noutervalues];
  { for(SQInteger n = 0; n < ((SQInteger)func->_noutervalues); n++) { new (&nc->_outervalues[n]) SQObjectPtr(); } };
  { for(SQInteger n = 0; n < ((SQInteger)func->_ndefaultparams); n++) { new (&nc->_defaultparams[n]) SQObjectPtr(); } };
  return nc;
 }
 void Release(){
  SQFunctionProto *f = _function;
  SQInteger size = (sizeof(SQClosure) + (f->_noutervalues*sizeof(SQObjectPtr)) + (f->_ndefaultparams*sizeof(SQObjectPtr)));
  { for(SQInteger nl = 0; nl < ((SQInteger)f->_noutervalues); nl++) { _outervalues[nl].~SQObjectPtr(); } };
  { for(SQInteger nl = 0; nl < ((SQInteger)f->_ndefaultparams); nl++) { _defaultparams[nl].~SQObjectPtr(); } };
  { if((_function)) { (_function)->_uiRef--; if((_function)->_uiRef == 0) (_function)->Release(); (_function) = __null; } };
  this->~SQClosure();
  sq_vm_free(this,size);
 }

 SQClosure *Clone()
 {
  SQFunctionProto *f = _function;
  SQClosure * ret = SQClosure::Create((this)->_sharedstate,f);
  ret->_env = _env;
  if(ret->_env) { (ret->_env)->_uiRef++; };
  { for(SQInteger _n_ = 0; _n_ < ((SQInteger)f->_noutervalues); _n_++) { ret->_outervalues[_n_] = _outervalues[_n_]; } };
  { for(SQInteger _n_ = 0; _n_ < ((SQInteger)f->_ndefaultparams); _n_++) { ret->_defaultparams[_n_] = _defaultparams[_n_]; } };
  return ret;
 }
 ~SQClosure();

 bool Save(SQVM *v,SQUserPointer up,SQWRITEFUNC write);
 static bool Load(SQVM *v,SQUserPointer up,SQREADFUNC read,SQObjectPtr &ret);

 void Mark(SQCollectable **chain);
 void Finalize(){
  SQFunctionProto *f = _function;
  { for(SQInteger _n_ = 0; _n_ < ((SQInteger)f->_noutervalues); _n_++) { _outervalues[_n_].Null(); } };
  { for(SQInteger _n_ = 0; _n_ < ((SQInteger)f->_ndefaultparams); _n_++) { _defaultparams[_n_].Null(); } };
 }
 SQObjectType GetType() {return OT_CLOSURE;}

 SQWeakRef *_env;
 SQClass *_base;
 SQFunctionProto *_function;
 SQObjectPtr *_outervalues;
 SQObjectPtr *_defaultparams;
};


struct SQOuter : public SQCollectable
{

private:
 SQOuter(SQSharedState *ss, SQObjectPtr *outer){_valptr = outer; _next = __null; {_next=__null;_prev=__null;_sharedstate=ss;}; AddToChain(&(this)->_sharedstate->_gc_chain,this); }

public:
 static SQOuter *Create(SQSharedState *ss, SQObjectPtr *outer)
 {
  SQOuter *nc = (SQOuter*)sq_vm_malloc((sizeof(SQOuter)));;
  new (nc) SQOuter(ss, outer);
  return nc;
 }
 ~SQOuter() { {if(!(_uiRef&0x80000000))RemoveFromChain(&(this)->_sharedstate->_gc_chain,this);}; }

 void Release()
 {
  this->~SQOuter();
  sq_vm_free(this,sizeof(SQOuter));
 }


 void Mark(SQCollectable **chain);
 void Finalize() { _value.Null(); }
 SQObjectType GetType() {return OT_OUTER;}


 SQObjectPtr *_valptr;
 SQInteger _idx;
 SQObjectPtr _value;
 SQOuter *_next;
};


struct SQGenerator : public SQCollectable
{
 enum SQGeneratorState{eRunning,eSuspended,eDead};
private:
 SQGenerator(SQSharedState *ss,SQClosure *closure){_closure=closure;_state=eRunning;_ci._generator=__null;{_next=__null;_prev=__null;_sharedstate=ss;};AddToChain(&(this)->_sharedstate->_gc_chain,this);}
public:
 static SQGenerator *Create(SQSharedState *ss,SQClosure *closure){
  SQGenerator *nc=(SQGenerator*)sq_vm_malloc((sizeof(SQGenerator)));;
  new (nc) SQGenerator(ss,closure);
  return nc;
 }
 ~SQGenerator()
 {
  {if(!(_uiRef&0x80000000))RemoveFromChain(&(this)->_sharedstate->_gc_chain,this);};
 }
    void Kill(){
  _state=eDead;
  _stack.resize(0);
  _closure.Null();}
 void Release(){
  {this->~SQGenerator();sq_vm_free(this,sizeof(SQGenerator));};
 }

 bool Yield(SQVM *v,SQInteger target);
 bool Resume(SQVM *v,SQObjectPtr &dest);

 void Mark(SQCollectable **chain);
 void Finalize(){_stack.resize(0);_closure.Null();}
 SQObjectType GetType() {return OT_GENERATOR;}

 SQObjectPtr _closure;
 SQObjectPtrVec _stack;
 SQVM::CallInfo _ci;
 ExceptionsTraps _etraps;
 SQGeneratorState _state;
};



struct SQNativeClosure : public SQCollectable
{
private:
 SQNativeClosure(SQSharedState *ss,SQFUNCTION func){_function=func;{_next=__null;_prev=__null;_sharedstate=ss;};AddToChain(&(this)->_sharedstate->_gc_chain,this); _env = __null;}
public:
 static SQNativeClosure *Create(SQSharedState *ss,SQFUNCTION func,SQInteger nouters)
 {
  SQInteger size = (sizeof(SQNativeClosure) + (nouters*sizeof(SQObjectPtr)));
  SQNativeClosure *nc=(SQNativeClosure*)sq_vm_malloc((size));;
  new (nc) SQNativeClosure(ss,func);
  nc->_outervalues = (SQObjectPtr *)(nc + 1);
  nc->_noutervalues = nouters;
  { for(SQInteger n = 0; n < ((SQInteger)nc->_noutervalues); n++) { new (&nc->_outervalues[n]) SQObjectPtr(); } };
  return nc;
 }
 SQNativeClosure *Clone()
 {
  SQNativeClosure * ret = SQNativeClosure::Create((this)->_sharedstate,_function,_noutervalues);
  ret->_env = _env;
  if(ret->_env) { (ret->_env)->_uiRef++; };
  ret->_name = _name;
  { for(SQInteger _n_ = 0; _n_ < ((SQInteger)_noutervalues); _n_++) { ret->_outervalues[_n_] = _outervalues[_n_]; } };
  ret->_typecheck.copy(_typecheck);
  ret->_nparamscheck = _nparamscheck;
  return ret;
 }
 ~SQNativeClosure()
 {
  { if((_env)) { (_env)->_uiRef--; if((_env)->_uiRef == 0) (_env)->Release(); (_env) = __null; } };
  {if(!(_uiRef&0x80000000))RemoveFromChain(&(this)->_sharedstate->_gc_chain,this);};
 }
 void Release(){
  SQInteger size = (sizeof(SQNativeClosure) + (_noutervalues*sizeof(SQObjectPtr)));
  { for(SQInteger nl = 0; nl < ((SQInteger)_noutervalues); nl++) { _outervalues[nl].~SQObjectPtr(); } };
  this->~SQNativeClosure();
  sq_free(this,size);
 }


 void Mark(SQCollectable **chain);
 void Finalize() { { for(SQInteger _n_ = 0; _n_ < ((SQInteger)_noutervalues); _n_++) { _outervalues[_n_].Null(); } }; }
 SQObjectType GetType() {return OT_NATIVECLOSURE;}

 SQInteger _nparamscheck;
 SQIntVec _typecheck;
 SQObjectPtr *_outervalues;
 SQUnsignedInteger _noutervalues;
 SQWeakRef *_env;
 SQFUNCTION _function;
 SQObjectPtr _name;
};
# 9 "../../../libs/squirrel/squirrel/sqdebug.cpp" 2
# 1 "../../../libs/squirrel/squirrel/sqstring.h" 1




inline SQHash _hashstr (const SQChar *s, size_t l)
{
  SQHash h = (SQHash)l;
  size_t step = (l>>5)|1;
  for (; l>=step; l-=step)
   h = h ^ ((h<<5)+(h>>2)+(unsigned short)*(s++));
  return h;
}

struct SQString : public SQRefCounted
{
 SQString(){}
 ~SQString(){}
public:
 static SQString *Create(SQSharedState *ss, const SQChar *, SQInteger len = -1 );
 SQInteger Next(const SQObjectPtr &refpos, SQObjectPtr &outkey, SQObjectPtr &outval);
 void Release();
 SQSharedState *_sharedstate;
 SQString *_next;
 SQInteger _len;
 SQHash _hash;
 SQChar _val[1];
};
# 10 "../../../libs/squirrel/squirrel/sqdebug.cpp" 2

SQRESULT sq_getfunctioninfo(HSQUIRRELVM v,SQInteger level,SQFunctionInfo *fi)
{
 SQInteger cssize = v->_callsstacksize;
 if (cssize > level) {
  SQVM::CallInfo &ci = v->_callsstack[cssize-level-1];
  if(((ci._closure)._type==OT_CLOSURE)) {
   SQClosure *c = ((ci._closure)._unVal.pClosure);
   SQFunctionProto *proto = c->_function;
   fi->funcid = proto;
   fi->name = ((proto->_name)._type) == OT_STRING?(proto->_name)._unVal.pString->_val:"unknown";
   fi->source = ((proto->_name)._type) == OT_STRING?(proto->_sourcename)._unVal.pString->_val:"unknown";
   return (0);
  }
 }
 return sq_throwerror(v,"the object is not a closure");
}

SQRESULT sq_stackinfos(HSQUIRRELVM v, SQInteger level, SQStackInfos *si)
{
 SQInteger cssize = v->_callsstacksize;
 if (cssize > level) {
  memset(si, 0, sizeof(SQStackInfos));
  SQVM::CallInfo &ci = v->_callsstack[cssize-level-1];
  switch (((ci._closure)._type)) {
  case OT_CLOSURE:{
   SQFunctionProto *func = ((ci._closure)._unVal.pClosure)->_function;
   if (((func->_name)._type) == OT_STRING)
    si->funcname = (func->_name)._unVal.pString->_val;
   if (((func->_sourcename)._type) == OT_STRING)
    si->source = (func->_sourcename)._unVal.pString->_val;
   si->line = func->GetLine(ci._ip);
      }
   break;
  case OT_NATIVECLOSURE:
   si->source = "NATIVE";
   si->funcname = "unknown";
   if(((((ci._closure)._unVal.pNativeClosure)->_name)._type) == OT_STRING)
    si->funcname = (((ci._closure)._unVal.pNativeClosure)->_name)._unVal.pString->_val;
   si->line = -1;
   break;
  default: break;
  }
  return (0);
 }
 return (-1);
}

void SQVM::Raise_Error(const SQChar *s, ...)
{
 va_list vl;
 __builtin_va_start(vl,s);
 SQInteger buffersize = (SQInteger)strlen(s)+(50*2);
 vsnprintf((_sharedstate->GetScratchPad((buffersize))),buffersize, s, vl);
 __builtin_va_end(vl);
 _lasterror = SQString::Create((this)->_sharedstate,(_sharedstate->GetScratchPad(-1)),-1);
}

void SQVM::Raise_Error(const SQObjectPtr &desc)
{
 _lasterror = desc;
}

SQString *SQVM::PrintObjVal(const SQObjectPtr &o)
{
 switch(((o)._type)) {
 case OT_STRING: return ((o)._unVal.pString);
 case OT_INTEGER:
  sprintf((_sharedstate->GetScratchPad((50 +1))), "%d", ((o)._unVal.nInteger));
  return SQString::Create((this)->_sharedstate, (_sharedstate->GetScratchPad(-1)));
  break;
 case OT_FLOAT:
  sprintf((_sharedstate->GetScratchPad((50 +1))), "%.14g", ((o)._unVal.fFloat));
  return SQString::Create((this)->_sharedstate, (_sharedstate->GetScratchPad(-1)));
  break;
 default:
  return SQString::Create((this)->_sharedstate, GetTypeName(o));
 }
}

void SQVM::Raise_IdxError(const SQObjectPtr &o)
{
 SQObjectPtr oval = PrintObjVal(o);
 Raise_Error("the index '%.50s' does not exist", (oval)._unVal.pString->_val);
}

void SQVM::Raise_CompareError(const SQObject &o1, const SQObject &o2)
{
 SQObjectPtr oval1 = PrintObjVal(o1), oval2 = PrintObjVal(o2);
 Raise_Error("comparison between '%.50s' and '%.50s'", (oval1)._unVal.pString->_val, (oval2)._unVal.pString->_val);
}


void SQVM::Raise_ParamTypeError(SQInteger nparam,SQInteger typemask,SQInteger type)
{
 SQObjectPtr exptypes = SQString::Create((this)->_sharedstate, "", -1);
 SQInteger found = 0;
 for(SQInteger i=0; i<16; i++)
 {
  SQInteger mask = 0x00000001 << i;
  if(typemask & (mask)) {
   if(found>0) StringCat(exptypes,SQString::Create((this)->_sharedstate, "|", -1), exptypes);
   found ++;
   StringCat(exptypes,SQString::Create((this)->_sharedstate, IdType2Name((SQObjectType)mask), -1), exptypes);
  }
 }
 Raise_Error("parameter %d has an invalid type '%s' ; expected: '%s'", nparam, IdType2Name((SQObjectType)type), (exptypes)._unVal.pString->_val);
}
