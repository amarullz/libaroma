# 1 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp"
# 1 "<command-line>"
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp"

# 1 "../../../libs/squirrel/include/squirrel.h" 1
# 26 "../../../libs/squirrel/include/squirrel.h"
extern "C" {
# 53 "../../../libs/squirrel/include/squirrel.h"
typedef int SQInteger;
typedef int SQInt32;
typedef unsigned int SQUnsignedInteger32;
typedef unsigned int SQUnsignedInteger;
typedef unsigned int SQHash;






typedef float SQFloat;
# 75 "../../../libs/squirrel/include/squirrel.h"
typedef SQUnsignedInteger SQRawObjectVal;
# 87 "../../../libs/squirrel/include/squirrel.h"
typedef void* SQUserPointer;
typedef SQUnsignedInteger SQBool;
typedef SQInteger SQRESULT;




struct SQVM;
struct SQTable;
struct SQArray;
struct SQString;
struct SQClosure;
struct SQGenerator;
struct SQNativeClosure;
struct SQUserData;
struct SQFunctionProto;
struct SQRefCounted;
struct SQClass;
struct SQInstance;
struct SQDelegable;
struct SQOuter;
# 148 "../../../libs/squirrel/include/squirrel.h"
typedef char SQChar;
# 225 "../../../libs/squirrel/include/squirrel.h"
typedef enum tagSQObjectType{
 OT_NULL = (0x00000001|0x01000000),
 OT_INTEGER = (0x00000002|0x04000000|0x01000000),
 OT_FLOAT = (0x00000004|0x04000000|0x01000000),
 OT_BOOL = (0x00000008|0x01000000),
 OT_STRING = (0x00000010|0x08000000),
 OT_TABLE = (0x00000020|0x08000000|0x02000000),
 OT_ARRAY = (0x00000040|0x08000000),
 OT_USERDATA = (0x00000080|0x08000000|0x02000000),
 OT_CLOSURE = (0x00000100|0x08000000),
 OT_NATIVECLOSURE = (0x00000200|0x08000000),
 OT_GENERATOR = (0x00000400|0x08000000),
 OT_USERPOINTER = 0x00000800,
 OT_THREAD = (0x00001000|0x08000000) ,
 OT_FUNCPROTO = (0x00002000|0x08000000),
 OT_CLASS = (0x00004000|0x08000000),
 OT_INSTANCE = (0x00008000|0x08000000|0x02000000),
 OT_WEAKREF = (0x00010000|0x08000000),
 OT_OUTER = (0x00020000|0x08000000)
}SQObjectType;




typedef union tagSQObjectValue
{
 struct SQTable *pTable;
 struct SQArray *pArray;
 struct SQClosure *pClosure;
 struct SQOuter *pOuter;
 struct SQGenerator *pGenerator;
 struct SQNativeClosure *pNativeClosure;
 struct SQString *pString;
 struct SQUserData *pUserData;
 SQInteger nInteger;
 SQFloat fFloat;
 SQUserPointer pUserPointer;
 struct SQFunctionProto *pFunctionProto;
 struct SQRefCounted *pRefCounted;
 struct SQDelegable *pDelegable;
 struct SQVM *pThread;
 struct SQClass *pClass;
 struct SQInstance *pInstance;
 struct SQWeakRef *pWeakRef;
 SQRawObjectVal raw;
}SQObjectValue;


typedef struct tagSQObject
{
 SQObjectType _type;
 SQObjectValue _unVal;
}SQObject;

typedef struct tagSQMemberHandle{
 SQBool _static;
 SQInteger _index;
}SQMemberHandle;

typedef struct tagSQStackInfos{
 const SQChar* funcname;
 const SQChar* source;
 SQInteger line;
}SQStackInfos;

typedef struct SQVM* HSQUIRRELVM;
typedef SQObject HSQOBJECT;
typedef SQMemberHandle HSQMEMBERHANDLE;
typedef SQInteger (*SQFUNCTION)(HSQUIRRELVM);
typedef SQInteger (*SQRELEASEHOOK)(SQUserPointer,SQInteger size);
typedef void (*SQCOMPILERERROR)(HSQUIRRELVM,const SQChar * ,const SQChar * ,SQInteger ,SQInteger );
typedef void (*SQPRINTFUNCTION)(HSQUIRRELVM,const SQChar * ,...);
typedef void (*SQDEBUGHOOK)(HSQUIRRELVM , SQInteger , const SQChar * , SQInteger , const SQChar * );
typedef SQInteger (*SQWRITEFUNC)(SQUserPointer,SQUserPointer,SQInteger);
typedef SQInteger (*SQREADFUNC)(SQUserPointer,SQUserPointer,SQInteger);

typedef SQInteger (*SQLEXREADFUNC)(SQUserPointer);

typedef struct tagSQRegFunction{
 const SQChar *name;
 SQFUNCTION f;
 SQInteger nparamscheck;
 const SQChar *typemask;
}SQRegFunction;

typedef struct tagSQFunctionInfo {
 SQUserPointer funcid;
 const SQChar *name;
 const SQChar *source;
}SQFunctionInfo;


extern HSQUIRRELVM sq_open(SQInteger initialstacksize);
extern HSQUIRRELVM sq_newthread(HSQUIRRELVM friendvm, SQInteger initialstacksize);
extern void sq_seterrorhandler(HSQUIRRELVM v);
extern void sq_close(HSQUIRRELVM v);
extern void sq_setforeignptr(HSQUIRRELVM v,SQUserPointer p);
extern SQUserPointer sq_getforeignptr(HSQUIRRELVM v);
extern void sq_setprintfunc(HSQUIRRELVM v, SQPRINTFUNCTION printfunc,SQPRINTFUNCTION errfunc);
extern SQPRINTFUNCTION sq_getprintfunc(HSQUIRRELVM v);
extern SQPRINTFUNCTION sq_geterrorfunc(HSQUIRRELVM v);
extern SQRESULT sq_suspendvm(HSQUIRRELVM v);
extern SQRESULT sq_wakeupvm(HSQUIRRELVM v,SQBool resumedret,SQBool retval,SQBool raiseerror,SQBool throwerror);
extern SQInteger sq_getvmstate(HSQUIRRELVM v);
extern SQInteger sq_getversion();


extern SQRESULT sq_compile(HSQUIRRELVM v,SQLEXREADFUNC read,SQUserPointer p,const SQChar *sourcename,SQBool raiseerror);
extern SQRESULT sq_compilebuffer(HSQUIRRELVM v,const SQChar *s,SQInteger size,const SQChar *sourcename,SQBool raiseerror);
extern void sq_enabledebuginfo(HSQUIRRELVM v, SQBool enable);
extern void sq_notifyallexceptions(HSQUIRRELVM v, SQBool enable);
extern void sq_setcompilererrorhandler(HSQUIRRELVM v,SQCOMPILERERROR f);


extern void sq_push(HSQUIRRELVM v,SQInteger idx);
extern void sq_pop(HSQUIRRELVM v,SQInteger nelemstopop);
extern void sq_poptop(HSQUIRRELVM v);
extern void sq_remove(HSQUIRRELVM v,SQInteger idx);
extern SQInteger sq_gettop(HSQUIRRELVM v);
extern void sq_settop(HSQUIRRELVM v,SQInteger newtop);
extern SQRESULT sq_reservestack(HSQUIRRELVM v,SQInteger nsize);
extern SQInteger sq_cmp(HSQUIRRELVM v);
extern void sq_move(HSQUIRRELVM dest,HSQUIRRELVM src,SQInteger idx);


extern SQUserPointer sq_newuserdata(HSQUIRRELVM v,SQUnsignedInteger size);
extern void sq_newtable(HSQUIRRELVM v);
extern void sq_newtableex(HSQUIRRELVM v,SQInteger initialcapacity);
extern void sq_newarray(HSQUIRRELVM v,SQInteger size);
extern void sq_newclosure(HSQUIRRELVM v,SQFUNCTION func,SQUnsignedInteger nfreevars);
extern SQRESULT sq_setparamscheck(HSQUIRRELVM v,SQInteger nparamscheck,const SQChar *typemask);
extern SQRESULT sq_bindenv(HSQUIRRELVM v,SQInteger idx);
extern void sq_pushstring(HSQUIRRELVM v,const SQChar *s,SQInteger len);
extern void sq_pushfloat(HSQUIRRELVM v,SQFloat f);
extern void sq_pushinteger(HSQUIRRELVM v,SQInteger n);
extern void sq_pushbool(HSQUIRRELVM v,SQBool b);
extern void sq_pushuserpointer(HSQUIRRELVM v,SQUserPointer p);
extern void sq_pushnull(HSQUIRRELVM v);
extern SQObjectType sq_gettype(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_typeof(HSQUIRRELVM v,SQInteger idx);
extern SQInteger sq_getsize(HSQUIRRELVM v,SQInteger idx);
extern SQHash sq_gethash(HSQUIRRELVM v, SQInteger idx);
extern SQRESULT sq_getbase(HSQUIRRELVM v,SQInteger idx);
extern SQBool sq_instanceof(HSQUIRRELVM v);
extern SQRESULT sq_tostring(HSQUIRRELVM v,SQInteger idx);
extern void sq_tobool(HSQUIRRELVM v, SQInteger idx, SQBool *b);
extern SQRESULT sq_getstring(HSQUIRRELVM v,SQInteger idx,const SQChar **c);
extern SQRESULT sq_getinteger(HSQUIRRELVM v,SQInteger idx,SQInteger *i);
extern SQRESULT sq_getfloat(HSQUIRRELVM v,SQInteger idx,SQFloat *f);
extern SQRESULT sq_getbool(HSQUIRRELVM v,SQInteger idx,SQBool *b);
extern SQRESULT sq_getthread(HSQUIRRELVM v,SQInteger idx,HSQUIRRELVM *thread);
extern SQRESULT sq_getuserpointer(HSQUIRRELVM v,SQInteger idx,SQUserPointer *p);
extern SQRESULT sq_getuserdata(HSQUIRRELVM v,SQInteger idx,SQUserPointer *p,SQUserPointer *typetag);
extern SQRESULT sq_settypetag(HSQUIRRELVM v,SQInteger idx,SQUserPointer typetag);
extern SQRESULT sq_gettypetag(HSQUIRRELVM v,SQInteger idx,SQUserPointer *typetag);
extern void sq_setreleasehook(HSQUIRRELVM v,SQInteger idx,SQRELEASEHOOK hook);
extern SQChar *sq_getscratchpad(HSQUIRRELVM v,SQInteger minsize);
extern SQRESULT sq_getfunctioninfo(HSQUIRRELVM v,SQInteger level,SQFunctionInfo *fi);
extern SQRESULT sq_getclosureinfo(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger *nparams,SQUnsignedInteger *nfreevars);
extern SQRESULT sq_getclosurename(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setnativeclosurename(HSQUIRRELVM v,SQInteger idx,const SQChar *name);
extern SQRESULT sq_setinstanceup(HSQUIRRELVM v, SQInteger idx, SQUserPointer p);
extern SQRESULT sq_getinstanceup(HSQUIRRELVM v, SQInteger idx, SQUserPointer *p,SQUserPointer typetag);
extern SQRESULT sq_setclassudsize(HSQUIRRELVM v, SQInteger idx, SQInteger udsize);
extern SQRESULT sq_newclass(HSQUIRRELVM v,SQBool hasbase);
extern SQRESULT sq_createinstance(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setattributes(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getattributes(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getclass(HSQUIRRELVM v,SQInteger idx);
extern void sq_weakref(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getdefaultdelegate(HSQUIRRELVM v,SQObjectType t);
extern SQRESULT sq_getmemberhandle(HSQUIRRELVM v,SQInteger idx,HSQMEMBERHANDLE *handle);
extern SQRESULT sq_getbyhandle(HSQUIRRELVM v,SQInteger idx,const HSQMEMBERHANDLE *handle);
extern SQRESULT sq_setbyhandle(HSQUIRRELVM v,SQInteger idx,const HSQMEMBERHANDLE *handle);


extern void sq_pushroottable(HSQUIRRELVM v);
extern void sq_pushregistrytable(HSQUIRRELVM v);
extern void sq_pushconsttable(HSQUIRRELVM v);
extern SQRESULT sq_setroottable(HSQUIRRELVM v);
extern SQRESULT sq_setconsttable(HSQUIRRELVM v);
extern SQRESULT sq_newslot(HSQUIRRELVM v, SQInteger idx, SQBool bstatic);
extern SQRESULT sq_deleteslot(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_set(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_get(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawget(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawset(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_rawdeleteslot(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_newmember(HSQUIRRELVM v,SQInteger idx,SQBool bstatic);
extern SQRESULT sq_rawnewmember(HSQUIRRELVM v,SQInteger idx,SQBool bstatic);
extern SQRESULT sq_arrayappend(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_arraypop(HSQUIRRELVM v,SQInteger idx,SQBool pushval);
extern SQRESULT sq_arrayresize(HSQUIRRELVM v,SQInteger idx,SQInteger newsize);
extern SQRESULT sq_arrayreverse(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_arrayremove(HSQUIRRELVM v,SQInteger idx,SQInteger itemidx);
extern SQRESULT sq_arrayinsert(HSQUIRRELVM v,SQInteger idx,SQInteger destpos);
extern SQRESULT sq_setdelegate(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getdelegate(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_clone(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_setfreevariable(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger nval);
extern SQRESULT sq_next(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_getweakrefval(HSQUIRRELVM v,SQInteger idx);
extern SQRESULT sq_clear(HSQUIRRELVM v,SQInteger idx);


extern SQRESULT sq_call(HSQUIRRELVM v,SQInteger params,SQBool retval,SQBool raiseerror);
extern SQRESULT sq_resume(HSQUIRRELVM v,SQBool retval,SQBool raiseerror);
extern const SQChar *sq_getlocal(HSQUIRRELVM v,SQUnsignedInteger level,SQUnsignedInteger idx);
extern SQRESULT sq_getcallee(HSQUIRRELVM v);
extern const SQChar *sq_getfreevariable(HSQUIRRELVM v,SQInteger idx,SQUnsignedInteger nval);
extern SQRESULT sq_throwerror(HSQUIRRELVM v,const SQChar *err);
extern SQRESULT sq_throwobject(HSQUIRRELVM v);
extern void sq_reseterror(HSQUIRRELVM v);
extern void sq_getlasterror(HSQUIRRELVM v);


extern SQRESULT sq_getstackobj(HSQUIRRELVM v,SQInteger idx,HSQOBJECT *po);
extern void sq_pushobject(HSQUIRRELVM v,HSQOBJECT obj);
extern void sq_addref(HSQUIRRELVM v,HSQOBJECT *po);
extern SQBool sq_release(HSQUIRRELVM v,HSQOBJECT *po);
extern SQUnsignedInteger sq_getrefcount(HSQUIRRELVM v,HSQOBJECT *po);
extern void sq_resetobject(HSQOBJECT *po);
extern const SQChar *sq_objtostring(const HSQOBJECT *o);
extern SQBool sq_objtobool(const HSQOBJECT *o);
extern SQInteger sq_objtointeger(const HSQOBJECT *o);
extern SQFloat sq_objtofloat(const HSQOBJECT *o);
extern SQUserPointer sq_objtouserpointer(const HSQOBJECT *o);
extern SQRESULT sq_getobjtypetag(const HSQOBJECT *o,SQUserPointer * typetag);


extern SQInteger sq_collectgarbage(HSQUIRRELVM v);
extern SQRESULT sq_resurrectunreachable(HSQUIRRELVM v);


extern SQRESULT sq_writeclosure(HSQUIRRELVM vm,SQWRITEFUNC writef,SQUserPointer up);
extern SQRESULT sq_readclosure(HSQUIRRELVM vm,SQREADFUNC readf,SQUserPointer up);


extern void *sq_malloc(SQUnsignedInteger size);
extern void *sq_realloc(void* p,SQUnsignedInteger oldsize,SQUnsignedInteger newsize);
extern void sq_free(void *p,SQUnsignedInteger size);


extern SQRESULT sq_stackinfos(HSQUIRRELVM v,SQInteger level,SQStackInfos *si);
extern void sq_setdebughook(HSQUIRRELVM v);
extern void sq_setnativedebughook(HSQUIRRELVM v,SQDEBUGHOOK hook);
# 503 "../../../libs/squirrel/include/squirrel.h"
}
# 3 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 1 3 4
# 25 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 1 3 4
# 378 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 1 3 4
# 385 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 386 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\sys\\cdefs.h" 2 3 4
# 379 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 402 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 1 3 4
# 10 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs-hard.h" 1 3 4
# 11 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\gnu\\stubs.h" 2 3 4
# 403 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\features.h" 2 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4

extern "C" {




# 1 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 1 3 4
# 212 "d:\\devtools\\linaro\\lib\\gcc\\arm-linux-gnueabihf\\4.8.3\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4
# 44 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 164 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 234 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 261 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\string.h" 3 4
}
# 4 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 1 3 4
# 26 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\wordsize.h" 1 3 4
# 28 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 121 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\typesizes.h" 1 3 4
# 122 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 2 3 4

extern "C" {
# 39 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 1 3 4
# 36 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\endian.h" 1 3 4
# 37 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 60 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 1 3 4
# 34 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap-16.h" 1 3 4
# 35 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 2 3 4
# 43 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 74 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\endian.h" 2 3 4
# 40 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 104 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 271 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 347 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\ctype.h" 3 4
}
# 5 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp" 2
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\setjmp.h" 1 3 4
# 27 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\setjmp.h" 3 4
extern "C" {

# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\setjmp.h" 1 3 4
# 33 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\setjmp.h" 3 4
typedef int __jmp_buf[64] __attribute__((__aligned__ (8)));
# 30 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\setjmp.h" 2 3 4
# 1 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 1 3 4
# 22 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\bits\\sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 31 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\setjmp.h" 2 3 4



struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };




typedef struct __jmp_buf_tag jmp_buf[1];



extern int setjmp (jmp_buf __env) throw ();






extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) throw ();



extern int _setjmp (struct __jmp_buf_tag __env[1]) throw ();










extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     throw () __attribute__ ((__noreturn__));







extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     throw () __attribute__ ((__noreturn__));







typedef struct __jmp_buf_tag sigjmp_buf[1];
# 102 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\setjmp.h" 3 4
extern void siglongjmp (sigjmp_buf __env, int __val)
     throw () __attribute__ ((__noreturn__));
# 112 "d:\\devtools\\linaro\\arm-linux-gnueabihf\\libc\\usr\\include\\setjmp.h" 3 4
}
# 6 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp" 2
# 1 "../../../libs/squirrel/include/sqstdstring.h" 1





extern "C" {


typedef unsigned int SQRexBool;
typedef struct SQRex SQRex;

typedef struct {
 const SQChar *begin;
 SQInteger len;
} SQRexMatch;

extern SQRex *sqstd_rex_compile(const SQChar *pattern,const SQChar **error);
extern void sqstd_rex_free(SQRex *exp);
extern SQBool sqstd_rex_match(SQRex* exp,const SQChar* text);
extern SQBool sqstd_rex_search(SQRex* exp,const SQChar* text, const SQChar** out_begin, const SQChar** out_end);
extern SQBool sqstd_rex_searchrange(SQRex* exp,const SQChar* text_begin,const SQChar* text_end,const SQChar** out_begin, const SQChar** out_end);
extern SQInteger sqstd_rex_getsubexpcount(SQRex* exp);
extern SQBool sqstd_rex_getsubexp(SQRex* exp, SQInteger n, SQRexMatch *subexp);

extern SQRESULT sqstd_format(HSQUIRRELVM v,SQInteger nformatstringidx,SQInteger *outlen,SQChar **output);

extern SQRESULT sqstd_register_stringlib(HSQUIRRELVM v);


}
# 7 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp" 2
# 51 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp"
typedef int SQRexNodeType;

typedef struct tagSQRexNode{
 SQRexNodeType type;
 SQInteger left;
 SQInteger right;
 SQInteger next;
}SQRexNode;

struct SQRex{
 const SQChar *_eol;
 const SQChar *_bol;
 const SQChar *_p;
 SQInteger _first;
 SQInteger _op;
 SQRexNode *_nodes;
 SQInteger _nallocated;
 SQInteger _nsize;
 SQInteger _nsubexpr;
 SQRexMatch *_matches;
 SQInteger _currsubexp;
 void *_jmpbuf;
 const SQChar **_error;
};

static SQInteger sqstd_rex_list(SQRex *exp);

static SQInteger sqstd_rex_newnode(SQRex *exp, SQRexNodeType type)
{
 SQRexNode n;
 n.type = type;
 n.next = n.right = n.left = -1;
 if(type == (0xFF +3))
  n.right = exp->_nsubexpr++;
 if(exp->_nallocated < (exp->_nsize + 1)) {
  SQInteger oldsize = exp->_nallocated;
  exp->_nallocated *= 2;
  exp->_nodes = (SQRexNode *)sq_realloc(exp->_nodes, oldsize * sizeof(SQRexNode) ,exp->_nallocated * sizeof(SQRexNode));
 }
 exp->_nodes[exp->_nsize++] = n;
 SQInteger newid = exp->_nsize - 1;
 return (SQInteger)newid;
}

static void sqstd_rex_error(SQRex *exp,const SQChar *error)
{
 if(exp->_error) *exp->_error = error;
 longjmp(*((jmp_buf*)exp->_jmpbuf),-1);
}

static void sqstd_rex_expect(SQRex *exp, SQInteger n){
 if((*exp->_p) != n)
  sqstd_rex_error(exp, "expected paren");
 exp->_p++;
}

static SQChar sqstd_rex_escapechar(SQRex *exp)
{
 if(*exp->_p == ('\\')){
  exp->_p++;
  switch(*exp->_p) {
  case 'v': exp->_p++; return '\v';
  case 'n': exp->_p++; return '\n';
  case 't': exp->_p++; return '\t';
  case 'r': exp->_p++; return '\r';
  case 'f': exp->_p++; return '\f';
  default: return (*exp->_p++);
  }
 } else if(!isprint(*exp->_p)) sqstd_rex_error(exp,"letter expected");
 return (*exp->_p++);
}

static SQInteger sqstd_rex_charclass(SQRex *exp,SQInteger classid)
{
 SQInteger n = sqstd_rex_newnode(exp,(0xFF +7));
 exp->_nodes[n].left = classid;
 return n;
}

static SQInteger sqstd_rex_charnode(SQRex *exp,SQBool isclass)
{
 SQChar t;
 if(*exp->_p == ('\\')) {
  exp->_p++;
  switch(*exp->_p) {
   case 'n': exp->_p++; return sqstd_rex_newnode(exp,'\n');
   case 't': exp->_p++; return sqstd_rex_newnode(exp,'\t');
   case 'r': exp->_p++; return sqstd_rex_newnode(exp,'\r');
   case 'f': exp->_p++; return sqstd_rex_newnode(exp,'\f');
   case 'v': exp->_p++; return sqstd_rex_newnode(exp,'\v');
   case 'a': case 'A': case 'w': case 'W': case 's': case 'S':
   case 'd': case 'D': case 'x': case 'X': case 'c': case 'C':
   case 'p': case 'P': case 'l': case 'u':
    {
    t = *exp->_p; exp->_p++;
    return sqstd_rex_charclass(exp,t);
    }
   case 'b':
   case 'B':
    if(!isclass) {
     SQInteger node = sqstd_rex_newnode(exp,(0xFF +13));
     exp->_nodes[node].left = *exp->_p;
     exp->_p++;
     return node;
    }
   default:
    t = *exp->_p; exp->_p++;
    return sqstd_rex_newnode(exp,t);
  }
 }
 else if(!isprint(*exp->_p)) {

  sqstd_rex_error(exp,"letter expected");
 }
 t = *exp->_p; exp->_p++;
 return sqstd_rex_newnode(exp,t);
}
static SQInteger sqstd_rex_class(SQRex *exp)
{
 SQInteger ret = -1;
 SQInteger first = -1,chain;
 if(*exp->_p == ('^')){
  ret = sqstd_rex_newnode(exp,(0xFF +8));
  exp->_p++;
 }else ret = sqstd_rex_newnode(exp,(0xFF +6));

 if(*exp->_p == ']') sqstd_rex_error(exp,"empty class");
 chain = ret;
 while(*exp->_p != ']' && exp->_p != exp->_eol) {
  if(*exp->_p == '-' && first != -1){
   SQInteger r;
   if(*exp->_p++ == ']') sqstd_rex_error(exp,"unfinished range");
   r = sqstd_rex_newnode(exp,(0xFF +9));
   if(exp->_nodes[first].type>*exp->_p) sqstd_rex_error(exp,"invalid range");
   if(exp->_nodes[first].type == (0xFF +7)) sqstd_rex_error(exp,"cannot use character classes in ranges");
   exp->_nodes[r].left = exp->_nodes[first].type;
   SQInteger t = sqstd_rex_escapechar(exp);
   exp->_nodes[r].right = t;
            exp->_nodes[chain].next = r;
   chain = r;
   first = -1;
  }
  else{
   if(first!=-1){
    SQInteger c = first;
    exp->_nodes[chain].next = c;
    chain = c;
    first = sqstd_rex_charnode(exp,(1));
   }
   else{
    first = sqstd_rex_charnode(exp,(1));
   }
  }
 }
 if(first!=-1){
  SQInteger c = first;
  exp->_nodes[chain].next = c;
  chain = c;
  first = -1;
 }

 exp->_nodes[ret].left = exp->_nodes[ret].next;
 exp->_nodes[ret].next = -1;
 return ret;
}

static SQInteger sqstd_rex_parsenumber(SQRex *exp)
{
 SQInteger ret = *exp->_p-'0';
 SQInteger positions = 10;
 exp->_p++;
 while(isdigit(*exp->_p)) {
  ret = ret*10+(*exp->_p++-'0');
  if(positions==1000000000) sqstd_rex_error(exp,"overflow in numeric constant");
  positions *= 10;
 };
 return ret;
}

static SQInteger sqstd_rex_element(SQRex *exp)
{
 SQInteger ret = -1;
 switch(*exp->_p)
 {
 case '(': {
  SQInteger expr;
  exp->_p++;


  if(*exp->_p =='?') {
   exp->_p++;
   sqstd_rex_expect(exp,':');
   expr = sqstd_rex_newnode(exp,(0xFF +4));
  }
  else
   expr = sqstd_rex_newnode(exp,(0xFF +3));
  SQInteger newn = sqstd_rex_list(exp);
  exp->_nodes[expr].left = newn;
  ret = expr;
  sqstd_rex_expect(exp,')');
     }
     break;
 case '[':
  exp->_p++;
  ret = sqstd_rex_class(exp);
  sqstd_rex_expect(exp,']');
  break;
 case ('$'): exp->_p++; ret = sqstd_rex_newnode(exp,(0xFF +11));break;
 case ('.'): exp->_p++; ret = sqstd_rex_newnode(exp,(0xFF +5));break;
 default:
  ret = sqstd_rex_charnode(exp,(0));
  break;
 }


 SQBool isgreedy = (0);
 unsigned short p0 = 0, p1 = 0;
 switch(*exp->_p){
  case ('*'): p0 = 0; p1 = 0xFFFF; exp->_p++; isgreedy = (1); break;
  case ('+'): p0 = 1; p1 = 0xFFFF; exp->_p++; isgreedy = (1); break;
  case ('?'): p0 = 0; p1 = 1; exp->_p++; isgreedy = (1); break;
  case '{':
   exp->_p++;
   if(!isdigit(*exp->_p)) sqstd_rex_error(exp,"number expected");
   p0 = (unsigned short)sqstd_rex_parsenumber(exp);

   switch(*exp->_p) {
  case '}':
   p1 = p0; exp->_p++;
   break;
  case ',':
   exp->_p++;
   p1 = 0xFFFF;
   if(isdigit(*exp->_p)){
    p1 = (unsigned short)sqstd_rex_parsenumber(exp);
   }
   sqstd_rex_expect(exp,'}');
   break;
  default:
   sqstd_rex_error(exp,", or } expected");
   }

   isgreedy = (1);
   break;

 }
 if(isgreedy) {
  SQInteger nnode = sqstd_rex_newnode(exp,(0xFF +1));
  exp->_nodes[nnode].left = ret;
  exp->_nodes[nnode].right = ((p0)<<16)|p1;
  ret = nnode;
 }

 if((*exp->_p != ('|')) && (*exp->_p != ')') && (*exp->_p != ('*')) && (*exp->_p != ('+')) && (*exp->_p != '\0')) {
  SQInteger nnode = sqstd_rex_element(exp);
  exp->_nodes[ret].next = nnode;
 }

 return ret;
}

static SQInteger sqstd_rex_list(SQRex *exp)
{
 SQInteger ret=-1,e;
 if(*exp->_p == ('^')) {
  exp->_p++;
  ret = sqstd_rex_newnode(exp,(0xFF +12));
 }
 e = sqstd_rex_element(exp);
 if(ret != -1) {
  exp->_nodes[ret].next = e;
 }
 else ret = e;

 if(*exp->_p == ('|')) {
  SQInteger temp,tright;
  exp->_p++;
  temp = sqstd_rex_newnode(exp,(0xFF +2));
  exp->_nodes[temp].left = ret;
  tright = sqstd_rex_list(exp);
  exp->_nodes[temp].right = tright;
  ret = temp;
 }
 return ret;
}

static SQBool sqstd_rex_matchcclass(SQInteger cclass,SQChar c)
{
 switch(cclass) {
 case 'a': return isalpha(c)?(1):(0);
 case 'A': return !isalpha(c)?(1):(0);
 case 'w': return (isalnum(c) || c == '_')?(1):(0);
 case 'W': return (!isalnum(c) && c != '_')?(1):(0);
 case 's': return isspace(c)?(1):(0);
 case 'S': return !isspace(c)?(1):(0);
 case 'd': return isdigit(c)?(1):(0);
 case 'D': return !isdigit(c)?(1):(0);
 case 'x': return isxdigit(c)?(1):(0);
 case 'X': return !isxdigit(c)?(1):(0);
 case 'c': return iscntrl(c)?(1):(0);
 case 'C': return !iscntrl(c)?(1):(0);
 case 'p': return ispunct(c)?(1):(0);
 case 'P': return !ispunct(c)?(1):(0);
 case 'l': return islower(c)?(1):(0);
 case 'u': return isupper(c)?(1):(0);
 }
 return (0);
}

static SQBool sqstd_rex_matchclass(SQRex* exp,SQRexNode *node,SQChar c)
{
 do {
  switch(node->type) {
   case (0xFF +9):
    if(c >= node->left && c <= node->right) return (1);
    break;
   case (0xFF +7):
    if(sqstd_rex_matchcclass(node->left,c)) return (1);
    break;
   default:
    if(c == node->type)return (1);
  }
 } while((node->next != -1) && (node = &exp->_nodes[node->next]));
 return (0);
}

static const SQChar *sqstd_rex_matchnode(SQRex* exp,SQRexNode *node,const SQChar *str,SQRexNode *next)
{

 SQRexNodeType type = node->type;
 switch(type) {
 case (0xFF +1): {

  SQRexNode *greedystop = __null;
  SQInteger p0 = (node->right >> 16)&0x0000FFFF, p1 = node->right&0x0000FFFF, nmaches = 0;
  const SQChar *s=str, *good = str;

  if(node->next != -1) {
   greedystop = &exp->_nodes[node->next];
  }
  else {
   greedystop = next;
  }

  while((nmaches == 0xFFFF || nmaches < p1)) {

   const SQChar *stop;
   if(!(s = sqstd_rex_matchnode(exp,&exp->_nodes[node->left],s,greedystop)))
    break;
   nmaches++;
   good=s;
   if(greedystop) {


    if(greedystop->type != (0xFF +1) ||
    (greedystop->type == (0xFF +1) && ((greedystop->right >> 16)&0x0000FFFF) != 0))
    {
     SQRexNode *gnext = __null;
     if(greedystop->next != -1) {
      gnext = &exp->_nodes[greedystop->next];
     }else if(next && next->next != -1){
      gnext = &exp->_nodes[next->next];
     }
     stop = sqstd_rex_matchnode(exp,greedystop,s,gnext);
     if(stop) {

      if(p0 == p1 && p0 == nmaches) break;
      else if(nmaches >= p0 && p1 == 0xFFFF) break;
      else if(nmaches >= p0 && nmaches <= p1) break;
     }
    }
   }

   if(s >= exp->_eol)
    break;
  }
  if(p0 == p1 && p0 == nmaches) return good;
  else if(nmaches >= p0 && p1 == 0xFFFF) return good;
  else if(nmaches >= p0 && nmaches <= p1) return good;
  return __null;
 }
 case (0xFF +2): {
   const SQChar *asd = str;
   SQRexNode *temp=&exp->_nodes[node->left];
   while( (asd = sqstd_rex_matchnode(exp,temp,asd,__null)) ) {
    if(temp->next != -1)
     temp = &exp->_nodes[temp->next];
    else
     return asd;
   }
   asd = str;
   temp = &exp->_nodes[node->right];
   while( (asd = sqstd_rex_matchnode(exp,temp,asd,__null)) ) {
    if(temp->next != -1)
     temp = &exp->_nodes[temp->next];
    else
     return asd;
   }
   return __null;
   break;
 }
 case (0xFF +3):
 case (0xFF +4):{
   SQRexNode *n = &exp->_nodes[node->left];
   const SQChar *cur = str;
   SQInteger capture = -1;
   if(node->type != (0xFF +4) && node->right == exp->_currsubexp) {
    capture = exp->_currsubexp;
    exp->_matches[capture].begin = cur;
    exp->_currsubexp++;
   }
   SQInteger tempcap = exp->_currsubexp;
   do {
    SQRexNode *subnext = __null;
    if(n->next != -1) {
     subnext = &exp->_nodes[n->next];
    }else {
     subnext = next;
    }
    if(!(cur = sqstd_rex_matchnode(exp,n,cur,subnext))) {
     if(capture != -1){
      exp->_matches[capture].begin = 0;
      exp->_matches[capture].len = 0;
     }
     return __null;
    }
   } while((n->next != -1) && (n = &exp->_nodes[n->next]));

   exp->_currsubexp = tempcap;
   if(capture != -1)
    exp->_matches[capture].len = cur - exp->_matches[capture].begin;
   return cur;
 }
 case (0xFF +13):
  if((str == exp->_bol && !isspace(*str))
   || (str == exp->_eol && !isspace(*(str-1)))
   || (!isspace(*str) && isspace(*(str+1)))
   || (isspace(*str) && !isspace(*(str+1))) ) {
   return (node->left == 'b')?str:__null;
  }
  return (node->left == 'b')?__null:str;
 case (0xFF +12):
  if(str == exp->_bol) return str;
  return __null;
 case (0xFF +11):
  if(str == exp->_eol) return str;
  return __null;
 case (0xFF +5):{
  str++;
    }
  return str;
 case (0xFF +8):
 case (0xFF +6):
  if(sqstd_rex_matchclass(exp,&exp->_nodes[node->left],*str)?(type == (0xFF +6)?(1):(0)):(type == (0xFF +8)?(1):(0))) {
   str++;
   return str;
  }
  return __null;
 case (0xFF +7):
  if(sqstd_rex_matchcclass(node->left,*str)) {
   str++;
   return str;
  }
  return __null;
 default:
  if(*str != node->type) return __null;
  str++;
  return str;
 }
 return __null;
}


SQRex *sqstd_rex_compile(const SQChar *pattern,const SQChar **error)
{
 SQRex *exp = (SQRex *)sq_malloc(sizeof(SQRex));
 exp->_eol = exp->_bol = __null;
 exp->_p = pattern;
 exp->_nallocated = (SQInteger)strlen(pattern) * sizeof(SQChar);
 exp->_nodes = (SQRexNode *)sq_malloc(exp->_nallocated * sizeof(SQRexNode));
 exp->_nsize = 0;
 exp->_matches = 0;
 exp->_nsubexpr = 0;
 exp->_first = sqstd_rex_newnode(exp,(0xFF +3));
 exp->_error = error;
 exp->_jmpbuf = sq_malloc(sizeof(jmp_buf));
 if(_setjmp (*((jmp_buf*)exp->_jmpbuf)) == 0) {
  SQInteger res = sqstd_rex_list(exp);
  exp->_nodes[exp->_first].left = res;
  if(*exp->_p!='\0')
   sqstd_rex_error(exp,"unexpected character");
# 559 "../../../libs/squirrel/sqstdlib/sqstdrex.cpp"
  exp->_matches = (SQRexMatch *) sq_malloc(exp->_nsubexpr * sizeof(SQRexMatch));
  memset(exp->_matches,0,exp->_nsubexpr * sizeof(SQRexMatch));
 }
 else{
  sqstd_rex_free(exp);
  return __null;
 }
 return exp;
}

void sqstd_rex_free(SQRex *exp)
{
 if(exp) {
  if(exp->_nodes) sq_free(exp->_nodes,exp->_nallocated * sizeof(SQRexNode));
  if(exp->_jmpbuf) sq_free(exp->_jmpbuf,sizeof(jmp_buf));
  if(exp->_matches) sq_free(exp->_matches,exp->_nsubexpr * sizeof(SQRexMatch));
  sq_free(exp,sizeof(SQRex));
 }
}

SQBool sqstd_rex_match(SQRex* exp,const SQChar* text)
{
 const SQChar* res = __null;
 exp->_bol = text;
 exp->_eol = text + strlen(text);
 exp->_currsubexp = 0;
 res = sqstd_rex_matchnode(exp,exp->_nodes,text,__null);
 if(res == __null || res != exp->_eol)
  return (0);
 return (1);
}

SQBool sqstd_rex_searchrange(SQRex* exp,const SQChar* text_begin,const SQChar* text_end,const SQChar** out_begin, const SQChar** out_end)
{
 const SQChar *cur = __null;
 SQInteger node = exp->_first;
 if(text_begin >= text_end) return (0);
 exp->_bol = text_begin;
 exp->_eol = text_end;
 do {
  cur = text_begin;
  while(node != -1) {
   exp->_currsubexp = 0;
   cur = sqstd_rex_matchnode(exp,&exp->_nodes[node],cur,__null);
   if(!cur)
    break;
   node = exp->_nodes[node].next;
  }
  text_begin++;
 } while(cur == __null && text_begin != text_end);

 if(cur == __null)
  return (0);

 --text_begin;

 if(out_begin) *out_begin = text_begin;
 if(out_end) *out_end = cur;
 return (1);
}

SQBool sqstd_rex_search(SQRex* exp,const SQChar* text, const SQChar** out_begin, const SQChar** out_end)
{
 return sqstd_rex_searchrange(exp,text,text + strlen(text),out_begin,out_end);
}

SQInteger sqstd_rex_getsubexpcount(SQRex* exp)
{
 return exp->_nsubexpr;
}

SQBool sqstd_rex_getsubexp(SQRex* exp, SQInteger n, SQRexMatch *subexp)
{
 if( n<0 || n >= exp->_nsubexpr) return (0);
 *subexp = exp->_matches[n];
 return (1);
}
